
Little_story.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ca  00800060  00003382  00003416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080012a  0080012a  000034e0  2**0
                  ALLOC
  3 .stab         00002250  00000000  00000000  000034e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c87  00000000  00000000  00005730  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000063b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000064f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006667  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000082b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000919b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a335  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ab03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 32       	cpi	r26, 0x2A	; 42
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e2       	ldi	r26, 0x2A	; 42
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 33       	cpi	r26, 0x34	; 52
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <main>
      8a:	0c 94 bf 19 	jmp	0x337e	; 0x337e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 88 19 	jmp	0x3310	; 0x3310 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af ee       	ldi	r26, 0xEF	; 239
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 94 19 	jmp	0x3328	; 0x3328 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b0 19 	jmp	0x3360	; 0x3360 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 94 19 	jmp	0x3328	; 0x3328 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b0 19 	jmp	0x3360	; 0x3360 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 88 19 	jmp	0x3310	; 0x3310 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f ee       	ldi	r24, 0xEF	; 239
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 94 19 	jmp	0x3328	; 0x3328 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b0 19 	jmp	0x3360	; 0x3360 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 94 19 	jmp	0x3328	; 0x3328 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b0 19 	jmp	0x3360	; 0x3360 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 94 19 	jmp	0x3328	; 0x3328 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b0 19 	jmp	0x3360	; 0x3360 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 98 19 	jmp	0x3330	; 0x3330 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b4 19 	jmp	0x3368	; 0x3368 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidCommand>:
#include "config.h"



void CLCD_voidCommand(u8int_t copy_u8Command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	e9 97       	sbiw	r28, 0x39	; 57
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 af       	std	Y+57, r24	; 0x39
	/*Set RS pin low for command*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,PIN_LOW);
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	63 e0       	ldi	r22, 0x03	; 3
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
	/*Set RW pin Low to write*/
	//DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN ,PIN_LOW);

	/*Send command to data pins */
	DIO_SetPinValue(PORT_B,PIN_0,GET_BIT(copy_u8Command,4));
     b66:	89 ad       	ldd	r24, Y+57	; 0x39
     b68:	82 95       	swap	r24
     b6a:	8f 70       	andi	r24, 0x0F	; 15
     b6c:	98 2f       	mov	r25, r24
     b6e:	91 70       	andi	r25, 0x01	; 1
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	49 2f       	mov	r20, r25
     b76:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_1,GET_BIT(copy_u8Command,5));
     b7a:	89 ad       	ldd	r24, Y+57	; 0x39
     b7c:	82 95       	swap	r24
     b7e:	86 95       	lsr	r24
     b80:	87 70       	andi	r24, 0x07	; 7
     b82:	98 2f       	mov	r25, r24
     b84:	91 70       	andi	r25, 0x01	; 1
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	61 e0       	ldi	r22, 0x01	; 1
     b8a:	49 2f       	mov	r20, r25
     b8c:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_2,GET_BIT(copy_u8Command,6));
     b90:	89 ad       	ldd	r24, Y+57	; 0x39
     b92:	82 95       	swap	r24
     b94:	86 95       	lsr	r24
     b96:	86 95       	lsr	r24
     b98:	83 70       	andi	r24, 0x03	; 3
     b9a:	98 2f       	mov	r25, r24
     b9c:	91 70       	andi	r25, 0x01	; 1
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	62 e0       	ldi	r22, 0x02	; 2
     ba2:	49 2f       	mov	r20, r25
     ba4:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_4,GET_BIT(copy_u8Command,7));
     ba8:	89 ad       	ldd	r24, Y+57	; 0x39
     baa:	98 2f       	mov	r25, r24
     bac:	99 1f       	adc	r25, r25
     bae:	99 27       	eor	r25, r25
     bb0:	99 1f       	adc	r25, r25
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	64 e0       	ldi	r22, 0x04	; 4
     bb6:	49 2f       	mov	r20, r25
     bb8:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>

	/*Send enable pulse*/
	DIO_SetPinValue(PORT_A,PIN_2 ,PIN_HIGH);
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	62 e0       	ldi	r22, 0x02	; 2
     bc0:	41 e0       	ldi	r20, 0x01	; 1
     bc2:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	a0 e0       	ldi	r26, 0x00	; 0
     bcc:	b0 e4       	ldi	r27, 0x40	; 64
     bce:	8d ab       	std	Y+53, r24	; 0x35
     bd0:	9e ab       	std	Y+54, r25	; 0x36
     bd2:	af ab       	std	Y+55, r26	; 0x37
     bd4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd6:	6d a9       	ldd	r22, Y+53	; 0x35
     bd8:	7e a9       	ldd	r23, Y+54	; 0x36
     bda:	8f a9       	ldd	r24, Y+55	; 0x37
     bdc:	98 ad       	ldd	r25, Y+56	; 0x38
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	4a ef       	ldi	r20, 0xFA	; 250
     be4:	54 e4       	ldi	r21, 0x44	; 68
     be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bea:	dc 01       	movw	r26, r24
     bec:	cb 01       	movw	r24, r22
     bee:	89 ab       	std	Y+49, r24	; 0x31
     bf0:	9a ab       	std	Y+50, r25	; 0x32
     bf2:	ab ab       	std	Y+51, r26	; 0x33
     bf4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     bf6:	69 a9       	ldd	r22, Y+49	; 0x31
     bf8:	7a a9       	ldd	r23, Y+50	; 0x32
     bfa:	8b a9       	ldd	r24, Y+51	; 0x33
     bfc:	9c a9       	ldd	r25, Y+52	; 0x34
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 e8       	ldi	r20, 0x80	; 128
     c04:	5f e3       	ldi	r21, 0x3F	; 63
     c06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c0a:	88 23       	and	r24, r24
     c0c:	2c f4       	brge	.+10     	; 0xc18 <CLCD_voidCommand+0xd2>
		__ticks = 1;
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	98 ab       	std	Y+48, r25	; 0x30
     c14:	8f a7       	std	Y+47, r24	; 0x2f
     c16:	3f c0       	rjmp	.+126    	; 0xc96 <CLCD_voidCommand+0x150>
	else if (__tmp > 65535)
     c18:	69 a9       	ldd	r22, Y+49	; 0x31
     c1a:	7a a9       	ldd	r23, Y+50	; 0x32
     c1c:	8b a9       	ldd	r24, Y+51	; 0x33
     c1e:	9c a9       	ldd	r25, Y+52	; 0x34
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	3f ef       	ldi	r19, 0xFF	; 255
     c24:	4f e7       	ldi	r20, 0x7F	; 127
     c26:	57 e4       	ldi	r21, 0x47	; 71
     c28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c2c:	18 16       	cp	r1, r24
     c2e:	4c f5       	brge	.+82     	; 0xc82 <CLCD_voidCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c30:	6d a9       	ldd	r22, Y+53	; 0x35
     c32:	7e a9       	ldd	r23, Y+54	; 0x36
     c34:	8f a9       	ldd	r24, Y+55	; 0x37
     c36:	98 ad       	ldd	r25, Y+56	; 0x38
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	40 e2       	ldi	r20, 0x20	; 32
     c3e:	51 e4       	ldi	r21, 0x41	; 65
     c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	bc 01       	movw	r22, r24
     c4a:	cd 01       	movw	r24, r26
     c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c50:	dc 01       	movw	r26, r24
     c52:	cb 01       	movw	r24, r22
     c54:	98 ab       	std	Y+48, r25	; 0x30
     c56:	8f a7       	std	Y+47, r24	; 0x2f
     c58:	0f c0       	rjmp	.+30     	; 0xc78 <CLCD_voidCommand+0x132>
     c5a:	88 ec       	ldi	r24, 0xC8	; 200
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	9e a7       	std	Y+46, r25	; 0x2e
     c60:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c62:	8d a5       	ldd	r24, Y+45	; 0x2d
     c64:	9e a5       	ldd	r25, Y+46	; 0x2e
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	f1 f7       	brne	.-4      	; 0xc66 <CLCD_voidCommand+0x120>
     c6a:	9e a7       	std	Y+46, r25	; 0x2e
     c6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6e:	8f a5       	ldd	r24, Y+47	; 0x2f
     c70:	98 a9       	ldd	r25, Y+48	; 0x30
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	98 ab       	std	Y+48, r25	; 0x30
     c76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c78:	8f a5       	ldd	r24, Y+47	; 0x2f
     c7a:	98 a9       	ldd	r25, Y+48	; 0x30
     c7c:	00 97       	sbiw	r24, 0x00	; 0
     c7e:	69 f7       	brne	.-38     	; 0xc5a <CLCD_voidCommand+0x114>
     c80:	14 c0       	rjmp	.+40     	; 0xcaa <CLCD_voidCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c82:	69 a9       	ldd	r22, Y+49	; 0x31
     c84:	7a a9       	ldd	r23, Y+50	; 0x32
     c86:	8b a9       	ldd	r24, Y+51	; 0x33
     c88:	9c a9       	ldd	r25, Y+52	; 0x34
     c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c8e:	dc 01       	movw	r26, r24
     c90:	cb 01       	movw	r24, r22
     c92:	98 ab       	std	Y+48, r25	; 0x30
     c94:	8f a7       	std	Y+47, r24	; 0x2f
     c96:	8f a5       	ldd	r24, Y+47	; 0x2f
     c98:	98 a9       	ldd	r25, Y+48	; 0x30
     c9a:	9c a7       	std	Y+44, r25	; 0x2c
     c9c:	8b a7       	std	Y+43, r24	; 0x2b
     c9e:	8b a5       	ldd	r24, Y+43	; 0x2b
     ca0:	9c a5       	ldd	r25, Y+44	; 0x2c
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <CLCD_voidCommand+0x15c>
     ca6:	9c a7       	std	Y+44, r25	; 0x2c
     ca8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_SetPinValue(PORT_A,PIN_2,PIN_LOW);
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	62 e0       	ldi	r22, 0x02	; 2
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 ea       	ldi	r26, 0xA0	; 160
     cba:	b0 e4       	ldi	r27, 0x40	; 64
     cbc:	8f a3       	std	Y+39, r24	; 0x27
     cbe:	98 a7       	std	Y+40, r25	; 0x28
     cc0:	a9 a7       	std	Y+41, r26	; 0x29
     cc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc4:	6f a1       	ldd	r22, Y+39	; 0x27
     cc6:	78 a5       	ldd	r23, Y+40	; 0x28
     cc8:	89 a5       	ldd	r24, Y+41	; 0x29
     cca:	9a a5       	ldd	r25, Y+42	; 0x2a
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	4a ef       	ldi	r20, 0xFA	; 250
     cd2:	54 e4       	ldi	r21, 0x44	; 68
     cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd8:	dc 01       	movw	r26, r24
     cda:	cb 01       	movw	r24, r22
     cdc:	8b a3       	std	Y+35, r24	; 0x23
     cde:	9c a3       	std	Y+36, r25	; 0x24
     ce0:	ad a3       	std	Y+37, r26	; 0x25
     ce2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ce4:	6b a1       	ldd	r22, Y+35	; 0x23
     ce6:	7c a1       	ldd	r23, Y+36	; 0x24
     ce8:	8d a1       	ldd	r24, Y+37	; 0x25
     cea:	9e a1       	ldd	r25, Y+38	; 0x26
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e8       	ldi	r20, 0x80	; 128
     cf2:	5f e3       	ldi	r21, 0x3F	; 63
     cf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cf8:	88 23       	and	r24, r24
     cfa:	2c f4       	brge	.+10     	; 0xd06 <CLCD_voidCommand+0x1c0>
		__ticks = 1;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	9a a3       	std	Y+34, r25	; 0x22
     d02:	89 a3       	std	Y+33, r24	; 0x21
     d04:	3f c0       	rjmp	.+126    	; 0xd84 <CLCD_voidCommand+0x23e>
	else if (__tmp > 65535)
     d06:	6b a1       	ldd	r22, Y+35	; 0x23
     d08:	7c a1       	ldd	r23, Y+36	; 0x24
     d0a:	8d a1       	ldd	r24, Y+37	; 0x25
     d0c:	9e a1       	ldd	r25, Y+38	; 0x26
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	3f ef       	ldi	r19, 0xFF	; 255
     d12:	4f e7       	ldi	r20, 0x7F	; 127
     d14:	57 e4       	ldi	r21, 0x47	; 71
     d16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d1a:	18 16       	cp	r1, r24
     d1c:	4c f5       	brge	.+82     	; 0xd70 <CLCD_voidCommand+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d1e:	6f a1       	ldd	r22, Y+39	; 0x27
     d20:	78 a5       	ldd	r23, Y+40	; 0x28
     d22:	89 a5       	ldd	r24, Y+41	; 0x29
     d24:	9a a5       	ldd	r25, Y+42	; 0x2a
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e2       	ldi	r20, 0x20	; 32
     d2c:	51 e4       	ldi	r21, 0x41	; 65
     d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	bc 01       	movw	r22, r24
     d38:	cd 01       	movw	r24, r26
     d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	9a a3       	std	Y+34, r25	; 0x22
     d44:	89 a3       	std	Y+33, r24	; 0x21
     d46:	0f c0       	rjmp	.+30     	; 0xd66 <CLCD_voidCommand+0x220>
     d48:	88 ec       	ldi	r24, 0xC8	; 200
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	98 a3       	std	Y+32, r25	; 0x20
     d4e:	8f 8f       	std	Y+31, r24	; 0x1f
     d50:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d52:	98 a1       	ldd	r25, Y+32	; 0x20
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	f1 f7       	brne	.-4      	; 0xd54 <CLCD_voidCommand+0x20e>
     d58:	98 a3       	std	Y+32, r25	; 0x20
     d5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5c:	89 a1       	ldd	r24, Y+33	; 0x21
     d5e:	9a a1       	ldd	r25, Y+34	; 0x22
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	9a a3       	std	Y+34, r25	; 0x22
     d64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d66:	89 a1       	ldd	r24, Y+33	; 0x21
     d68:	9a a1       	ldd	r25, Y+34	; 0x22
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	69 f7       	brne	.-38     	; 0xd48 <CLCD_voidCommand+0x202>
     d6e:	14 c0       	rjmp	.+40     	; 0xd98 <CLCD_voidCommand+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d70:	6b a1       	ldd	r22, Y+35	; 0x23
     d72:	7c a1       	ldd	r23, Y+36	; 0x24
     d74:	8d a1       	ldd	r24, Y+37	; 0x25
     d76:	9e a1       	ldd	r25, Y+38	; 0x26
     d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	9a a3       	std	Y+34, r25	; 0x22
     d82:	89 a3       	std	Y+33, r24	; 0x21
     d84:	89 a1       	ldd	r24, Y+33	; 0x21
     d86:	9a a1       	ldd	r25, Y+34	; 0x22
     d88:	9e 8f       	std	Y+30, r25	; 0x1e
     d8a:	8d 8f       	std	Y+29, r24	; 0x1d
     d8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <CLCD_voidCommand+0x24a>
     d94:	9e 8f       	std	Y+30, r25	; 0x1e
     d96:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	DIO_SetPinValue(PORT_B,PIN_0,GET_BIT(copy_u8Command,0));
     d98:	89 ad       	ldd	r24, Y+57	; 0x39
     d9a:	98 2f       	mov	r25, r24
     d9c:	91 70       	andi	r25, 0x01	; 1
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	49 2f       	mov	r20, r25
     da4:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_1,GET_BIT(copy_u8Command,1));
     da8:	89 ad       	ldd	r24, Y+57	; 0x39
     daa:	86 95       	lsr	r24
     dac:	98 2f       	mov	r25, r24
     dae:	91 70       	andi	r25, 0x01	; 1
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	61 e0       	ldi	r22, 0x01	; 1
     db4:	49 2f       	mov	r20, r25
     db6:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_2,GET_BIT(copy_u8Command,2));
     dba:	89 ad       	ldd	r24, Y+57	; 0x39
     dbc:	86 95       	lsr	r24
     dbe:	86 95       	lsr	r24
     dc0:	98 2f       	mov	r25, r24
     dc2:	91 70       	andi	r25, 0x01	; 1
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	62 e0       	ldi	r22, 0x02	; 2
     dc8:	49 2f       	mov	r20, r25
     dca:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_4,GET_BIT(copy_u8Command,3));
     dce:	89 ad       	ldd	r24, Y+57	; 0x39
     dd0:	86 95       	lsr	r24
     dd2:	86 95       	lsr	r24
     dd4:	86 95       	lsr	r24
     dd6:	98 2f       	mov	r25, r24
     dd8:	91 70       	andi	r25, 0x01	; 1
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	64 e0       	ldi	r22, 0x04	; 4
     dde:	49 2f       	mov	r20, r25
     de0:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>



	/*Send enable pulse*/
	DIO_SetPinValue(PORT_A,PIN_2 ,PIN_HIGH);
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	62 e0       	ldi	r22, 0x02	; 2
     de8:	41 e0       	ldi	r20, 0x01	; 1
     dea:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	a0 e0       	ldi	r26, 0x00	; 0
     df4:	b0 e4       	ldi	r27, 0x40	; 64
     df6:	89 8f       	std	Y+25, r24	; 0x19
     df8:	9a 8f       	std	Y+26, r25	; 0x1a
     dfa:	ab 8f       	std	Y+27, r26	; 0x1b
     dfc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dfe:	69 8d       	ldd	r22, Y+25	; 0x19
     e00:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e02:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e04:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	4a ef       	ldi	r20, 0xFA	; 250
     e0c:	54 e4       	ldi	r21, 0x44	; 68
     e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	8d 8b       	std	Y+21, r24	; 0x15
     e18:	9e 8b       	std	Y+22, r25	; 0x16
     e1a:	af 8b       	std	Y+23, r26	; 0x17
     e1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e1e:	6d 89       	ldd	r22, Y+21	; 0x15
     e20:	7e 89       	ldd	r23, Y+22	; 0x16
     e22:	8f 89       	ldd	r24, Y+23	; 0x17
     e24:	98 8d       	ldd	r25, Y+24	; 0x18
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	40 e8       	ldi	r20, 0x80	; 128
     e2c:	5f e3       	ldi	r21, 0x3F	; 63
     e2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e32:	88 23       	and	r24, r24
     e34:	2c f4       	brge	.+10     	; 0xe40 <CLCD_voidCommand+0x2fa>
		__ticks = 1;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	9c 8b       	std	Y+20, r25	; 0x14
     e3c:	8b 8b       	std	Y+19, r24	; 0x13
     e3e:	3f c0       	rjmp	.+126    	; 0xebe <CLCD_voidCommand+0x378>
	else if (__tmp > 65535)
     e40:	6d 89       	ldd	r22, Y+21	; 0x15
     e42:	7e 89       	ldd	r23, Y+22	; 0x16
     e44:	8f 89       	ldd	r24, Y+23	; 0x17
     e46:	98 8d       	ldd	r25, Y+24	; 0x18
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	3f ef       	ldi	r19, 0xFF	; 255
     e4c:	4f e7       	ldi	r20, 0x7F	; 127
     e4e:	57 e4       	ldi	r21, 0x47	; 71
     e50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e54:	18 16       	cp	r1, r24
     e56:	4c f5       	brge	.+82     	; 0xeaa <CLCD_voidCommand+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e58:	69 8d       	ldd	r22, Y+25	; 0x19
     e5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	40 e2       	ldi	r20, 0x20	; 32
     e66:	51 e4       	ldi	r21, 0x41	; 65
     e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	bc 01       	movw	r22, r24
     e72:	cd 01       	movw	r24, r26
     e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	9c 8b       	std	Y+20, r25	; 0x14
     e7e:	8b 8b       	std	Y+19, r24	; 0x13
     e80:	0f c0       	rjmp	.+30     	; 0xea0 <CLCD_voidCommand+0x35a>
     e82:	88 ec       	ldi	r24, 0xC8	; 200
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	9a 8b       	std	Y+18, r25	; 0x12
     e88:	89 8b       	std	Y+17, r24	; 0x11
     e8a:	89 89       	ldd	r24, Y+17	; 0x11
     e8c:	9a 89       	ldd	r25, Y+18	; 0x12
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	f1 f7       	brne	.-4      	; 0xe8e <CLCD_voidCommand+0x348>
     e92:	9a 8b       	std	Y+18, r25	; 0x12
     e94:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e96:	8b 89       	ldd	r24, Y+19	; 0x13
     e98:	9c 89       	ldd	r25, Y+20	; 0x14
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	9c 8b       	std	Y+20, r25	; 0x14
     e9e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea0:	8b 89       	ldd	r24, Y+19	; 0x13
     ea2:	9c 89       	ldd	r25, Y+20	; 0x14
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	69 f7       	brne	.-38     	; 0xe82 <CLCD_voidCommand+0x33c>
     ea8:	14 c0       	rjmp	.+40     	; 0xed2 <CLCD_voidCommand+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eaa:	6d 89       	ldd	r22, Y+21	; 0x15
     eac:	7e 89       	ldd	r23, Y+22	; 0x16
     eae:	8f 89       	ldd	r24, Y+23	; 0x17
     eb0:	98 8d       	ldd	r25, Y+24	; 0x18
     eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	9c 8b       	std	Y+20, r25	; 0x14
     ebc:	8b 8b       	std	Y+19, r24	; 0x13
     ebe:	8b 89       	ldd	r24, Y+19	; 0x13
     ec0:	9c 89       	ldd	r25, Y+20	; 0x14
     ec2:	98 8b       	std	Y+16, r25	; 0x10
     ec4:	8f 87       	std	Y+15, r24	; 0x0f
     ec6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ec8:	98 89       	ldd	r25, Y+16	; 0x10
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	f1 f7       	brne	.-4      	; 0xeca <CLCD_voidCommand+0x384>
     ece:	98 8b       	std	Y+16, r25	; 0x10
     ed0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_SetPinValue(PORT_A,PIN_2 ,PIN_LOW);
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	62 e0       	ldi	r22, 0x02	; 2
     ed6:	40 e0       	ldi	r20, 0x00	; 0
     ed8:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	a0 ea       	ldi	r26, 0xA0	; 160
     ee2:	b0 e4       	ldi	r27, 0x40	; 64
     ee4:	8b 87       	std	Y+11, r24	; 0x0b
     ee6:	9c 87       	std	Y+12, r25	; 0x0c
     ee8:	ad 87       	std	Y+13, r26	; 0x0d
     eea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eec:	6b 85       	ldd	r22, Y+11	; 0x0b
     eee:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	4a ef       	ldi	r20, 0xFA	; 250
     efa:	54 e4       	ldi	r21, 0x44	; 68
     efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	8f 83       	std	Y+7, r24	; 0x07
     f06:	98 87       	std	Y+8, r25	; 0x08
     f08:	a9 87       	std	Y+9, r26	; 0x09
     f0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f0c:	6f 81       	ldd	r22, Y+7	; 0x07
     f0e:	78 85       	ldd	r23, Y+8	; 0x08
     f10:	89 85       	ldd	r24, Y+9	; 0x09
     f12:	9a 85       	ldd	r25, Y+10	; 0x0a
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	40 e8       	ldi	r20, 0x80	; 128
     f1a:	5f e3       	ldi	r21, 0x3F	; 63
     f1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f20:	88 23       	and	r24, r24
     f22:	2c f4       	brge	.+10     	; 0xf2e <CLCD_voidCommand+0x3e8>
		__ticks = 1;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	9e 83       	std	Y+6, r25	; 0x06
     f2a:	8d 83       	std	Y+5, r24	; 0x05
     f2c:	3f c0       	rjmp	.+126    	; 0xfac <CLCD_voidCommand+0x466>
	else if (__tmp > 65535)
     f2e:	6f 81       	ldd	r22, Y+7	; 0x07
     f30:	78 85       	ldd	r23, Y+8	; 0x08
     f32:	89 85       	ldd	r24, Y+9	; 0x09
     f34:	9a 85       	ldd	r25, Y+10	; 0x0a
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	3f ef       	ldi	r19, 0xFF	; 255
     f3a:	4f e7       	ldi	r20, 0x7F	; 127
     f3c:	57 e4       	ldi	r21, 0x47	; 71
     f3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f42:	18 16       	cp	r1, r24
     f44:	4c f5       	brge	.+82     	; 0xf98 <CLCD_voidCommand+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f46:	6b 85       	ldd	r22, Y+11	; 0x0b
     f48:	7c 85       	ldd	r23, Y+12	; 0x0c
     f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e2       	ldi	r20, 0x20	; 32
     f54:	51 e4       	ldi	r21, 0x41	; 65
     f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	bc 01       	movw	r22, r24
     f60:	cd 01       	movw	r24, r26
     f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	9e 83       	std	Y+6, r25	; 0x06
     f6c:	8d 83       	std	Y+5, r24	; 0x05
     f6e:	0f c0       	rjmp	.+30     	; 0xf8e <CLCD_voidCommand+0x448>
     f70:	88 ec       	ldi	r24, 0xC8	; 200
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	9c 83       	std	Y+4, r25	; 0x04
     f76:	8b 83       	std	Y+3, r24	; 0x03
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	9c 81       	ldd	r25, Y+4	; 0x04
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <CLCD_voidCommand+0x436>
     f80:	9c 83       	std	Y+4, r25	; 0x04
     f82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	9e 81       	ldd	r25, Y+6	; 0x06
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	9e 83       	std	Y+6, r25	; 0x06
     f8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8e:	8d 81       	ldd	r24, Y+5	; 0x05
     f90:	9e 81       	ldd	r25, Y+6	; 0x06
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	69 f7       	brne	.-38     	; 0xf70 <CLCD_voidCommand+0x42a>
     f96:	14 c0       	rjmp	.+40     	; 0xfc0 <CLCD_voidCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f98:	6f 81       	ldd	r22, Y+7	; 0x07
     f9a:	78 85       	ldd	r23, Y+8	; 0x08
     f9c:	89 85       	ldd	r24, Y+9	; 0x09
     f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	9e 83       	std	Y+6, r25	; 0x06
     faa:	8d 83       	std	Y+5, r24	; 0x05
     fac:	8d 81       	ldd	r24, Y+5	; 0x05
     fae:	9e 81       	ldd	r25, Y+6	; 0x06
     fb0:	9a 83       	std	Y+2, r25	; 0x02
     fb2:	89 83       	std	Y+1, r24	; 0x01
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	9a 81       	ldd	r25, Y+2	; 0x02
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <CLCD_voidCommand+0x472>
     fbc:	9a 83       	std	Y+2, r25	; 0x02
     fbe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

}
     fc0:	e9 96       	adiw	r28, 0x39	; 57
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <CLCD_voidSendData>:
void CLCD_voidSendData(u8int_t copy_u8Data)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	e9 97       	sbiw	r28, 0x39	; 57
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	89 af       	std	Y+57, r24	; 0x39
	/*Set RS pin high for data*/
	DIO_SetPinValue(PORT_A,PIN_3,PIN_HIGH);
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	63 e0       	ldi	r22, 0x03	; 3
     fec:	41 e0       	ldi	r20, 0x01	; 1
     fee:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>

	/*Set RW pin LOW to write*/
	//DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,PIN_LOW);
	/*SEND DATA ONLY ON FOR BITS*/
	DIO_SetPinValue(PORT_B,PIN_0,GET_BIT(copy_u8Data,4));
     ff2:	89 ad       	ldd	r24, Y+57	; 0x39
     ff4:	82 95       	swap	r24
     ff6:	8f 70       	andi	r24, 0x0F	; 15
     ff8:	98 2f       	mov	r25, r24
     ffa:	91 70       	andi	r25, 0x01	; 1
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	49 2f       	mov	r20, r25
    1002:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_1,GET_BIT(copy_u8Data,5));
    1006:	89 ad       	ldd	r24, Y+57	; 0x39
    1008:	82 95       	swap	r24
    100a:	86 95       	lsr	r24
    100c:	87 70       	andi	r24, 0x07	; 7
    100e:	98 2f       	mov	r25, r24
    1010:	91 70       	andi	r25, 0x01	; 1
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	61 e0       	ldi	r22, 0x01	; 1
    1016:	49 2f       	mov	r20, r25
    1018:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_2,GET_BIT(copy_u8Data,6));
    101c:	89 ad       	ldd	r24, Y+57	; 0x39
    101e:	82 95       	swap	r24
    1020:	86 95       	lsr	r24
    1022:	86 95       	lsr	r24
    1024:	83 70       	andi	r24, 0x03	; 3
    1026:	98 2f       	mov	r25, r24
    1028:	91 70       	andi	r25, 0x01	; 1
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	62 e0       	ldi	r22, 0x02	; 2
    102e:	49 2f       	mov	r20, r25
    1030:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_4,GET_BIT(copy_u8Data,7));
    1034:	89 ad       	ldd	r24, Y+57	; 0x39
    1036:	98 2f       	mov	r25, r24
    1038:	99 1f       	adc	r25, r25
    103a:	99 27       	eor	r25, r25
    103c:	99 1f       	adc	r25, r25
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	64 e0       	ldi	r22, 0x04	; 4
    1042:	49 2f       	mov	r20, r25
    1044:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>


	/*Send enable pulse*/
	DIO_SetPinValue(PORT_A,PIN_2,PIN_HIGH);
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	62 e0       	ldi	r22, 0x02	; 2
    104c:	41 e0       	ldi	r20, 0x01	; 1
    104e:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	a0 e0       	ldi	r26, 0x00	; 0
    1058:	b0 e4       	ldi	r27, 0x40	; 64
    105a:	8d ab       	std	Y+53, r24	; 0x35
    105c:	9e ab       	std	Y+54, r25	; 0x36
    105e:	af ab       	std	Y+55, r26	; 0x37
    1060:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1062:	6d a9       	ldd	r22, Y+53	; 0x35
    1064:	7e a9       	ldd	r23, Y+54	; 0x36
    1066:	8f a9       	ldd	r24, Y+55	; 0x37
    1068:	98 ad       	ldd	r25, Y+56	; 0x38
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	4a ef       	ldi	r20, 0xFA	; 250
    1070:	54 e4       	ldi	r21, 0x44	; 68
    1072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	89 ab       	std	Y+49, r24	; 0x31
    107c:	9a ab       	std	Y+50, r25	; 0x32
    107e:	ab ab       	std	Y+51, r26	; 0x33
    1080:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1082:	69 a9       	ldd	r22, Y+49	; 0x31
    1084:	7a a9       	ldd	r23, Y+50	; 0x32
    1086:	8b a9       	ldd	r24, Y+51	; 0x33
    1088:	9c a9       	ldd	r25, Y+52	; 0x34
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	40 e8       	ldi	r20, 0x80	; 128
    1090:	5f e3       	ldi	r21, 0x3F	; 63
    1092:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1096:	88 23       	and	r24, r24
    1098:	2c f4       	brge	.+10     	; 0x10a4 <CLCD_voidSendData+0xd2>
		__ticks = 1;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	98 ab       	std	Y+48, r25	; 0x30
    10a0:	8f a7       	std	Y+47, r24	; 0x2f
    10a2:	3f c0       	rjmp	.+126    	; 0x1122 <CLCD_voidSendData+0x150>
	else if (__tmp > 65535)
    10a4:	69 a9       	ldd	r22, Y+49	; 0x31
    10a6:	7a a9       	ldd	r23, Y+50	; 0x32
    10a8:	8b a9       	ldd	r24, Y+51	; 0x33
    10aa:	9c a9       	ldd	r25, Y+52	; 0x34
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	3f ef       	ldi	r19, 0xFF	; 255
    10b0:	4f e7       	ldi	r20, 0x7F	; 127
    10b2:	57 e4       	ldi	r21, 0x47	; 71
    10b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b8:	18 16       	cp	r1, r24
    10ba:	4c f5       	brge	.+82     	; 0x110e <CLCD_voidSendData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10bc:	6d a9       	ldd	r22, Y+53	; 0x35
    10be:	7e a9       	ldd	r23, Y+54	; 0x36
    10c0:	8f a9       	ldd	r24, Y+55	; 0x37
    10c2:	98 ad       	ldd	r25, Y+56	; 0x38
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	40 e2       	ldi	r20, 0x20	; 32
    10ca:	51 e4       	ldi	r21, 0x41	; 65
    10cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	bc 01       	movw	r22, r24
    10d6:	cd 01       	movw	r24, r26
    10d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	98 ab       	std	Y+48, r25	; 0x30
    10e2:	8f a7       	std	Y+47, r24	; 0x2f
    10e4:	0f c0       	rjmp	.+30     	; 0x1104 <CLCD_voidSendData+0x132>
    10e6:	88 ec       	ldi	r24, 0xC8	; 200
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	9e a7       	std	Y+46, r25	; 0x2e
    10ec:	8d a7       	std	Y+45, r24	; 0x2d
    10ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    10f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <CLCD_voidSendData+0x120>
    10f6:	9e a7       	std	Y+46, r25	; 0x2e
    10f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    10fc:	98 a9       	ldd	r25, Y+48	; 0x30
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	98 ab       	std	Y+48, r25	; 0x30
    1102:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1104:	8f a5       	ldd	r24, Y+47	; 0x2f
    1106:	98 a9       	ldd	r25, Y+48	; 0x30
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	69 f7       	brne	.-38     	; 0x10e6 <CLCD_voidSendData+0x114>
    110c:	14 c0       	rjmp	.+40     	; 0x1136 <CLCD_voidSendData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    110e:	69 a9       	ldd	r22, Y+49	; 0x31
    1110:	7a a9       	ldd	r23, Y+50	; 0x32
    1112:	8b a9       	ldd	r24, Y+51	; 0x33
    1114:	9c a9       	ldd	r25, Y+52	; 0x34
    1116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	98 ab       	std	Y+48, r25	; 0x30
    1120:	8f a7       	std	Y+47, r24	; 0x2f
    1122:	8f a5       	ldd	r24, Y+47	; 0x2f
    1124:	98 a9       	ldd	r25, Y+48	; 0x30
    1126:	9c a7       	std	Y+44, r25	; 0x2c
    1128:	8b a7       	std	Y+43, r24	; 0x2b
    112a:	8b a5       	ldd	r24, Y+43	; 0x2b
    112c:	9c a5       	ldd	r25, Y+44	; 0x2c
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	f1 f7       	brne	.-4      	; 0x112e <CLCD_voidSendData+0x15c>
    1132:	9c a7       	std	Y+44, r25	; 0x2c
    1134:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_SetPinValue(PORT_A,PIN_2,PIN_LOW);
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	62 e0       	ldi	r22, 0x02	; 2
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	a0 ea       	ldi	r26, 0xA0	; 160
    1146:	b0 e4       	ldi	r27, 0x40	; 64
    1148:	8f a3       	std	Y+39, r24	; 0x27
    114a:	98 a7       	std	Y+40, r25	; 0x28
    114c:	a9 a7       	std	Y+41, r26	; 0x29
    114e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1150:	6f a1       	ldd	r22, Y+39	; 0x27
    1152:	78 a5       	ldd	r23, Y+40	; 0x28
    1154:	89 a5       	ldd	r24, Y+41	; 0x29
    1156:	9a a5       	ldd	r25, Y+42	; 0x2a
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	4a ef       	ldi	r20, 0xFA	; 250
    115e:	54 e4       	ldi	r21, 0x44	; 68
    1160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	8b a3       	std	Y+35, r24	; 0x23
    116a:	9c a3       	std	Y+36, r25	; 0x24
    116c:	ad a3       	std	Y+37, r26	; 0x25
    116e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1170:	6b a1       	ldd	r22, Y+35	; 0x23
    1172:	7c a1       	ldd	r23, Y+36	; 0x24
    1174:	8d a1       	ldd	r24, Y+37	; 0x25
    1176:	9e a1       	ldd	r25, Y+38	; 0x26
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e8       	ldi	r20, 0x80	; 128
    117e:	5f e3       	ldi	r21, 0x3F	; 63
    1180:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1184:	88 23       	and	r24, r24
    1186:	2c f4       	brge	.+10     	; 0x1192 <CLCD_voidSendData+0x1c0>
		__ticks = 1;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	9a a3       	std	Y+34, r25	; 0x22
    118e:	89 a3       	std	Y+33, r24	; 0x21
    1190:	3f c0       	rjmp	.+126    	; 0x1210 <CLCD_voidSendData+0x23e>
	else if (__tmp > 65535)
    1192:	6b a1       	ldd	r22, Y+35	; 0x23
    1194:	7c a1       	ldd	r23, Y+36	; 0x24
    1196:	8d a1       	ldd	r24, Y+37	; 0x25
    1198:	9e a1       	ldd	r25, Y+38	; 0x26
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	3f ef       	ldi	r19, 0xFF	; 255
    119e:	4f e7       	ldi	r20, 0x7F	; 127
    11a0:	57 e4       	ldi	r21, 0x47	; 71
    11a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11a6:	18 16       	cp	r1, r24
    11a8:	4c f5       	brge	.+82     	; 0x11fc <CLCD_voidSendData+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11aa:	6f a1       	ldd	r22, Y+39	; 0x27
    11ac:	78 a5       	ldd	r23, Y+40	; 0x28
    11ae:	89 a5       	ldd	r24, Y+41	; 0x29
    11b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e2       	ldi	r20, 0x20	; 32
    11b8:	51 e4       	ldi	r21, 0x41	; 65
    11ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	bc 01       	movw	r22, r24
    11c4:	cd 01       	movw	r24, r26
    11c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	9a a3       	std	Y+34, r25	; 0x22
    11d0:	89 a3       	std	Y+33, r24	; 0x21
    11d2:	0f c0       	rjmp	.+30     	; 0x11f2 <CLCD_voidSendData+0x220>
    11d4:	88 ec       	ldi	r24, 0xC8	; 200
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	98 a3       	std	Y+32, r25	; 0x20
    11da:	8f 8f       	std	Y+31, r24	; 0x1f
    11dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11de:	98 a1       	ldd	r25, Y+32	; 0x20
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <CLCD_voidSendData+0x20e>
    11e4:	98 a3       	std	Y+32, r25	; 0x20
    11e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e8:	89 a1       	ldd	r24, Y+33	; 0x21
    11ea:	9a a1       	ldd	r25, Y+34	; 0x22
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	9a a3       	std	Y+34, r25	; 0x22
    11f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f2:	89 a1       	ldd	r24, Y+33	; 0x21
    11f4:	9a a1       	ldd	r25, Y+34	; 0x22
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	69 f7       	brne	.-38     	; 0x11d4 <CLCD_voidSendData+0x202>
    11fa:	14 c0       	rjmp	.+40     	; 0x1224 <CLCD_voidSendData+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fc:	6b a1       	ldd	r22, Y+35	; 0x23
    11fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1200:	8d a1       	ldd	r24, Y+37	; 0x25
    1202:	9e a1       	ldd	r25, Y+38	; 0x26
    1204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	9a a3       	std	Y+34, r25	; 0x22
    120e:	89 a3       	std	Y+33, r24	; 0x21
    1210:	89 a1       	ldd	r24, Y+33	; 0x21
    1212:	9a a1       	ldd	r25, Y+34	; 0x22
    1214:	9e 8f       	std	Y+30, r25	; 0x1e
    1216:	8d 8f       	std	Y+29, r24	; 0x1d
    1218:	8d 8d       	ldd	r24, Y+29	; 0x1d
    121a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <CLCD_voidSendData+0x24a>
    1220:	9e 8f       	std	Y+30, r25	; 0x1e
    1222:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	DIO_SetPinValue(PORT_B,PIN_0,GET_BIT(copy_u8Data,0));
    1224:	89 ad       	ldd	r24, Y+57	; 0x39
    1226:	98 2f       	mov	r25, r24
    1228:	91 70       	andi	r25, 0x01	; 1
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	49 2f       	mov	r20, r25
    1230:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_1,GET_BIT(copy_u8Data,1));
    1234:	89 ad       	ldd	r24, Y+57	; 0x39
    1236:	86 95       	lsr	r24
    1238:	98 2f       	mov	r25, r24
    123a:	91 70       	andi	r25, 0x01	; 1
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	49 2f       	mov	r20, r25
    1242:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_2,GET_BIT(copy_u8Data,2));
    1246:	89 ad       	ldd	r24, Y+57	; 0x39
    1248:	86 95       	lsr	r24
    124a:	86 95       	lsr	r24
    124c:	98 2f       	mov	r25, r24
    124e:	91 70       	andi	r25, 0x01	; 1
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	62 e0       	ldi	r22, 0x02	; 2
    1254:	49 2f       	mov	r20, r25
    1256:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_4,GET_BIT(copy_u8Data,3));
    125a:	89 ad       	ldd	r24, Y+57	; 0x39
    125c:	86 95       	lsr	r24
    125e:	86 95       	lsr	r24
    1260:	86 95       	lsr	r24
    1262:	98 2f       	mov	r25, r24
    1264:	91 70       	andi	r25, 0x01	; 1
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	64 e0       	ldi	r22, 0x04	; 4
    126a:	49 2f       	mov	r20, r25
    126c:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>




	/*Send enable pulse*/
	DIO_SetPinValue(PORT_A,PIN_2,PIN_HIGH);
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	62 e0       	ldi	r22, 0x02	; 2
    1274:	41 e0       	ldi	r20, 0x01	; 1
    1276:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a0 e0       	ldi	r26, 0x00	; 0
    1280:	b0 e4       	ldi	r27, 0x40	; 64
    1282:	89 8f       	std	Y+25, r24	; 0x19
    1284:	9a 8f       	std	Y+26, r25	; 0x1a
    1286:	ab 8f       	std	Y+27, r26	; 0x1b
    1288:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    128a:	69 8d       	ldd	r22, Y+25	; 0x19
    128c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    128e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1290:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	4a ef       	ldi	r20, 0xFA	; 250
    1298:	54 e4       	ldi	r21, 0x44	; 68
    129a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	8d 8b       	std	Y+21, r24	; 0x15
    12a4:	9e 8b       	std	Y+22, r25	; 0x16
    12a6:	af 8b       	std	Y+23, r26	; 0x17
    12a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12aa:	6d 89       	ldd	r22, Y+21	; 0x15
    12ac:	7e 89       	ldd	r23, Y+22	; 0x16
    12ae:	8f 89       	ldd	r24, Y+23	; 0x17
    12b0:	98 8d       	ldd	r25, Y+24	; 0x18
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 e8       	ldi	r20, 0x80	; 128
    12b8:	5f e3       	ldi	r21, 0x3F	; 63
    12ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12be:	88 23       	and	r24, r24
    12c0:	2c f4       	brge	.+10     	; 0x12cc <CLCD_voidSendData+0x2fa>
		__ticks = 1;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	9c 8b       	std	Y+20, r25	; 0x14
    12c8:	8b 8b       	std	Y+19, r24	; 0x13
    12ca:	3f c0       	rjmp	.+126    	; 0x134a <CLCD_voidSendData+0x378>
	else if (__tmp > 65535)
    12cc:	6d 89       	ldd	r22, Y+21	; 0x15
    12ce:	7e 89       	ldd	r23, Y+22	; 0x16
    12d0:	8f 89       	ldd	r24, Y+23	; 0x17
    12d2:	98 8d       	ldd	r25, Y+24	; 0x18
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	3f ef       	ldi	r19, 0xFF	; 255
    12d8:	4f e7       	ldi	r20, 0x7F	; 127
    12da:	57 e4       	ldi	r21, 0x47	; 71
    12dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12e0:	18 16       	cp	r1, r24
    12e2:	4c f5       	brge	.+82     	; 0x1336 <CLCD_voidSendData+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e4:	69 8d       	ldd	r22, Y+25	; 0x19
    12e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e2       	ldi	r20, 0x20	; 32
    12f2:	51 e4       	ldi	r21, 0x41	; 65
    12f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	bc 01       	movw	r22, r24
    12fe:	cd 01       	movw	r24, r26
    1300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	9c 8b       	std	Y+20, r25	; 0x14
    130a:	8b 8b       	std	Y+19, r24	; 0x13
    130c:	0f c0       	rjmp	.+30     	; 0x132c <CLCD_voidSendData+0x35a>
    130e:	88 ec       	ldi	r24, 0xC8	; 200
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	9a 8b       	std	Y+18, r25	; 0x12
    1314:	89 8b       	std	Y+17, r24	; 0x11
    1316:	89 89       	ldd	r24, Y+17	; 0x11
    1318:	9a 89       	ldd	r25, Y+18	; 0x12
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <CLCD_voidSendData+0x348>
    131e:	9a 8b       	std	Y+18, r25	; 0x12
    1320:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1322:	8b 89       	ldd	r24, Y+19	; 0x13
    1324:	9c 89       	ldd	r25, Y+20	; 0x14
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	9c 8b       	std	Y+20, r25	; 0x14
    132a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132c:	8b 89       	ldd	r24, Y+19	; 0x13
    132e:	9c 89       	ldd	r25, Y+20	; 0x14
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	69 f7       	brne	.-38     	; 0x130e <CLCD_voidSendData+0x33c>
    1334:	14 c0       	rjmp	.+40     	; 0x135e <CLCD_voidSendData+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1336:	6d 89       	ldd	r22, Y+21	; 0x15
    1338:	7e 89       	ldd	r23, Y+22	; 0x16
    133a:	8f 89       	ldd	r24, Y+23	; 0x17
    133c:	98 8d       	ldd	r25, Y+24	; 0x18
    133e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	9c 8b       	std	Y+20, r25	; 0x14
    1348:	8b 8b       	std	Y+19, r24	; 0x13
    134a:	8b 89       	ldd	r24, Y+19	; 0x13
    134c:	9c 89       	ldd	r25, Y+20	; 0x14
    134e:	98 8b       	std	Y+16, r25	; 0x10
    1350:	8f 87       	std	Y+15, r24	; 0x0f
    1352:	8f 85       	ldd	r24, Y+15	; 0x0f
    1354:	98 89       	ldd	r25, Y+16	; 0x10
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <CLCD_voidSendData+0x384>
    135a:	98 8b       	std	Y+16, r25	; 0x10
    135c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_SetPinValue(PORT_A,PIN_2,PIN_LOW);
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	62 e0       	ldi	r22, 0x02	; 2
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <DIO_SetPinValue>
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	a0 ea       	ldi	r26, 0xA0	; 160
    136e:	b0 e4       	ldi	r27, 0x40	; 64
    1370:	8b 87       	std	Y+11, r24	; 0x0b
    1372:	9c 87       	std	Y+12, r25	; 0x0c
    1374:	ad 87       	std	Y+13, r26	; 0x0d
    1376:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1378:	6b 85       	ldd	r22, Y+11	; 0x0b
    137a:	7c 85       	ldd	r23, Y+12	; 0x0c
    137c:	8d 85       	ldd	r24, Y+13	; 0x0d
    137e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	4a ef       	ldi	r20, 0xFA	; 250
    1386:	54 e4       	ldi	r21, 0x44	; 68
    1388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	8f 83       	std	Y+7, r24	; 0x07
    1392:	98 87       	std	Y+8, r25	; 0x08
    1394:	a9 87       	std	Y+9, r26	; 0x09
    1396:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1398:	6f 81       	ldd	r22, Y+7	; 0x07
    139a:	78 85       	ldd	r23, Y+8	; 0x08
    139c:	89 85       	ldd	r24, Y+9	; 0x09
    139e:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e8       	ldi	r20, 0x80	; 128
    13a6:	5f e3       	ldi	r21, 0x3F	; 63
    13a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ac:	88 23       	and	r24, r24
    13ae:	2c f4       	brge	.+10     	; 0x13ba <CLCD_voidSendData+0x3e8>
		__ticks = 1;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	9e 83       	std	Y+6, r25	; 0x06
    13b6:	8d 83       	std	Y+5, r24	; 0x05
    13b8:	3f c0       	rjmp	.+126    	; 0x1438 <CLCD_voidSendData+0x466>
	else if (__tmp > 65535)
    13ba:	6f 81       	ldd	r22, Y+7	; 0x07
    13bc:	78 85       	ldd	r23, Y+8	; 0x08
    13be:	89 85       	ldd	r24, Y+9	; 0x09
    13c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	3f ef       	ldi	r19, 0xFF	; 255
    13c6:	4f e7       	ldi	r20, 0x7F	; 127
    13c8:	57 e4       	ldi	r21, 0x47	; 71
    13ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ce:	18 16       	cp	r1, r24
    13d0:	4c f5       	brge	.+82     	; 0x1424 <CLCD_voidSendData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e2       	ldi	r20, 0x20	; 32
    13e0:	51 e4       	ldi	r21, 0x41	; 65
    13e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	9e 83       	std	Y+6, r25	; 0x06
    13f8:	8d 83       	std	Y+5, r24	; 0x05
    13fa:	0f c0       	rjmp	.+30     	; 0x141a <CLCD_voidSendData+0x448>
    13fc:	88 ec       	ldi	r24, 0xC8	; 200
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	9c 83       	std	Y+4, r25	; 0x04
    1402:	8b 83       	std	Y+3, r24	; 0x03
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	f1 f7       	brne	.-4      	; 0x1408 <CLCD_voidSendData+0x436>
    140c:	9c 83       	std	Y+4, r25	; 0x04
    140e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1410:	8d 81       	ldd	r24, Y+5	; 0x05
    1412:	9e 81       	ldd	r25, Y+6	; 0x06
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	9e 83       	std	Y+6, r25	; 0x06
    1418:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141a:	8d 81       	ldd	r24, Y+5	; 0x05
    141c:	9e 81       	ldd	r25, Y+6	; 0x06
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	69 f7       	brne	.-38     	; 0x13fc <CLCD_voidSendData+0x42a>
    1422:	14 c0       	rjmp	.+40     	; 0x144c <CLCD_voidSendData+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1424:	6f 81       	ldd	r22, Y+7	; 0x07
    1426:	78 85       	ldd	r23, Y+8	; 0x08
    1428:	89 85       	ldd	r24, Y+9	; 0x09
    142a:	9a 85       	ldd	r25, Y+10	; 0x0a
    142c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	9e 83       	std	Y+6, r25	; 0x06
    1436:	8d 83       	std	Y+5, r24	; 0x05
    1438:	8d 81       	ldd	r24, Y+5	; 0x05
    143a:	9e 81       	ldd	r25, Y+6	; 0x06
    143c:	9a 83       	std	Y+2, r25	; 0x02
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	f1 f7       	brne	.-4      	; 0x1444 <CLCD_voidSendData+0x472>
    1448:	9a 83       	std	Y+2, r25	; 0x02
    144a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

}
    144c:	e9 96       	adiw	r28, 0x39	; 57
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <CLCD_voidInit>:
void CLCD_voidInit(void)
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	e8 97       	sbiw	r28, 0x38	; 56
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
	/*set pin rs,rw,e->output*/
	DIO_INIT(PORT_A,PIN_3,PIN_OUTPUT);
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	63 e0       	ldi	r22, 0x03	; 3
    1476:	41 e0       	ldi	r20, 0x01	; 1
    1478:	0e 94 d6 14 	call	0x29ac	; 0x29ac <DIO_INIT>
	//DIO_INIT(PORT_A,CLCD_RW_PIN,PIN_OUTPUT);
	DIO_INIT(PORT_A,PIN_2,PIN_OUTPUT);
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	62 e0       	ldi	r22, 0x02	; 2
    1480:	41 e0       	ldi	r20, 0x01	; 1
    1482:	0e 94 d6 14 	call	0x29ac	; 0x29ac <DIO_INIT>
	/*set data port as output*/

	DIO_SetPortDirection(PORT_B,PORT_OUT);
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	6f ef       	ldi	r22, 0xFF	; 255
    148a:	0e 94 58 18 	call	0x30b0	; 0x30b0 <DIO_SetPortDirection>
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	a0 e2       	ldi	r26, 0x20	; 32
    1494:	b2 e4       	ldi	r27, 0x42	; 66
    1496:	8d ab       	std	Y+53, r24	; 0x35
    1498:	9e ab       	std	Y+54, r25	; 0x36
    149a:	af ab       	std	Y+55, r26	; 0x37
    149c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    149e:	6d a9       	ldd	r22, Y+53	; 0x35
    14a0:	7e a9       	ldd	r23, Y+54	; 0x36
    14a2:	8f a9       	ldd	r24, Y+55	; 0x37
    14a4:	98 ad       	ldd	r25, Y+56	; 0x38
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	4a ef       	ldi	r20, 0xFA	; 250
    14ac:	54 e4       	ldi	r21, 0x44	; 68
    14ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	89 ab       	std	Y+49, r24	; 0x31
    14b8:	9a ab       	std	Y+50, r25	; 0x32
    14ba:	ab ab       	std	Y+51, r26	; 0x33
    14bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14be:	69 a9       	ldd	r22, Y+49	; 0x31
    14c0:	7a a9       	ldd	r23, Y+50	; 0x32
    14c2:	8b a9       	ldd	r24, Y+51	; 0x33
    14c4:	9c a9       	ldd	r25, Y+52	; 0x34
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	40 e8       	ldi	r20, 0x80	; 128
    14cc:	5f e3       	ldi	r21, 0x3F	; 63
    14ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14d2:	88 23       	and	r24, r24
    14d4:	2c f4       	brge	.+10     	; 0x14e0 <CLCD_voidInit+0x82>
		__ticks = 1;
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	98 ab       	std	Y+48, r25	; 0x30
    14dc:	8f a7       	std	Y+47, r24	; 0x2f
    14de:	3f c0       	rjmp	.+126    	; 0x155e <CLCD_voidInit+0x100>
	else if (__tmp > 65535)
    14e0:	69 a9       	ldd	r22, Y+49	; 0x31
    14e2:	7a a9       	ldd	r23, Y+50	; 0x32
    14e4:	8b a9       	ldd	r24, Y+51	; 0x33
    14e6:	9c a9       	ldd	r25, Y+52	; 0x34
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	3f ef       	ldi	r19, 0xFF	; 255
    14ec:	4f e7       	ldi	r20, 0x7F	; 127
    14ee:	57 e4       	ldi	r21, 0x47	; 71
    14f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14f4:	18 16       	cp	r1, r24
    14f6:	4c f5       	brge	.+82     	; 0x154a <CLCD_voidInit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f8:	6d a9       	ldd	r22, Y+53	; 0x35
    14fa:	7e a9       	ldd	r23, Y+54	; 0x36
    14fc:	8f a9       	ldd	r24, Y+55	; 0x37
    14fe:	98 ad       	ldd	r25, Y+56	; 0x38
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	40 e2       	ldi	r20, 0x20	; 32
    1506:	51 e4       	ldi	r21, 0x41	; 65
    1508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	bc 01       	movw	r22, r24
    1512:	cd 01       	movw	r24, r26
    1514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	98 ab       	std	Y+48, r25	; 0x30
    151e:	8f a7       	std	Y+47, r24	; 0x2f
    1520:	0f c0       	rjmp	.+30     	; 0x1540 <CLCD_voidInit+0xe2>
    1522:	88 ec       	ldi	r24, 0xC8	; 200
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	9e a7       	std	Y+46, r25	; 0x2e
    1528:	8d a7       	std	Y+45, r24	; 0x2d
    152a:	8d a5       	ldd	r24, Y+45	; 0x2d
    152c:	9e a5       	ldd	r25, Y+46	; 0x2e
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <CLCD_voidInit+0xd0>
    1532:	9e a7       	std	Y+46, r25	; 0x2e
    1534:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1536:	8f a5       	ldd	r24, Y+47	; 0x2f
    1538:	98 a9       	ldd	r25, Y+48	; 0x30
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	98 ab       	std	Y+48, r25	; 0x30
    153e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1540:	8f a5       	ldd	r24, Y+47	; 0x2f
    1542:	98 a9       	ldd	r25, Y+48	; 0x30
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	69 f7       	brne	.-38     	; 0x1522 <CLCD_voidInit+0xc4>
    1548:	14 c0       	rjmp	.+40     	; 0x1572 <CLCD_voidInit+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154a:	69 a9       	ldd	r22, Y+49	; 0x31
    154c:	7a a9       	ldd	r23, Y+50	; 0x32
    154e:	8b a9       	ldd	r24, Y+51	; 0x33
    1550:	9c a9       	ldd	r25, Y+52	; 0x34
    1552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	98 ab       	std	Y+48, r25	; 0x30
    155c:	8f a7       	std	Y+47, r24	; 0x2f
    155e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1560:	98 a9       	ldd	r25, Y+48	; 0x30
    1562:	9c a7       	std	Y+44, r25	; 0x2c
    1564:	8b a7       	std	Y+43, r24	; 0x2b
    1566:	8b a5       	ldd	r24, Y+43	; 0x2b
    1568:	9c a5       	ldd	r25, Y+44	; 0x2c
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <CLCD_voidInit+0x10c>
    156e:	9c a7       	std	Y+44, r25	; 0x2c
    1570:	8b a7       	std	Y+43, r24	; 0x2b
	/*delay for more than 30 ms */
	_delay_ms(40);
	CLCD_voidCommand(0x33);
    1572:	83 e3       	ldi	r24, 0x33	; 51
    1574:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidCommand>
	CLCD_voidCommand(0x32);
    1578:	82 e3       	ldi	r24, 0x32	; 50
    157a:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidCommand>
	/*Function set command:2 lines(N)=1,,,5*8 font size (f=0)*/
	CLCD_voidCommand(0x28);
    157e:	88 e2       	ldi	r24, 0x28	; 40
    1580:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidCommand>
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	a0 e8       	ldi	r26, 0x80	; 128
    158a:	bf e3       	ldi	r27, 0x3F	; 63
    158c:	8f a3       	std	Y+39, r24	; 0x27
    158e:	98 a7       	std	Y+40, r25	; 0x28
    1590:	a9 a7       	std	Y+41, r26	; 0x29
    1592:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1594:	6f a1       	ldd	r22, Y+39	; 0x27
    1596:	78 a5       	ldd	r23, Y+40	; 0x28
    1598:	89 a5       	ldd	r24, Y+41	; 0x29
    159a:	9a a5       	ldd	r25, Y+42	; 0x2a
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	4a ef       	ldi	r20, 0xFA	; 250
    15a2:	54 e4       	ldi	r21, 0x44	; 68
    15a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	8b a3       	std	Y+35, r24	; 0x23
    15ae:	9c a3       	std	Y+36, r25	; 0x24
    15b0:	ad a3       	std	Y+37, r26	; 0x25
    15b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15b4:	6b a1       	ldd	r22, Y+35	; 0x23
    15b6:	7c a1       	ldd	r23, Y+36	; 0x24
    15b8:	8d a1       	ldd	r24, Y+37	; 0x25
    15ba:	9e a1       	ldd	r25, Y+38	; 0x26
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e8       	ldi	r20, 0x80	; 128
    15c2:	5f e3       	ldi	r21, 0x3F	; 63
    15c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15c8:	88 23       	and	r24, r24
    15ca:	2c f4       	brge	.+10     	; 0x15d6 <CLCD_voidInit+0x178>
		__ticks = 1;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	9a a3       	std	Y+34, r25	; 0x22
    15d2:	89 a3       	std	Y+33, r24	; 0x21
    15d4:	3f c0       	rjmp	.+126    	; 0x1654 <CLCD_voidInit+0x1f6>
	else if (__tmp > 65535)
    15d6:	6b a1       	ldd	r22, Y+35	; 0x23
    15d8:	7c a1       	ldd	r23, Y+36	; 0x24
    15da:	8d a1       	ldd	r24, Y+37	; 0x25
    15dc:	9e a1       	ldd	r25, Y+38	; 0x26
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	3f ef       	ldi	r19, 0xFF	; 255
    15e2:	4f e7       	ldi	r20, 0x7F	; 127
    15e4:	57 e4       	ldi	r21, 0x47	; 71
    15e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ea:	18 16       	cp	r1, r24
    15ec:	4c f5       	brge	.+82     	; 0x1640 <CLCD_voidInit+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ee:	6f a1       	ldd	r22, Y+39	; 0x27
    15f0:	78 a5       	ldd	r23, Y+40	; 0x28
    15f2:	89 a5       	ldd	r24, Y+41	; 0x29
    15f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	40 e2       	ldi	r20, 0x20	; 32
    15fc:	51 e4       	ldi	r21, 0x41	; 65
    15fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	bc 01       	movw	r22, r24
    1608:	cd 01       	movw	r24, r26
    160a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	9a a3       	std	Y+34, r25	; 0x22
    1614:	89 a3       	std	Y+33, r24	; 0x21
    1616:	0f c0       	rjmp	.+30     	; 0x1636 <CLCD_voidInit+0x1d8>
    1618:	88 ec       	ldi	r24, 0xC8	; 200
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	98 a3       	std	Y+32, r25	; 0x20
    161e:	8f 8f       	std	Y+31, r24	; 0x1f
    1620:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1622:	98 a1       	ldd	r25, Y+32	; 0x20
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	f1 f7       	brne	.-4      	; 0x1624 <CLCD_voidInit+0x1c6>
    1628:	98 a3       	std	Y+32, r25	; 0x20
    162a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162c:	89 a1       	ldd	r24, Y+33	; 0x21
    162e:	9a a1       	ldd	r25, Y+34	; 0x22
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	9a a3       	std	Y+34, r25	; 0x22
    1634:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1636:	89 a1       	ldd	r24, Y+33	; 0x21
    1638:	9a a1       	ldd	r25, Y+34	; 0x22
    163a:	00 97       	sbiw	r24, 0x00	; 0
    163c:	69 f7       	brne	.-38     	; 0x1618 <CLCD_voidInit+0x1ba>
    163e:	14 c0       	rjmp	.+40     	; 0x1668 <CLCD_voidInit+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1640:	6b a1       	ldd	r22, Y+35	; 0x23
    1642:	7c a1       	ldd	r23, Y+36	; 0x24
    1644:	8d a1       	ldd	r24, Y+37	; 0x25
    1646:	9e a1       	ldd	r25, Y+38	; 0x26
    1648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	9a a3       	std	Y+34, r25	; 0x22
    1652:	89 a3       	std	Y+33, r24	; 0x21
    1654:	89 a1       	ldd	r24, Y+33	; 0x21
    1656:	9a a1       	ldd	r25, Y+34	; 0x22
    1658:	9e 8f       	std	Y+30, r25	; 0x1e
    165a:	8d 8f       	std	Y+29, r24	; 0x1d
    165c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    165e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	f1 f7       	brne	.-4      	; 0x1660 <CLCD_voidInit+0x202>
    1664:	9e 8f       	std	Y+30, r25	; 0x1e
    1666:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Display ON/OFF control:Display enable D=1,cursor disable,C=0,NO Blink cursorB=0*/
	CLCD_voidCommand(0x0c);
    1668:	8c e0       	ldi	r24, 0x0C	; 12
    166a:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidCommand>
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	a0 e0       	ldi	r26, 0x00	; 0
    1674:	b0 e4       	ldi	r27, 0x40	; 64
    1676:	89 8f       	std	Y+25, r24	; 0x19
    1678:	9a 8f       	std	Y+26, r25	; 0x1a
    167a:	ab 8f       	std	Y+27, r26	; 0x1b
    167c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167e:	69 8d       	ldd	r22, Y+25	; 0x19
    1680:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1682:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1684:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	4a ef       	ldi	r20, 0xFA	; 250
    168c:	54 e4       	ldi	r21, 0x44	; 68
    168e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	8d 8b       	std	Y+21, r24	; 0x15
    1698:	9e 8b       	std	Y+22, r25	; 0x16
    169a:	af 8b       	std	Y+23, r26	; 0x17
    169c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    169e:	6d 89       	ldd	r22, Y+21	; 0x15
    16a0:	7e 89       	ldd	r23, Y+22	; 0x16
    16a2:	8f 89       	ldd	r24, Y+23	; 0x17
    16a4:	98 8d       	ldd	r25, Y+24	; 0x18
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e8       	ldi	r20, 0x80	; 128
    16ac:	5f e3       	ldi	r21, 0x3F	; 63
    16ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16b2:	88 23       	and	r24, r24
    16b4:	2c f4       	brge	.+10     	; 0x16c0 <CLCD_voidInit+0x262>
		__ticks = 1;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	9c 8b       	std	Y+20, r25	; 0x14
    16bc:	8b 8b       	std	Y+19, r24	; 0x13
    16be:	3f c0       	rjmp	.+126    	; 0x173e <CLCD_voidInit+0x2e0>
	else if (__tmp > 65535)
    16c0:	6d 89       	ldd	r22, Y+21	; 0x15
    16c2:	7e 89       	ldd	r23, Y+22	; 0x16
    16c4:	8f 89       	ldd	r24, Y+23	; 0x17
    16c6:	98 8d       	ldd	r25, Y+24	; 0x18
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	3f ef       	ldi	r19, 0xFF	; 255
    16cc:	4f e7       	ldi	r20, 0x7F	; 127
    16ce:	57 e4       	ldi	r21, 0x47	; 71
    16d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16d4:	18 16       	cp	r1, r24
    16d6:	4c f5       	brge	.+82     	; 0x172a <CLCD_voidInit+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d8:	69 8d       	ldd	r22, Y+25	; 0x19
    16da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e2       	ldi	r20, 0x20	; 32
    16e6:	51 e4       	ldi	r21, 0x41	; 65
    16e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	bc 01       	movw	r22, r24
    16f2:	cd 01       	movw	r24, r26
    16f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	9c 8b       	std	Y+20, r25	; 0x14
    16fe:	8b 8b       	std	Y+19, r24	; 0x13
    1700:	0f c0       	rjmp	.+30     	; 0x1720 <CLCD_voidInit+0x2c2>
    1702:	88 ec       	ldi	r24, 0xC8	; 200
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	9a 8b       	std	Y+18, r25	; 0x12
    1708:	89 8b       	std	Y+17, r24	; 0x11
    170a:	89 89       	ldd	r24, Y+17	; 0x11
    170c:	9a 89       	ldd	r25, Y+18	; 0x12
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <CLCD_voidInit+0x2b0>
    1712:	9a 8b       	std	Y+18, r25	; 0x12
    1714:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1716:	8b 89       	ldd	r24, Y+19	; 0x13
    1718:	9c 89       	ldd	r25, Y+20	; 0x14
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	9c 8b       	std	Y+20, r25	; 0x14
    171e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1720:	8b 89       	ldd	r24, Y+19	; 0x13
    1722:	9c 89       	ldd	r25, Y+20	; 0x14
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	69 f7       	brne	.-38     	; 0x1702 <CLCD_voidInit+0x2a4>
    1728:	14 c0       	rjmp	.+40     	; 0x1752 <CLCD_voidInit+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172a:	6d 89       	ldd	r22, Y+21	; 0x15
    172c:	7e 89       	ldd	r23, Y+22	; 0x16
    172e:	8f 89       	ldd	r24, Y+23	; 0x17
    1730:	98 8d       	ldd	r25, Y+24	; 0x18
    1732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	9c 8b       	std	Y+20, r25	; 0x14
    173c:	8b 8b       	std	Y+19, r24	; 0x13
    173e:	8b 89       	ldd	r24, Y+19	; 0x13
    1740:	9c 89       	ldd	r25, Y+20	; 0x14
    1742:	98 8b       	std	Y+16, r25	; 0x10
    1744:	8f 87       	std	Y+15, r24	; 0x0f
    1746:	8f 85       	ldd	r24, Y+15	; 0x0f
    1748:	98 89       	ldd	r25, Y+16	; 0x10
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <CLCD_voidInit+0x2ec>
    174e:	98 8b       	std	Y+16, r25	; 0x10
    1750:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(2);
	/*RETURN HOME*/
	CLCD_voidCommand(0x02);
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidCommand>
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	a0 e8       	ldi	r26, 0x80	; 128
    175e:	bf e3       	ldi	r27, 0x3F	; 63
    1760:	8b 87       	std	Y+11, r24	; 0x0b
    1762:	9c 87       	std	Y+12, r25	; 0x0c
    1764:	ad 87       	std	Y+13, r26	; 0x0d
    1766:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1768:	6b 85       	ldd	r22, Y+11	; 0x0b
    176a:	7c 85       	ldd	r23, Y+12	; 0x0c
    176c:	8d 85       	ldd	r24, Y+13	; 0x0d
    176e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	4a ef       	ldi	r20, 0xFA	; 250
    1776:	54 e4       	ldi	r21, 0x44	; 68
    1778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	8f 83       	std	Y+7, r24	; 0x07
    1782:	98 87       	std	Y+8, r25	; 0x08
    1784:	a9 87       	std	Y+9, r26	; 0x09
    1786:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1788:	6f 81       	ldd	r22, Y+7	; 0x07
    178a:	78 85       	ldd	r23, Y+8	; 0x08
    178c:	89 85       	ldd	r24, Y+9	; 0x09
    178e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e8       	ldi	r20, 0x80	; 128
    1796:	5f e3       	ldi	r21, 0x3F	; 63
    1798:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    179c:	88 23       	and	r24, r24
    179e:	2c f4       	brge	.+10     	; 0x17aa <CLCD_voidInit+0x34c>
		__ticks = 1;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9e 83       	std	Y+6, r25	; 0x06
    17a6:	8d 83       	std	Y+5, r24	; 0x05
    17a8:	3f c0       	rjmp	.+126    	; 0x1828 <CLCD_voidInit+0x3ca>
	else if (__tmp > 65535)
    17aa:	6f 81       	ldd	r22, Y+7	; 0x07
    17ac:	78 85       	ldd	r23, Y+8	; 0x08
    17ae:	89 85       	ldd	r24, Y+9	; 0x09
    17b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	3f ef       	ldi	r19, 0xFF	; 255
    17b6:	4f e7       	ldi	r20, 0x7F	; 127
    17b8:	57 e4       	ldi	r21, 0x47	; 71
    17ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17be:	18 16       	cp	r1, r24
    17c0:	4c f5       	brge	.+82     	; 0x1814 <CLCD_voidInit+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	40 e2       	ldi	r20, 0x20	; 32
    17d0:	51 e4       	ldi	r21, 0x41	; 65
    17d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	bc 01       	movw	r22, r24
    17dc:	cd 01       	movw	r24, r26
    17de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	9e 83       	std	Y+6, r25	; 0x06
    17e8:	8d 83       	std	Y+5, r24	; 0x05
    17ea:	0f c0       	rjmp	.+30     	; 0x180a <CLCD_voidInit+0x3ac>
    17ec:	88 ec       	ldi	r24, 0xC8	; 200
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	9c 83       	std	Y+4, r25	; 0x04
    17f2:	8b 83       	std	Y+3, r24	; 0x03
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	9c 81       	ldd	r25, Y+4	; 0x04
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <CLCD_voidInit+0x39a>
    17fc:	9c 83       	std	Y+4, r25	; 0x04
    17fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1800:	8d 81       	ldd	r24, Y+5	; 0x05
    1802:	9e 81       	ldd	r25, Y+6	; 0x06
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	9e 83       	std	Y+6, r25	; 0x06
    1808:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	69 f7       	brne	.-38     	; 0x17ec <CLCD_voidInit+0x38e>
    1812:	14 c0       	rjmp	.+40     	; 0x183c <CLCD_voidInit+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1814:	6f 81       	ldd	r22, Y+7	; 0x07
    1816:	78 85       	ldd	r23, Y+8	; 0x08
    1818:	89 85       	ldd	r24, Y+9	; 0x09
    181a:	9a 85       	ldd	r25, Y+10	; 0x0a
    181c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	9e 83       	std	Y+6, r25	; 0x06
    1826:	8d 83       	std	Y+5, r24	; 0x05
    1828:	8d 81       	ldd	r24, Y+5	; 0x05
    182a:	9e 81       	ldd	r25, Y+6	; 0x06
    182c:	9a 83       	std	Y+2, r25	; 0x02
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	9a 81       	ldd	r25, Y+2	; 0x02
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <CLCD_voidInit+0x3d6>
    1838:	9a 83       	std	Y+2, r25	; 0x02
    183a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	/*Clear display*/
	CLCD_voidCommand(0x01);
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidCommand>
}
    1842:	e8 96       	adiw	r28, 0x38	; 56
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <CLCD_GoTOXY>:
void CLCD_GoTOXY(u8int_t copy_u8Xpos,u8int_t copy_u8Ypos)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	00 d0       	rcall	.+0      	; 0x185a <CLCD_GoTOXY+0x6>
    185a:	0f 92       	push	r0
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	8a 83       	std	Y+2, r24	; 0x02
    1862:	6b 83       	std	Y+3, r22	; 0x03
	u8int_t Local_u8Address;
	/*Location at first line*/
	if(copy_u8Xpos==0)//ifx==0->adress=y
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	88 23       	and	r24, r24
    1868:	19 f4       	brne	.+6      	; 0x1870 <CLCD_GoTOXY+0x1c>
	{
		Local_u8Address=(copy_u8Ypos);
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	89 83       	std	Y+1, r24	; 0x01
    186e:	14 c0       	rjmp	.+40     	; 0x1898 <CLCD_GoTOXY+0x44>

	}

	/*Location at second line*/
/*x->.row(0,1,2,3), y-> col(0...19*/
	else if(copy_u8Xpos==1)
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	81 30       	cpi	r24, 0x01	; 1
    1874:	21 f4       	brne	.+8      	; 0x187e <CLCD_GoTOXY+0x2a>
	{
		Local_u8Address=(0x40+copy_u8Ypos);
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	80 5c       	subi	r24, 0xC0	; 192
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	0d c0       	rjmp	.+26     	; 0x1898 <CLCD_GoTOXY+0x44>
	}

	else if(copy_u8Xpos==2)
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	82 30       	cpi	r24, 0x02	; 2
    1882:	21 f4       	brne	.+8      	; 0x188c <CLCD_GoTOXY+0x38>
	{
		Local_u8Address=(0x14+copy_u8Ypos);
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	8c 5e       	subi	r24, 0xEC	; 236
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	06 c0       	rjmp	.+12     	; 0x1898 <CLCD_GoTOXY+0x44>
	}

	else if(copy_u8Xpos==3)
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	83 30       	cpi	r24, 0x03	; 3
    1890:	19 f4       	brne	.+6      	; 0x1898 <CLCD_GoTOXY+0x44>
	{
		Local_u8Address=(0x54+copy_u8Ypos);
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	8c 5a       	subi	r24, 0xAC	; 172
    1896:	89 83       	std	Y+1, r24	; 0x01
	}


	/*Set DDRAM address in Address Counter */
	//128->for address counter
	CLCD_voidCommand(Local_u8Address+0x80);
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	80 58       	subi	r24, 0x80	; 128
    189c:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidCommand>
}
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <CLCD_voidSendString>:
void CLCD_voidSendString(u8int_t* String)
{
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <CLCD_voidSendString+0x6>
    18b2:	0f 92       	push	r0
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	9b 83       	std	Y+3, r25	; 0x03
    18ba:	8a 83       	std	Y+2, r24	; 0x02
	u8int_t Counter=0;
    18bc:	19 82       	std	Y+1, r1	; 0x01
    18be:	0e c0       	rjmp	.+28     	; 0x18dc <CLCD_voidSendString+0x30>
	while(String[Counter]!='\0')
	{
		CLCD_voidSendData(String[Counter]);
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ca:	fc 01       	movw	r30, r24
    18cc:	e2 0f       	add	r30, r18
    18ce:	f3 1f       	adc	r31, r19
    18d0:	80 81       	ld	r24, Z
    18d2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>
		Counter++;
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	8f 5f       	subi	r24, 0xFF	; 255
    18da:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidCommand(Local_u8Address+0x80);
}
void CLCD_voidSendString(u8int_t* String)
{
	u8int_t Counter=0;
	while(String[Counter]!='\0')
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	9b 81       	ldd	r25, Y+3	; 0x03
    18e6:	fc 01       	movw	r30, r24
    18e8:	e2 0f       	add	r30, r18
    18ea:	f3 1f       	adc	r31, r19
    18ec:	80 81       	ld	r24, Z
    18ee:	88 23       	and	r24, r24
    18f0:	39 f7       	brne	.-50     	; 0x18c0 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(String[Counter]);
		Counter++;
	}
}
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <CLCD_voidWriteNumber>:
void CLCD_voidWriteNumber(u32 copy_u32Number)
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
    1906:	27 97       	sbiw	r28, 0x07	; 7
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	de bf       	out	0x3e, r29	; 62
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	cd bf       	out	0x3d, r28	; 61
    1912:	6c 83       	std	Y+4, r22	; 0x04
    1914:	7d 83       	std	Y+5, r23	; 0x05
    1916:	8e 83       	std	Y+6, r24	; 0x06
    1918:	9f 83       	std	Y+7, r25	; 0x07
	u8int_t Local_u8Digit;
	u8int_t Local_u8Counter=0;
    191a:	1a 82       	std	Y+2, r1	; 0x02
	s8 Local_u8Counter2;
	static u8int_t Local_ArrayOfChar[10]={'0','1','2','3','4','5','6','7','8','9'};
	static u8int_t Local_ArrayOfDigits[10];

	if(copy_u32Number==0)
    191c:	8c 81       	ldd	r24, Y+4	; 0x04
    191e:	9d 81       	ldd	r25, Y+5	; 0x05
    1920:	ae 81       	ldd	r26, Y+6	; 0x06
    1922:	bf 81       	ldd	r27, Y+7	; 0x07
    1924:	00 97       	sbiw	r24, 0x00	; 0
    1926:	a1 05       	cpc	r26, r1
    1928:	b1 05       	cpc	r27, r1
    192a:	b9 f5       	brne	.+110    	; 0x199a <CLCD_voidWriteNumber+0x9c>
	{
		CLCD_voidSendData(Local_ArrayOfChar[0]);
    192c:	80 91 f7 00 	lds	r24, 0x00F7
    1930:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>
    1934:	4e c0       	rjmp	.+156    	; 0x19d2 <CLCD_voidWriteNumber+0xd4>
	else
	{

		while(copy_u32Number>0)
		{
			Local_u8Digit=copy_u32Number%10;
    1936:	8c 81       	ldd	r24, Y+4	; 0x04
    1938:	9d 81       	ldd	r25, Y+5	; 0x05
    193a:	ae 81       	ldd	r26, Y+6	; 0x06
    193c:	bf 81       	ldd	r27, Y+7	; 0x07
    193e:	2a e0       	ldi	r18, 0x0A	; 10
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e0       	ldi	r20, 0x00	; 0
    1944:	50 e0       	ldi	r21, 0x00	; 0
    1946:	bc 01       	movw	r22, r24
    1948:	cd 01       	movw	r24, r26
    194a:	0e 94 66 19 	call	0x32cc	; 0x32cc <__udivmodsi4>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	8b 83       	std	Y+3, r24	; 0x03
			copy_u32Number=copy_u32Number/10;
    1954:	8c 81       	ldd	r24, Y+4	; 0x04
    1956:	9d 81       	ldd	r25, Y+5	; 0x05
    1958:	ae 81       	ldd	r26, Y+6	; 0x06
    195a:	bf 81       	ldd	r27, Y+7	; 0x07
    195c:	2a e0       	ldi	r18, 0x0A	; 10
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	bc 01       	movw	r22, r24
    1966:	cd 01       	movw	r24, r26
    1968:	0e 94 66 19 	call	0x32cc	; 0x32cc <__udivmodsi4>
    196c:	da 01       	movw	r26, r20
    196e:	c9 01       	movw	r24, r18
    1970:	8c 83       	std	Y+4, r24	; 0x04
    1972:	9d 83       	std	Y+5, r25	; 0x05
    1974:	ae 83       	std	Y+6, r26	; 0x06
    1976:	bf 83       	std	Y+7, r27	; 0x07
			Local_ArrayOfDigits[Local_u8Counter]=Local_ArrayOfChar[Local_u8Digit];
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	88 2f       	mov	r24, r24
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	fc 01       	movw	r30, r24
    1986:	e9 50       	subi	r30, 0x09	; 9
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	80 81       	ld	r24, Z
    198c:	f9 01       	movw	r30, r18
    198e:	e6 5d       	subi	r30, 0xD6	; 214
    1990:	fe 4f       	sbci	r31, 0xFE	; 254
    1992:	80 83       	st	Z, r24
			Local_u8Counter++;
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	8f 5f       	subi	r24, 0xFF	; 255
    1998:	8a 83       	std	Y+2, r24	; 0x02
		CLCD_voidSendData(Local_ArrayOfChar[0]);
	}
	else
	{

		while(copy_u32Number>0)
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	9d 81       	ldd	r25, Y+5	; 0x05
    199e:	ae 81       	ldd	r26, Y+6	; 0x06
    19a0:	bf 81       	ldd	r27, Y+7	; 0x07
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	a1 05       	cpc	r26, r1
    19a6:	b1 05       	cpc	r27, r1
    19a8:	31 f6       	brne	.-116    	; 0x1936 <CLCD_voidWriteNumber+0x38>
			copy_u32Number=copy_u32Number/10;
			Local_ArrayOfDigits[Local_u8Counter]=Local_ArrayOfChar[Local_u8Digit];
			Local_u8Counter++;
		}

		for(Local_u8Counter2=Local_u8Counter-1;Local_u8Counter2>=0;Local_u8Counter2--)
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	81 50       	subi	r24, 0x01	; 1
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	0d c0       	rjmp	.+26     	; 0x19cc <CLCD_voidWriteNumber+0xce>
		{
			CLCD_voidSendData(Local_ArrayOfDigits[Local_u8Counter2]);
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	99 27       	eor	r25, r25
    19b6:	87 fd       	sbrc	r24, 7
    19b8:	90 95       	com	r25
    19ba:	fc 01       	movw	r30, r24
    19bc:	e6 5d       	subi	r30, 0xD6	; 214
    19be:	fe 4f       	sbci	r31, 0xFE	; 254
    19c0:	80 81       	ld	r24, Z
    19c2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>
			copy_u32Number=copy_u32Number/10;
			Local_ArrayOfDigits[Local_u8Counter]=Local_ArrayOfChar[Local_u8Digit];
			Local_u8Counter++;
		}

		for(Local_u8Counter2=Local_u8Counter-1;Local_u8Counter2>=0;Local_u8Counter2--)
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	81 50       	subi	r24, 0x01	; 1
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	88 23       	and	r24, r24
    19d0:	84 f7       	brge	.-32     	; 0x19b2 <CLCD_voidWriteNumber+0xb4>
		{
			CLCD_voidSendData(Local_ArrayOfDigits[Local_u8Counter2]);
		}
	}
}
    19d2:	27 96       	adiw	r28, 0x07	; 7
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	cd bf       	out	0x3d, r28	; 61
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	08 95       	ret

000019e4 <write_special_character>:
void write_special_character(u8int_t *pattern_ARR, u8int_t position,u8int_t x_pos, u8int_t y_pos )
{
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	27 97       	sbiw	r28, 0x07	; 7
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	9c 83       	std	Y+4, r25	; 0x04
    19fa:	8b 83       	std	Y+3, r24	; 0x03
    19fc:	6d 83       	std	Y+5, r22	; 0x05
    19fe:	4e 83       	std	Y+6, r20	; 0x06
    1a00:	2f 83       	std	Y+7, r18	; 0x07
	/*calculate cgram adress whose block 8 bytes*/
	CLCD_voidCommand(0x40+(position * 8));
    1a02:	8d 81       	ldd	r24, Y+5	; 0x05
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	08 96       	adiw	r24, 0x08	; 8
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidCommand>
/*write pattern into cgram*/
	for(int i=0;i<8;i++)
    1a1a:	1a 82       	std	Y+2, r1	; 0x02
    1a1c:	19 82       	std	Y+1, r1	; 0x01
    1a1e:	0f c0       	rjmp	.+30     	; 0x1a3e <write_special_character+0x5a>
	{
		CLCD_voidSendData(pattern_ARR[i]);
    1a20:	29 81       	ldd	r18, Y+1	; 0x01
    1a22:	3a 81       	ldd	r19, Y+2	; 0x02
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	9c 81       	ldd	r25, Y+4	; 0x04
    1a28:	fc 01       	movw	r30, r24
    1a2a:	e2 0f       	add	r30, r18
    1a2c:	f3 1f       	adc	r31, r19
    1a2e:	80 81       	ld	r24, Z
    1a30:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>
void write_special_character(u8int_t *pattern_ARR, u8int_t position,u8int_t x_pos, u8int_t y_pos )
{
	/*calculate cgram adress whose block 8 bytes*/
	CLCD_voidCommand(0x40+(position * 8));
/*write pattern into cgram*/
	for(int i=0;i<8;i++)
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	9a 81       	ldd	r25, Y+2	; 0x02
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	9a 83       	std	Y+2, r25	; 0x02
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	9a 81       	ldd	r25, Y+2	; 0x02
    1a42:	88 30       	cpi	r24, 0x08	; 8
    1a44:	91 05       	cpc	r25, r1
    1a46:	64 f3       	brlt	.-40     	; 0x1a20 <write_special_character+0x3c>
	{
		CLCD_voidSendData(pattern_ARR[i]);
	}

	/*go to ddram to display pattern*/
CLCD_GoTOXY(x_pos,y_pos);
    1a48:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4c:	0e 94 2a 0c 	call	0x1854	; 0x1854 <CLCD_GoTOXY>
CLCD_voidSendData(position);
    1a50:	8d 81       	ldd	r24, Y+5	; 0x05
    1a52:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>

}
    1a56:	27 96       	adiw	r28, 0x07	; 7
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <CLCD_Void_LCDClear>:
void CLCD_Void_LCDClear(void)
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    CLCD_voidCommand(0x01);
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidCommand>
}
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <main>:
#include "register.h"

#include "util/delay.h"

int main(void)
{
    1a7c:	0f 93       	push	r16
    1a7e:	1f 93       	push	r17
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	cf 5b       	subi	r28, 0xBF	; 191
    1a8a:	d0 40       	sbci	r29, 0x00	; 0
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
			0b00000100,
			0b00001110,
			0b00010101,
			0b00000100,
			0b00001010
	};
    1a96:	ce 01       	movw	r24, r28
    1a98:	81 58       	subi	r24, 0x81	; 129
    1a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9c:	c9 55       	subi	r28, 0x59	; 89
    1a9e:	df 4f       	sbci	r29, 0xFF	; 255
    1aa0:	99 83       	std	Y+1, r25	; 0x01
    1aa2:	88 83       	st	Y, r24
    1aa4:	c7 5a       	subi	r28, 0xA7	; 167
    1aa6:	d0 40       	sbci	r29, 0x00	; 0
    1aa8:	81 e2       	ldi	r24, 0x21	; 33
    1aaa:	91 e0       	ldi	r25, 0x01	; 1
    1aac:	c7 55       	subi	r28, 0x57	; 87
    1aae:	df 4f       	sbci	r29, 0xFF	; 255
    1ab0:	99 83       	std	Y+1, r25	; 0x01
    1ab2:	88 83       	st	Y, r24
    1ab4:	c9 5a       	subi	r28, 0xA9	; 169
    1ab6:	d0 40       	sbci	r29, 0x00	; 0
    1ab8:	98 e0       	ldi	r25, 0x08	; 8
    1aba:	c5 55       	subi	r28, 0x55	; 85
    1abc:	df 4f       	sbci	r29, 0xFF	; 255
    1abe:	98 83       	st	Y, r25
    1ac0:	cb 5a       	subi	r28, 0xAB	; 171
    1ac2:	d0 40       	sbci	r29, 0x00	; 0
    1ac4:	c7 55       	subi	r28, 0x57	; 87
    1ac6:	df 4f       	sbci	r29, 0xFF	; 255
    1ac8:	e8 81       	ld	r30, Y
    1aca:	f9 81       	ldd	r31, Y+1	; 0x01
    1acc:	c9 5a       	subi	r28, 0xA9	; 169
    1ace:	d0 40       	sbci	r29, 0x00	; 0
    1ad0:	00 80       	ld	r0, Z
    1ad2:	c7 55       	subi	r28, 0x57	; 87
    1ad4:	df 4f       	sbci	r29, 0xFF	; 255
    1ad6:	88 81       	ld	r24, Y
    1ad8:	99 81       	ldd	r25, Y+1	; 0x01
    1ada:	c9 5a       	subi	r28, 0xA9	; 169
    1adc:	d0 40       	sbci	r29, 0x00	; 0
    1ade:	01 96       	adiw	r24, 0x01	; 1
    1ae0:	c7 55       	subi	r28, 0x57	; 87
    1ae2:	df 4f       	sbci	r29, 0xFF	; 255
    1ae4:	99 83       	std	Y+1, r25	; 0x01
    1ae6:	88 83       	st	Y, r24
    1ae8:	c9 5a       	subi	r28, 0xA9	; 169
    1aea:	d0 40       	sbci	r29, 0x00	; 0
    1aec:	c9 55       	subi	r28, 0x59	; 89
    1aee:	df 4f       	sbci	r29, 0xFF	; 255
    1af0:	e8 81       	ld	r30, Y
    1af2:	f9 81       	ldd	r31, Y+1	; 0x01
    1af4:	c7 5a       	subi	r28, 0xA7	; 167
    1af6:	d0 40       	sbci	r29, 0x00	; 0
    1af8:	00 82       	st	Z, r0
    1afa:	c9 55       	subi	r28, 0x59	; 89
    1afc:	df 4f       	sbci	r29, 0xFF	; 255
    1afe:	88 81       	ld	r24, Y
    1b00:	99 81       	ldd	r25, Y+1	; 0x01
    1b02:	c7 5a       	subi	r28, 0xA7	; 167
    1b04:	d0 40       	sbci	r29, 0x00	; 0
    1b06:	01 96       	adiw	r24, 0x01	; 1
    1b08:	c9 55       	subi	r28, 0x59	; 89
    1b0a:	df 4f       	sbci	r29, 0xFF	; 255
    1b0c:	99 83       	std	Y+1, r25	; 0x01
    1b0e:	88 83       	st	Y, r24
    1b10:	c7 5a       	subi	r28, 0xA7	; 167
    1b12:	d0 40       	sbci	r29, 0x00	; 0
    1b14:	c5 55       	subi	r28, 0x55	; 85
    1b16:	df 4f       	sbci	r29, 0xFF	; 255
    1b18:	98 81       	ld	r25, Y
    1b1a:	cb 5a       	subi	r28, 0xAB	; 171
    1b1c:	d0 40       	sbci	r29, 0x00	; 0
    1b1e:	91 50       	subi	r25, 0x01	; 1
    1b20:	c5 55       	subi	r28, 0x55	; 85
    1b22:	df 4f       	sbci	r29, 0xFF	; 255
    1b24:	98 83       	st	Y, r25
    1b26:	cb 5a       	subi	r28, 0xAB	; 171
    1b28:	d0 40       	sbci	r29, 0x00	; 0
    1b2a:	c5 55       	subi	r28, 0x55	; 85
    1b2c:	df 4f       	sbci	r29, 0xFF	; 255
    1b2e:	e8 81       	ld	r30, Y
    1b30:	cb 5a       	subi	r28, 0xAB	; 171
    1b32:	d0 40       	sbci	r29, 0x00	; 0
    1b34:	ee 23       	and	r30, r30
    1b36:	31 f6       	brne	.-116    	; 0x1ac4 <main+0x48>
			0b00000000,
			0b00001110,
			0b00011111,
			0b00010001,
			0b00000000
	};
    1b38:	ce 01       	movw	r24, r28
    1b3a:	89 57       	subi	r24, 0x79	; 121
    1b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3e:	c4 55       	subi	r28, 0x54	; 84
    1b40:	df 4f       	sbci	r29, 0xFF	; 255
    1b42:	99 83       	std	Y+1, r25	; 0x01
    1b44:	88 83       	st	Y, r24
    1b46:	cc 5a       	subi	r28, 0xAC	; 172
    1b48:	d0 40       	sbci	r29, 0x00	; 0
    1b4a:	89 e1       	ldi	r24, 0x19	; 25
    1b4c:	91 e0       	ldi	r25, 0x01	; 1
    1b4e:	c2 55       	subi	r28, 0x52	; 82
    1b50:	df 4f       	sbci	r29, 0xFF	; 255
    1b52:	99 83       	std	Y+1, r25	; 0x01
    1b54:	88 83       	st	Y, r24
    1b56:	ce 5a       	subi	r28, 0xAE	; 174
    1b58:	d0 40       	sbci	r29, 0x00	; 0
    1b5a:	98 e0       	ldi	r25, 0x08	; 8
    1b5c:	c0 55       	subi	r28, 0x50	; 80
    1b5e:	df 4f       	sbci	r29, 0xFF	; 255
    1b60:	98 83       	st	Y, r25
    1b62:	c0 5b       	subi	r28, 0xB0	; 176
    1b64:	d0 40       	sbci	r29, 0x00	; 0
    1b66:	c2 55       	subi	r28, 0x52	; 82
    1b68:	df 4f       	sbci	r29, 0xFF	; 255
    1b6a:	e8 81       	ld	r30, Y
    1b6c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b6e:	ce 5a       	subi	r28, 0xAE	; 174
    1b70:	d0 40       	sbci	r29, 0x00	; 0
    1b72:	00 80       	ld	r0, Z
    1b74:	c2 55       	subi	r28, 0x52	; 82
    1b76:	df 4f       	sbci	r29, 0xFF	; 255
    1b78:	88 81       	ld	r24, Y
    1b7a:	99 81       	ldd	r25, Y+1	; 0x01
    1b7c:	ce 5a       	subi	r28, 0xAE	; 174
    1b7e:	d0 40       	sbci	r29, 0x00	; 0
    1b80:	01 96       	adiw	r24, 0x01	; 1
    1b82:	c2 55       	subi	r28, 0x52	; 82
    1b84:	df 4f       	sbci	r29, 0xFF	; 255
    1b86:	99 83       	std	Y+1, r25	; 0x01
    1b88:	88 83       	st	Y, r24
    1b8a:	ce 5a       	subi	r28, 0xAE	; 174
    1b8c:	d0 40       	sbci	r29, 0x00	; 0
    1b8e:	c4 55       	subi	r28, 0x54	; 84
    1b90:	df 4f       	sbci	r29, 0xFF	; 255
    1b92:	e8 81       	ld	r30, Y
    1b94:	f9 81       	ldd	r31, Y+1	; 0x01
    1b96:	cc 5a       	subi	r28, 0xAC	; 172
    1b98:	d0 40       	sbci	r29, 0x00	; 0
    1b9a:	00 82       	st	Z, r0
    1b9c:	c4 55       	subi	r28, 0x54	; 84
    1b9e:	df 4f       	sbci	r29, 0xFF	; 255
    1ba0:	88 81       	ld	r24, Y
    1ba2:	99 81       	ldd	r25, Y+1	; 0x01
    1ba4:	cc 5a       	subi	r28, 0xAC	; 172
    1ba6:	d0 40       	sbci	r29, 0x00	; 0
    1ba8:	01 96       	adiw	r24, 0x01	; 1
    1baa:	c4 55       	subi	r28, 0x54	; 84
    1bac:	df 4f       	sbci	r29, 0xFF	; 255
    1bae:	99 83       	std	Y+1, r25	; 0x01
    1bb0:	88 83       	st	Y, r24
    1bb2:	cc 5a       	subi	r28, 0xAC	; 172
    1bb4:	d0 40       	sbci	r29, 0x00	; 0
    1bb6:	c0 55       	subi	r28, 0x50	; 80
    1bb8:	df 4f       	sbci	r29, 0xFF	; 255
    1bba:	98 81       	ld	r25, Y
    1bbc:	c0 5b       	subi	r28, 0xB0	; 176
    1bbe:	d0 40       	sbci	r29, 0x00	; 0
    1bc0:	91 50       	subi	r25, 0x01	; 1
    1bc2:	c0 55       	subi	r28, 0x50	; 80
    1bc4:	df 4f       	sbci	r29, 0xFF	; 255
    1bc6:	98 83       	st	Y, r25
    1bc8:	c0 5b       	subi	r28, 0xB0	; 176
    1bca:	d0 40       	sbci	r29, 0x00	; 0
    1bcc:	c0 55       	subi	r28, 0x50	; 80
    1bce:	df 4f       	sbci	r29, 0xFF	; 255
    1bd0:	e8 81       	ld	r30, Y
    1bd2:	c0 5b       	subi	r28, 0xB0	; 176
    1bd4:	d0 40       	sbci	r29, 0x00	; 0
    1bd6:	ee 23       	and	r30, r30
    1bd8:	31 f6       	brne	.-116    	; 0x1b66 <main+0xea>
			0b00011111,
			0b00011111,
			0b00011111,
			0b00011111,
			0b00000000
	};
    1bda:	ce 01       	movw	r24, r28
    1bdc:	81 57       	subi	r24, 0x71	; 113
    1bde:	9f 4f       	sbci	r25, 0xFF	; 255
    1be0:	cf 54       	subi	r28, 0x4F	; 79
    1be2:	df 4f       	sbci	r29, 0xFF	; 255
    1be4:	99 83       	std	Y+1, r25	; 0x01
    1be6:	88 83       	st	Y, r24
    1be8:	c1 5b       	subi	r28, 0xB1	; 177
    1bea:	d0 40       	sbci	r29, 0x00	; 0
    1bec:	81 e1       	ldi	r24, 0x11	; 17
    1bee:	91 e0       	ldi	r25, 0x01	; 1
    1bf0:	cd 54       	subi	r28, 0x4D	; 77
    1bf2:	df 4f       	sbci	r29, 0xFF	; 255
    1bf4:	99 83       	std	Y+1, r25	; 0x01
    1bf6:	88 83       	st	Y, r24
    1bf8:	c3 5b       	subi	r28, 0xB3	; 179
    1bfa:	d0 40       	sbci	r29, 0x00	; 0
    1bfc:	98 e0       	ldi	r25, 0x08	; 8
    1bfe:	cb 54       	subi	r28, 0x4B	; 75
    1c00:	df 4f       	sbci	r29, 0xFF	; 255
    1c02:	98 83       	st	Y, r25
    1c04:	c5 5b       	subi	r28, 0xB5	; 181
    1c06:	d0 40       	sbci	r29, 0x00	; 0
    1c08:	cd 54       	subi	r28, 0x4D	; 77
    1c0a:	df 4f       	sbci	r29, 0xFF	; 255
    1c0c:	e8 81       	ld	r30, Y
    1c0e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c10:	c3 5b       	subi	r28, 0xB3	; 179
    1c12:	d0 40       	sbci	r29, 0x00	; 0
    1c14:	00 80       	ld	r0, Z
    1c16:	cd 54       	subi	r28, 0x4D	; 77
    1c18:	df 4f       	sbci	r29, 0xFF	; 255
    1c1a:	88 81       	ld	r24, Y
    1c1c:	99 81       	ldd	r25, Y+1	; 0x01
    1c1e:	c3 5b       	subi	r28, 0xB3	; 179
    1c20:	d0 40       	sbci	r29, 0x00	; 0
    1c22:	01 96       	adiw	r24, 0x01	; 1
    1c24:	cd 54       	subi	r28, 0x4D	; 77
    1c26:	df 4f       	sbci	r29, 0xFF	; 255
    1c28:	99 83       	std	Y+1, r25	; 0x01
    1c2a:	88 83       	st	Y, r24
    1c2c:	c3 5b       	subi	r28, 0xB3	; 179
    1c2e:	d0 40       	sbci	r29, 0x00	; 0
    1c30:	cf 54       	subi	r28, 0x4F	; 79
    1c32:	df 4f       	sbci	r29, 0xFF	; 255
    1c34:	e8 81       	ld	r30, Y
    1c36:	f9 81       	ldd	r31, Y+1	; 0x01
    1c38:	c1 5b       	subi	r28, 0xB1	; 177
    1c3a:	d0 40       	sbci	r29, 0x00	; 0
    1c3c:	00 82       	st	Z, r0
    1c3e:	cf 54       	subi	r28, 0x4F	; 79
    1c40:	df 4f       	sbci	r29, 0xFF	; 255
    1c42:	88 81       	ld	r24, Y
    1c44:	99 81       	ldd	r25, Y+1	; 0x01
    1c46:	c1 5b       	subi	r28, 0xB1	; 177
    1c48:	d0 40       	sbci	r29, 0x00	; 0
    1c4a:	01 96       	adiw	r24, 0x01	; 1
    1c4c:	cf 54       	subi	r28, 0x4F	; 79
    1c4e:	df 4f       	sbci	r29, 0xFF	; 255
    1c50:	99 83       	std	Y+1, r25	; 0x01
    1c52:	88 83       	st	Y, r24
    1c54:	c1 5b       	subi	r28, 0xB1	; 177
    1c56:	d0 40       	sbci	r29, 0x00	; 0
    1c58:	cb 54       	subi	r28, 0x4B	; 75
    1c5a:	df 4f       	sbci	r29, 0xFF	; 255
    1c5c:	98 81       	ld	r25, Y
    1c5e:	c5 5b       	subi	r28, 0xB5	; 181
    1c60:	d0 40       	sbci	r29, 0x00	; 0
    1c62:	91 50       	subi	r25, 0x01	; 1
    1c64:	cb 54       	subi	r28, 0x4B	; 75
    1c66:	df 4f       	sbci	r29, 0xFF	; 255
    1c68:	98 83       	st	Y, r25
    1c6a:	c5 5b       	subi	r28, 0xB5	; 181
    1c6c:	d0 40       	sbci	r29, 0x00	; 0
    1c6e:	cb 54       	subi	r28, 0x4B	; 75
    1c70:	df 4f       	sbci	r29, 0xFF	; 255
    1c72:	e8 81       	ld	r30, Y
    1c74:	c5 5b       	subi	r28, 0xB5	; 181
    1c76:	d0 40       	sbci	r29, 0x00	; 0
    1c78:	ee 23       	and	r30, r30
    1c7a:	31 f6       	brne	.-116    	; 0x1c08 <main+0x18c>
			0b00000000,
			0b00011111,
			0b00011111,
			0b00000000,
			0b00000000
	};
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	89 56       	subi	r24, 0x69	; 105
    1c80:	9f 4f       	sbci	r25, 0xFF	; 255
    1c82:	ca 54       	subi	r28, 0x4A	; 74
    1c84:	df 4f       	sbci	r29, 0xFF	; 255
    1c86:	99 83       	std	Y+1, r25	; 0x01
    1c88:	88 83       	st	Y, r24
    1c8a:	c6 5b       	subi	r28, 0xB6	; 182
    1c8c:	d0 40       	sbci	r29, 0x00	; 0
    1c8e:	89 e0       	ldi	r24, 0x09	; 9
    1c90:	91 e0       	ldi	r25, 0x01	; 1
    1c92:	c8 54       	subi	r28, 0x48	; 72
    1c94:	df 4f       	sbci	r29, 0xFF	; 255
    1c96:	99 83       	std	Y+1, r25	; 0x01
    1c98:	88 83       	st	Y, r24
    1c9a:	c8 5b       	subi	r28, 0xB8	; 184
    1c9c:	d0 40       	sbci	r29, 0x00	; 0
    1c9e:	98 e0       	ldi	r25, 0x08	; 8
    1ca0:	c6 54       	subi	r28, 0x46	; 70
    1ca2:	df 4f       	sbci	r29, 0xFF	; 255
    1ca4:	98 83       	st	Y, r25
    1ca6:	ca 5b       	subi	r28, 0xBA	; 186
    1ca8:	d0 40       	sbci	r29, 0x00	; 0
    1caa:	c8 54       	subi	r28, 0x48	; 72
    1cac:	df 4f       	sbci	r29, 0xFF	; 255
    1cae:	e8 81       	ld	r30, Y
    1cb0:	f9 81       	ldd	r31, Y+1	; 0x01
    1cb2:	c8 5b       	subi	r28, 0xB8	; 184
    1cb4:	d0 40       	sbci	r29, 0x00	; 0
    1cb6:	00 80       	ld	r0, Z
    1cb8:	c8 54       	subi	r28, 0x48	; 72
    1cba:	df 4f       	sbci	r29, 0xFF	; 255
    1cbc:	88 81       	ld	r24, Y
    1cbe:	99 81       	ldd	r25, Y+1	; 0x01
    1cc0:	c8 5b       	subi	r28, 0xB8	; 184
    1cc2:	d0 40       	sbci	r29, 0x00	; 0
    1cc4:	01 96       	adiw	r24, 0x01	; 1
    1cc6:	c8 54       	subi	r28, 0x48	; 72
    1cc8:	df 4f       	sbci	r29, 0xFF	; 255
    1cca:	99 83       	std	Y+1, r25	; 0x01
    1ccc:	88 83       	st	Y, r24
    1cce:	c8 5b       	subi	r28, 0xB8	; 184
    1cd0:	d0 40       	sbci	r29, 0x00	; 0
    1cd2:	ca 54       	subi	r28, 0x4A	; 74
    1cd4:	df 4f       	sbci	r29, 0xFF	; 255
    1cd6:	e8 81       	ld	r30, Y
    1cd8:	f9 81       	ldd	r31, Y+1	; 0x01
    1cda:	c6 5b       	subi	r28, 0xB6	; 182
    1cdc:	d0 40       	sbci	r29, 0x00	; 0
    1cde:	00 82       	st	Z, r0
    1ce0:	ca 54       	subi	r28, 0x4A	; 74
    1ce2:	df 4f       	sbci	r29, 0xFF	; 255
    1ce4:	88 81       	ld	r24, Y
    1ce6:	99 81       	ldd	r25, Y+1	; 0x01
    1ce8:	c6 5b       	subi	r28, 0xB6	; 182
    1cea:	d0 40       	sbci	r29, 0x00	; 0
    1cec:	01 96       	adiw	r24, 0x01	; 1
    1cee:	ca 54       	subi	r28, 0x4A	; 74
    1cf0:	df 4f       	sbci	r29, 0xFF	; 255
    1cf2:	99 83       	std	Y+1, r25	; 0x01
    1cf4:	88 83       	st	Y, r24
    1cf6:	c6 5b       	subi	r28, 0xB6	; 182
    1cf8:	d0 40       	sbci	r29, 0x00	; 0
    1cfa:	c6 54       	subi	r28, 0x46	; 70
    1cfc:	df 4f       	sbci	r29, 0xFF	; 255
    1cfe:	98 81       	ld	r25, Y
    1d00:	ca 5b       	subi	r28, 0xBA	; 186
    1d02:	d0 40       	sbci	r29, 0x00	; 0
    1d04:	91 50       	subi	r25, 0x01	; 1
    1d06:	c6 54       	subi	r28, 0x46	; 70
    1d08:	df 4f       	sbci	r29, 0xFF	; 255
    1d0a:	98 83       	st	Y, r25
    1d0c:	ca 5b       	subi	r28, 0xBA	; 186
    1d0e:	d0 40       	sbci	r29, 0x00	; 0
    1d10:	c6 54       	subi	r28, 0x46	; 70
    1d12:	df 4f       	sbci	r29, 0xFF	; 255
    1d14:	e8 81       	ld	r30, Y
    1d16:	ca 5b       	subi	r28, 0xBA	; 186
    1d18:	d0 40       	sbci	r29, 0x00	; 0
    1d1a:	ee 23       	and	r30, r30
    1d1c:	31 f6       	brne	.-116    	; 0x1caa <main+0x22e>
				0b00010101,
				0b00001010,
				0b00000100,
				0b00000000,
				0b00000000
		};
    1d1e:	ce 01       	movw	r24, r28
    1d20:	81 56       	subi	r24, 0x61	; 97
    1d22:	9f 4f       	sbci	r25, 0xFF	; 255
    1d24:	c5 54       	subi	r28, 0x45	; 69
    1d26:	df 4f       	sbci	r29, 0xFF	; 255
    1d28:	99 83       	std	Y+1, r25	; 0x01
    1d2a:	88 83       	st	Y, r24
    1d2c:	cb 5b       	subi	r28, 0xBB	; 187
    1d2e:	d0 40       	sbci	r29, 0x00	; 0
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	91 e0       	ldi	r25, 0x01	; 1
    1d34:	c3 54       	subi	r28, 0x43	; 67
    1d36:	df 4f       	sbci	r29, 0xFF	; 255
    1d38:	99 83       	std	Y+1, r25	; 0x01
    1d3a:	88 83       	st	Y, r24
    1d3c:	cd 5b       	subi	r28, 0xBD	; 189
    1d3e:	d0 40       	sbci	r29, 0x00	; 0
    1d40:	98 e0       	ldi	r25, 0x08	; 8
    1d42:	c1 54       	subi	r28, 0x41	; 65
    1d44:	df 4f       	sbci	r29, 0xFF	; 255
    1d46:	98 83       	st	Y, r25
    1d48:	cf 5b       	subi	r28, 0xBF	; 191
    1d4a:	d0 40       	sbci	r29, 0x00	; 0
    1d4c:	c3 54       	subi	r28, 0x43	; 67
    1d4e:	df 4f       	sbci	r29, 0xFF	; 255
    1d50:	e8 81       	ld	r30, Y
    1d52:	f9 81       	ldd	r31, Y+1	; 0x01
    1d54:	cd 5b       	subi	r28, 0xBD	; 189
    1d56:	d0 40       	sbci	r29, 0x00	; 0
    1d58:	00 80       	ld	r0, Z
    1d5a:	c3 54       	subi	r28, 0x43	; 67
    1d5c:	df 4f       	sbci	r29, 0xFF	; 255
    1d5e:	88 81       	ld	r24, Y
    1d60:	99 81       	ldd	r25, Y+1	; 0x01
    1d62:	cd 5b       	subi	r28, 0xBD	; 189
    1d64:	d0 40       	sbci	r29, 0x00	; 0
    1d66:	01 96       	adiw	r24, 0x01	; 1
    1d68:	c3 54       	subi	r28, 0x43	; 67
    1d6a:	df 4f       	sbci	r29, 0xFF	; 255
    1d6c:	99 83       	std	Y+1, r25	; 0x01
    1d6e:	88 83       	st	Y, r24
    1d70:	cd 5b       	subi	r28, 0xBD	; 189
    1d72:	d0 40       	sbci	r29, 0x00	; 0
    1d74:	c5 54       	subi	r28, 0x45	; 69
    1d76:	df 4f       	sbci	r29, 0xFF	; 255
    1d78:	e8 81       	ld	r30, Y
    1d7a:	f9 81       	ldd	r31, Y+1	; 0x01
    1d7c:	cb 5b       	subi	r28, 0xBB	; 187
    1d7e:	d0 40       	sbci	r29, 0x00	; 0
    1d80:	00 82       	st	Z, r0
    1d82:	c5 54       	subi	r28, 0x45	; 69
    1d84:	df 4f       	sbci	r29, 0xFF	; 255
    1d86:	88 81       	ld	r24, Y
    1d88:	99 81       	ldd	r25, Y+1	; 0x01
    1d8a:	cb 5b       	subi	r28, 0xBB	; 187
    1d8c:	d0 40       	sbci	r29, 0x00	; 0
    1d8e:	01 96       	adiw	r24, 0x01	; 1
    1d90:	c5 54       	subi	r28, 0x45	; 69
    1d92:	df 4f       	sbci	r29, 0xFF	; 255
    1d94:	99 83       	std	Y+1, r25	; 0x01
    1d96:	88 83       	st	Y, r24
    1d98:	cb 5b       	subi	r28, 0xBB	; 187
    1d9a:	d0 40       	sbci	r29, 0x00	; 0
    1d9c:	c1 54       	subi	r28, 0x41	; 65
    1d9e:	df 4f       	sbci	r29, 0xFF	; 255
    1da0:	98 81       	ld	r25, Y
    1da2:	cf 5b       	subi	r28, 0xBF	; 191
    1da4:	d0 40       	sbci	r29, 0x00	; 0
    1da6:	91 50       	subi	r25, 0x01	; 1
    1da8:	c1 54       	subi	r28, 0x41	; 65
    1daa:	df 4f       	sbci	r29, 0xFF	; 255
    1dac:	98 83       	st	Y, r25
    1dae:	cf 5b       	subi	r28, 0xBF	; 191
    1db0:	d0 40       	sbci	r29, 0x00	; 0
    1db2:	c1 54       	subi	r28, 0x41	; 65
    1db4:	df 4f       	sbci	r29, 0xFF	; 255
    1db6:	e8 81       	ld	r30, Y
    1db8:	cf 5b       	subi	r28, 0xBF	; 191
    1dba:	d0 40       	sbci	r29, 0x00	; 0
    1dbc:	ee 23       	and	r30, r30
    1dbe:	31 f6       	brne	.-116    	; 0x1d4c <main+0x2d0>
	CLCD_voidInit();
    1dc0:	0e 94 2f 0a 	call	0x145e	; 0x145e <CLCD_voidInit>

	CLCD_GoTOXY(0,1);
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	61 e0       	ldi	r22, 0x01	; 1
    1dc8:	0e 94 2a 0c 	call	0x1854	; 0x1854 <CLCD_GoTOXY>
	CLCD_voidSendString("Hi This is bing !");
    1dcc:	80 e6       	ldi	r24, 0x60	; 96
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	0e 94 56 0c 	call	0x18ac	; 0x18ac <CLCD_voidSendString>
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e5 58       	subi	r30, 0x85	; 133
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	a0 ea       	ldi	r26, 0xA0	; 160
    1de0:	b1 e4       	ldi	r27, 0x41	; 65
    1de2:	80 83       	st	Z, r24
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	a2 83       	std	Z+2, r26	; 0x02
    1de8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dea:	8e 01       	movw	r16, r28
    1dec:	09 58       	subi	r16, 0x89	; 137
    1dee:	1f 4f       	sbci	r17, 0xFF	; 255
    1df0:	fe 01       	movw	r30, r28
    1df2:	e5 58       	subi	r30, 0x85	; 133
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	4a ef       	ldi	r20, 0xFA	; 250
    1e04:	54 e4       	ldi	r21, 0x44	; 68
    1e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	f8 01       	movw	r30, r16
    1e10:	80 83       	st	Z, r24
    1e12:	91 83       	std	Z+1, r25	; 0x01
    1e14:	a2 83       	std	Z+2, r26	; 0x02
    1e16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e9 58       	subi	r30, 0x89	; 137
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	60 81       	ld	r22, Z
    1e20:	71 81       	ldd	r23, Z+1	; 0x01
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	93 81       	ldd	r25, Z+3	; 0x03
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e8       	ldi	r20, 0x80	; 128
    1e2c:	5f e3       	ldi	r21, 0x3F	; 63
    1e2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e32:	88 23       	and	r24, r24
    1e34:	44 f4       	brge	.+16     	; 0x1e46 <main+0x3ca>
		__ticks = 1;
    1e36:	fe 01       	movw	r30, r28
    1e38:	eb 58       	subi	r30, 0x8B	; 139
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	91 83       	std	Z+1, r25	; 0x01
    1e42:	80 83       	st	Z, r24
    1e44:	64 c0       	rjmp	.+200    	; 0x1f0e <main+0x492>
	else if (__tmp > 65535)
    1e46:	fe 01       	movw	r30, r28
    1e48:	e9 58       	subi	r30, 0x89	; 137
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	60 81       	ld	r22, Z
    1e4e:	71 81       	ldd	r23, Z+1	; 0x01
    1e50:	82 81       	ldd	r24, Z+2	; 0x02
    1e52:	93 81       	ldd	r25, Z+3	; 0x03
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	3f ef       	ldi	r19, 0xFF	; 255
    1e58:	4f e7       	ldi	r20, 0x7F	; 127
    1e5a:	57 e4       	ldi	r21, 0x47	; 71
    1e5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e60:	18 16       	cp	r1, r24
    1e62:	0c f0       	brlt	.+2      	; 0x1e66 <main+0x3ea>
    1e64:	43 c0       	rjmp	.+134    	; 0x1eec <main+0x470>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e66:	fe 01       	movw	r30, r28
    1e68:	e5 58       	subi	r30, 0x85	; 133
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	60 81       	ld	r22, Z
    1e6e:	71 81       	ldd	r23, Z+1	; 0x01
    1e70:	82 81       	ldd	r24, Z+2	; 0x02
    1e72:	93 81       	ldd	r25, Z+3	; 0x03
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e2       	ldi	r20, 0x20	; 32
    1e7a:	51 e4       	ldi	r21, 0x41	; 65
    1e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	8e 01       	movw	r16, r28
    1e86:	0b 58       	subi	r16, 0x8B	; 139
    1e88:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8a:	bc 01       	movw	r22, r24
    1e8c:	cd 01       	movw	r24, r26
    1e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	f8 01       	movw	r30, r16
    1e98:	91 83       	std	Z+1, r25	; 0x01
    1e9a:	80 83       	st	Z, r24
    1e9c:	1f c0       	rjmp	.+62     	; 0x1edc <main+0x460>
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	ed 58       	subi	r30, 0x8D	; 141
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	88 ec       	ldi	r24, 0xC8	; 200
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	91 83       	std	Z+1, r25	; 0x01
    1eaa:	80 83       	st	Z, r24
    1eac:	fe 01       	movw	r30, r28
    1eae:	ed 58       	subi	r30, 0x8D	; 141
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	80 81       	ld	r24, Z
    1eb4:	91 81       	ldd	r25, Z+1	; 0x01
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <main+0x43a>
    1eba:	fe 01       	movw	r30, r28
    1ebc:	ed 58       	subi	r30, 0x8D	; 141
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	91 83       	std	Z+1, r25	; 0x01
    1ec2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec4:	de 01       	movw	r26, r28
    1ec6:	ab 58       	subi	r26, 0x8B	; 139
    1ec8:	bf 4f       	sbci	r27, 0xFF	; 255
    1eca:	fe 01       	movw	r30, r28
    1ecc:	eb 58       	subi	r30, 0x8B	; 139
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 81       	ld	r24, Z
    1ed2:	91 81       	ldd	r25, Z+1	; 0x01
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	11 96       	adiw	r26, 0x01	; 1
    1ed8:	9c 93       	st	X, r25
    1eda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1edc:	fe 01       	movw	r30, r28
    1ede:	eb 58       	subi	r30, 0x8B	; 139
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 81       	ld	r24, Z
    1ee4:	91 81       	ldd	r25, Z+1	; 0x01
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	d1 f6       	brne	.-76     	; 0x1e9e <main+0x422>
    1eea:	27 c0       	rjmp	.+78     	; 0x1f3a <main+0x4be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eec:	8e 01       	movw	r16, r28
    1eee:	0b 58       	subi	r16, 0x8B	; 139
    1ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	e9 58       	subi	r30, 0x89	; 137
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	60 81       	ld	r22, Z
    1efa:	71 81       	ldd	r23, Z+1	; 0x01
    1efc:	82 81       	ldd	r24, Z+2	; 0x02
    1efe:	93 81       	ldd	r25, Z+3	; 0x03
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	f8 01       	movw	r30, r16
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	80 83       	st	Z, r24
    1f0e:	de 01       	movw	r26, r28
    1f10:	af 58       	subi	r26, 0x8F	; 143
    1f12:	bf 4f       	sbci	r27, 0xFF	; 255
    1f14:	fe 01       	movw	r30, r28
    1f16:	eb 58       	subi	r30, 0x8B	; 139
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	80 81       	ld	r24, Z
    1f1c:	91 81       	ldd	r25, Z+1	; 0x01
    1f1e:	8d 93       	st	X+, r24
    1f20:	9c 93       	st	X, r25
    1f22:	fe 01       	movw	r30, r28
    1f24:	ef 58       	subi	r30, 0x8F	; 143
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	80 81       	ld	r24, Z
    1f2a:	91 81       	ldd	r25, Z+1	; 0x01
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <main+0x4b0>
    1f30:	fe 01       	movw	r30, r28
    1f32:	ef 58       	subi	r30, 0x8F	; 143
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	91 83       	std	Z+1, r25	; 0x01
    1f38:	80 83       	st	Z, r24
	_delay_ms(20);
	write_special_character(customChar1,0,1,8);
    1f3a:	ce 01       	movw	r24, r28
    1f3c:	81 58       	subi	r24, 0x81	; 129
    1f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f40:	60 e0       	ldi	r22, 0x00	; 0
    1f42:	41 e0       	ldi	r20, 0x01	; 1
    1f44:	28 e0       	ldi	r18, 0x08	; 8
    1f46:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <write_special_character>
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	e3 59       	subi	r30, 0x93	; 147
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	a8 ec       	ldi	r26, 0xC8	; 200
    1f56:	b2 e4       	ldi	r27, 0x42	; 66
    1f58:	80 83       	st	Z, r24
    1f5a:	91 83       	std	Z+1, r25	; 0x01
    1f5c:	a2 83       	std	Z+2, r26	; 0x02
    1f5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f60:	8e 01       	movw	r16, r28
    1f62:	07 59       	subi	r16, 0x97	; 151
    1f64:	1f 4f       	sbci	r17, 0xFF	; 255
    1f66:	fe 01       	movw	r30, r28
    1f68:	e3 59       	subi	r30, 0x93	; 147
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	60 81       	ld	r22, Z
    1f6e:	71 81       	ldd	r23, Z+1	; 0x01
    1f70:	82 81       	ldd	r24, Z+2	; 0x02
    1f72:	93 81       	ldd	r25, Z+3	; 0x03
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	4a ef       	ldi	r20, 0xFA	; 250
    1f7a:	54 e4       	ldi	r21, 0x44	; 68
    1f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	f8 01       	movw	r30, r16
    1f86:	80 83       	st	Z, r24
    1f88:	91 83       	std	Z+1, r25	; 0x01
    1f8a:	a2 83       	std	Z+2, r26	; 0x02
    1f8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f8e:	fe 01       	movw	r30, r28
    1f90:	e7 59       	subi	r30, 0x97	; 151
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	60 81       	ld	r22, Z
    1f96:	71 81       	ldd	r23, Z+1	; 0x01
    1f98:	82 81       	ldd	r24, Z+2	; 0x02
    1f9a:	93 81       	ldd	r25, Z+3	; 0x03
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e8       	ldi	r20, 0x80	; 128
    1fa2:	5f e3       	ldi	r21, 0x3F	; 63
    1fa4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa8:	88 23       	and	r24, r24
    1faa:	44 f4       	brge	.+16     	; 0x1fbc <main+0x540>
		__ticks = 1;
    1fac:	fe 01       	movw	r30, r28
    1fae:	e9 59       	subi	r30, 0x99	; 153
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	91 83       	std	Z+1, r25	; 0x01
    1fb8:	80 83       	st	Z, r24
    1fba:	64 c0       	rjmp	.+200    	; 0x2084 <main+0x608>
	else if (__tmp > 65535)
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	e7 59       	subi	r30, 0x97	; 151
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	60 81       	ld	r22, Z
    1fc4:	71 81       	ldd	r23, Z+1	; 0x01
    1fc6:	82 81       	ldd	r24, Z+2	; 0x02
    1fc8:	93 81       	ldd	r25, Z+3	; 0x03
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	3f ef       	ldi	r19, 0xFF	; 255
    1fce:	4f e7       	ldi	r20, 0x7F	; 127
    1fd0:	57 e4       	ldi	r21, 0x47	; 71
    1fd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fd6:	18 16       	cp	r1, r24
    1fd8:	0c f0       	brlt	.+2      	; 0x1fdc <main+0x560>
    1fda:	43 c0       	rjmp	.+134    	; 0x2062 <main+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fdc:	fe 01       	movw	r30, r28
    1fde:	e3 59       	subi	r30, 0x93	; 147
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	60 81       	ld	r22, Z
    1fe4:	71 81       	ldd	r23, Z+1	; 0x01
    1fe6:	82 81       	ldd	r24, Z+2	; 0x02
    1fe8:	93 81       	ldd	r25, Z+3	; 0x03
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e2       	ldi	r20, 0x20	; 32
    1ff0:	51 e4       	ldi	r21, 0x41	; 65
    1ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	8e 01       	movw	r16, r28
    1ffc:	09 59       	subi	r16, 0x99	; 153
    1ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    2000:	bc 01       	movw	r22, r24
    2002:	cd 01       	movw	r24, r26
    2004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	f8 01       	movw	r30, r16
    200e:	91 83       	std	Z+1, r25	; 0x01
    2010:	80 83       	st	Z, r24
    2012:	1f c0       	rjmp	.+62     	; 0x2052 <main+0x5d6>
    2014:	fe 01       	movw	r30, r28
    2016:	eb 59       	subi	r30, 0x9B	; 155
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	88 ec       	ldi	r24, 0xC8	; 200
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	91 83       	std	Z+1, r25	; 0x01
    2020:	80 83       	st	Z, r24
    2022:	fe 01       	movw	r30, r28
    2024:	eb 59       	subi	r30, 0x9B	; 155
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	80 81       	ld	r24, Z
    202a:	91 81       	ldd	r25, Z+1	; 0x01
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <main+0x5b0>
    2030:	fe 01       	movw	r30, r28
    2032:	eb 59       	subi	r30, 0x9B	; 155
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	91 83       	std	Z+1, r25	; 0x01
    2038:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203a:	de 01       	movw	r26, r28
    203c:	a9 59       	subi	r26, 0x99	; 153
    203e:	bf 4f       	sbci	r27, 0xFF	; 255
    2040:	fe 01       	movw	r30, r28
    2042:	e9 59       	subi	r30, 0x99	; 153
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	80 81       	ld	r24, Z
    2048:	91 81       	ldd	r25, Z+1	; 0x01
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	11 96       	adiw	r26, 0x01	; 1
    204e:	9c 93       	st	X, r25
    2050:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2052:	fe 01       	movw	r30, r28
    2054:	e9 59       	subi	r30, 0x99	; 153
    2056:	ff 4f       	sbci	r31, 0xFF	; 255
    2058:	80 81       	ld	r24, Z
    205a:	91 81       	ldd	r25, Z+1	; 0x01
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	d1 f6       	brne	.-76     	; 0x2014 <main+0x598>
    2060:	27 c0       	rjmp	.+78     	; 0x20b0 <main+0x634>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2062:	8e 01       	movw	r16, r28
    2064:	09 59       	subi	r16, 0x99	; 153
    2066:	1f 4f       	sbci	r17, 0xFF	; 255
    2068:	fe 01       	movw	r30, r28
    206a:	e7 59       	subi	r30, 0x97	; 151
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	60 81       	ld	r22, Z
    2070:	71 81       	ldd	r23, Z+1	; 0x01
    2072:	82 81       	ldd	r24, Z+2	; 0x02
    2074:	93 81       	ldd	r25, Z+3	; 0x03
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	f8 01       	movw	r30, r16
    2080:	91 83       	std	Z+1, r25	; 0x01
    2082:	80 83       	st	Z, r24
    2084:	de 01       	movw	r26, r28
    2086:	ad 59       	subi	r26, 0x9D	; 157
    2088:	bf 4f       	sbci	r27, 0xFF	; 255
    208a:	fe 01       	movw	r30, r28
    208c:	e9 59       	subi	r30, 0x99	; 153
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	80 81       	ld	r24, Z
    2092:	91 81       	ldd	r25, Z+1	; 0x01
    2094:	8d 93       	st	X+, r24
    2096:	9c 93       	st	X, r25
    2098:	fe 01       	movw	r30, r28
    209a:	ed 59       	subi	r30, 0x9D	; 157
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	80 81       	ld	r24, Z
    20a0:	91 81       	ldd	r25, Z+1	; 0x01
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <main+0x626>
    20a6:	fe 01       	movw	r30, r28
    20a8:	ed 59       	subi	r30, 0x9D	; 157
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	91 83       	std	Z+1, r25	; 0x01
    20ae:	80 83       	st	Z, r24
	_delay_ms(100);

	CLCD_Void_LCDClear();
    20b0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <CLCD_Void_LCDClear>
    20b4:	fe 01       	movw	r30, r28
    20b6:	e1 5a       	subi	r30, 0xA1	; 161
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	a8 ec       	ldi	r26, 0xC8	; 200
    20c0:	b2 e4       	ldi	r27, 0x42	; 66
    20c2:	80 83       	st	Z, r24
    20c4:	91 83       	std	Z+1, r25	; 0x01
    20c6:	a2 83       	std	Z+2, r26	; 0x02
    20c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ca:	8e 01       	movw	r16, r28
    20cc:	05 5a       	subi	r16, 0xA5	; 165
    20ce:	1f 4f       	sbci	r17, 0xFF	; 255
    20d0:	fe 01       	movw	r30, r28
    20d2:	e1 5a       	subi	r30, 0xA1	; 161
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	60 81       	ld	r22, Z
    20d8:	71 81       	ldd	r23, Z+1	; 0x01
    20da:	82 81       	ldd	r24, Z+2	; 0x02
    20dc:	93 81       	ldd	r25, Z+3	; 0x03
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	4a ef       	ldi	r20, 0xFA	; 250
    20e4:	54 e4       	ldi	r21, 0x44	; 68
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	f8 01       	movw	r30, r16
    20f0:	80 83       	st	Z, r24
    20f2:	91 83       	std	Z+1, r25	; 0x01
    20f4:	a2 83       	std	Z+2, r26	; 0x02
    20f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20f8:	fe 01       	movw	r30, r28
    20fa:	e5 5a       	subi	r30, 0xA5	; 165
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	60 81       	ld	r22, Z
    2100:	71 81       	ldd	r23, Z+1	; 0x01
    2102:	82 81       	ldd	r24, Z+2	; 0x02
    2104:	93 81       	ldd	r25, Z+3	; 0x03
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e8       	ldi	r20, 0x80	; 128
    210c:	5f e3       	ldi	r21, 0x3F	; 63
    210e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2112:	88 23       	and	r24, r24
    2114:	44 f4       	brge	.+16     	; 0x2126 <main+0x6aa>
		__ticks = 1;
    2116:	fe 01       	movw	r30, r28
    2118:	e7 5a       	subi	r30, 0xA7	; 167
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	91 83       	std	Z+1, r25	; 0x01
    2122:	80 83       	st	Z, r24
    2124:	64 c0       	rjmp	.+200    	; 0x21ee <main+0x772>
	else if (__tmp > 65535)
    2126:	fe 01       	movw	r30, r28
    2128:	e5 5a       	subi	r30, 0xA5	; 165
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	60 81       	ld	r22, Z
    212e:	71 81       	ldd	r23, Z+1	; 0x01
    2130:	82 81       	ldd	r24, Z+2	; 0x02
    2132:	93 81       	ldd	r25, Z+3	; 0x03
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	3f ef       	ldi	r19, 0xFF	; 255
    2138:	4f e7       	ldi	r20, 0x7F	; 127
    213a:	57 e4       	ldi	r21, 0x47	; 71
    213c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2140:	18 16       	cp	r1, r24
    2142:	0c f0       	brlt	.+2      	; 0x2146 <main+0x6ca>
    2144:	43 c0       	rjmp	.+134    	; 0x21cc <main+0x750>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2146:	fe 01       	movw	r30, r28
    2148:	e1 5a       	subi	r30, 0xA1	; 161
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	60 81       	ld	r22, Z
    214e:	71 81       	ldd	r23, Z+1	; 0x01
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	93 81       	ldd	r25, Z+3	; 0x03
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	8e 01       	movw	r16, r28
    2166:	07 5a       	subi	r16, 0xA7	; 167
    2168:	1f 4f       	sbci	r17, 0xFF	; 255
    216a:	bc 01       	movw	r22, r24
    216c:	cd 01       	movw	r24, r26
    216e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	f8 01       	movw	r30, r16
    2178:	91 83       	std	Z+1, r25	; 0x01
    217a:	80 83       	st	Z, r24
    217c:	1f c0       	rjmp	.+62     	; 0x21bc <main+0x740>
    217e:	fe 01       	movw	r30, r28
    2180:	e9 5a       	subi	r30, 0xA9	; 169
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	88 ec       	ldi	r24, 0xC8	; 200
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	91 83       	std	Z+1, r25	; 0x01
    218a:	80 83       	st	Z, r24
    218c:	fe 01       	movw	r30, r28
    218e:	e9 5a       	subi	r30, 0xA9	; 169
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	80 81       	ld	r24, Z
    2194:	91 81       	ldd	r25, Z+1	; 0x01
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	f1 f7       	brne	.-4      	; 0x2196 <main+0x71a>
    219a:	fe 01       	movw	r30, r28
    219c:	e9 5a       	subi	r30, 0xA9	; 169
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	91 83       	std	Z+1, r25	; 0x01
    21a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a4:	de 01       	movw	r26, r28
    21a6:	a7 5a       	subi	r26, 0xA7	; 167
    21a8:	bf 4f       	sbci	r27, 0xFF	; 255
    21aa:	fe 01       	movw	r30, r28
    21ac:	e7 5a       	subi	r30, 0xA7	; 167
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	80 81       	ld	r24, Z
    21b2:	91 81       	ldd	r25, Z+1	; 0x01
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	11 96       	adiw	r26, 0x01	; 1
    21b8:	9c 93       	st	X, r25
    21ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21bc:	fe 01       	movw	r30, r28
    21be:	e7 5a       	subi	r30, 0xA7	; 167
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	80 81       	ld	r24, Z
    21c4:	91 81       	ldd	r25, Z+1	; 0x01
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	d1 f6       	brne	.-76     	; 0x217e <main+0x702>
    21ca:	27 c0       	rjmp	.+78     	; 0x221a <main+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21cc:	8e 01       	movw	r16, r28
    21ce:	07 5a       	subi	r16, 0xA7	; 167
    21d0:	1f 4f       	sbci	r17, 0xFF	; 255
    21d2:	fe 01       	movw	r30, r28
    21d4:	e5 5a       	subi	r30, 0xA5	; 165
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	60 81       	ld	r22, Z
    21da:	71 81       	ldd	r23, Z+1	; 0x01
    21dc:	82 81       	ldd	r24, Z+2	; 0x02
    21de:	93 81       	ldd	r25, Z+3	; 0x03
    21e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	f8 01       	movw	r30, r16
    21ea:	91 83       	std	Z+1, r25	; 0x01
    21ec:	80 83       	st	Z, r24
    21ee:	de 01       	movw	r26, r28
    21f0:	ab 5a       	subi	r26, 0xAB	; 171
    21f2:	bf 4f       	sbci	r27, 0xFF	; 255
    21f4:	fe 01       	movw	r30, r28
    21f6:	e7 5a       	subi	r30, 0xA7	; 167
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	80 81       	ld	r24, Z
    21fc:	91 81       	ldd	r25, Z+1	; 0x01
    21fe:	8d 93       	st	X+, r24
    2200:	9c 93       	st	X, r25
    2202:	fe 01       	movw	r30, r28
    2204:	eb 5a       	subi	r30, 0xAB	; 171
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	80 81       	ld	r24, Z
    220a:	91 81       	ldd	r25, Z+1	; 0x01
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	f1 f7       	brne	.-4      	; 0x220c <main+0x790>
    2210:	fe 01       	movw	r30, r28
    2212:	eb 5a       	subi	r30, 0xAB	; 171
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	91 83       	std	Z+1, r25	; 0x01
    2218:	80 83       	st	Z, r24
	_delay_ms(100);

	CLCD_GoTOXY(0,1);
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	61 e0       	ldi	r22, 0x01	; 1
    221e:	0e 94 2a 0c 	call	0x1854	; 0x1854 <CLCD_GoTOXY>
	CLCD_voidSendString("bing had a dream to be ");
    2222:	82 e7       	ldi	r24, 0x72	; 114
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	0e 94 56 0c 	call	0x18ac	; 0x18ac <CLCD_voidSendString>
	CLCD_voidSendString("a singer ");
    222a:	8a e8       	ldi	r24, 0x8A	; 138
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	0e 94 56 0c 	call	0x18ac	; 0x18ac <CLCD_voidSendString>
	write_special_character(customchar2,1,2,14);
    2232:	ce 01       	movw	r24, r28
    2234:	89 57       	subi	r24, 0x79	; 121
    2236:	9f 4f       	sbci	r25, 0xFF	; 255
    2238:	61 e0       	ldi	r22, 0x01	; 1
    223a:	42 e0       	ldi	r20, 0x02	; 2
    223c:	2e e0       	ldi	r18, 0x0E	; 14
    223e:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <write_special_character>
    2242:	fe 01       	movw	r30, r28
    2244:	ef 5a       	subi	r30, 0xAF	; 175
    2246:	ff 4f       	sbci	r31, 0xFF	; 255
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	a8 ec       	ldi	r26, 0xC8	; 200
    224e:	b2 e4       	ldi	r27, 0x42	; 66
    2250:	80 83       	st	Z, r24
    2252:	91 83       	std	Z+1, r25	; 0x01
    2254:	a2 83       	std	Z+2, r26	; 0x02
    2256:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2258:	8e 01       	movw	r16, r28
    225a:	03 5b       	subi	r16, 0xB3	; 179
    225c:	1f 4f       	sbci	r17, 0xFF	; 255
    225e:	fe 01       	movw	r30, r28
    2260:	ef 5a       	subi	r30, 0xAF	; 175
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	60 81       	ld	r22, Z
    2266:	71 81       	ldd	r23, Z+1	; 0x01
    2268:	82 81       	ldd	r24, Z+2	; 0x02
    226a:	93 81       	ldd	r25, Z+3	; 0x03
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	4a ef       	ldi	r20, 0xFA	; 250
    2272:	54 e4       	ldi	r21, 0x44	; 68
    2274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	f8 01       	movw	r30, r16
    227e:	80 83       	st	Z, r24
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	a2 83       	std	Z+2, r26	; 0x02
    2284:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2286:	fe 01       	movw	r30, r28
    2288:	e3 5b       	subi	r30, 0xB3	; 179
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	60 81       	ld	r22, Z
    228e:	71 81       	ldd	r23, Z+1	; 0x01
    2290:	82 81       	ldd	r24, Z+2	; 0x02
    2292:	93 81       	ldd	r25, Z+3	; 0x03
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f e3       	ldi	r21, 0x3F	; 63
    229c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a0:	88 23       	and	r24, r24
    22a2:	44 f4       	brge	.+16     	; 0x22b4 <main+0x838>
		__ticks = 1;
    22a4:	fe 01       	movw	r30, r28
    22a6:	e5 5b       	subi	r30, 0xB5	; 181
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	91 83       	std	Z+1, r25	; 0x01
    22b0:	80 83       	st	Z, r24
    22b2:	64 c0       	rjmp	.+200    	; 0x237c <main+0x900>
	else if (__tmp > 65535)
    22b4:	fe 01       	movw	r30, r28
    22b6:	e3 5b       	subi	r30, 0xB3	; 179
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	60 81       	ld	r22, Z
    22bc:	71 81       	ldd	r23, Z+1	; 0x01
    22be:	82 81       	ldd	r24, Z+2	; 0x02
    22c0:	93 81       	ldd	r25, Z+3	; 0x03
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	3f ef       	ldi	r19, 0xFF	; 255
    22c6:	4f e7       	ldi	r20, 0x7F	; 127
    22c8:	57 e4       	ldi	r21, 0x47	; 71
    22ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ce:	18 16       	cp	r1, r24
    22d0:	0c f0       	brlt	.+2      	; 0x22d4 <main+0x858>
    22d2:	43 c0       	rjmp	.+134    	; 0x235a <main+0x8de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d4:	fe 01       	movw	r30, r28
    22d6:	ef 5a       	subi	r30, 0xAF	; 175
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	60 81       	ld	r22, Z
    22dc:	71 81       	ldd	r23, Z+1	; 0x01
    22de:	82 81       	ldd	r24, Z+2	; 0x02
    22e0:	93 81       	ldd	r25, Z+3	; 0x03
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e2       	ldi	r20, 0x20	; 32
    22e8:	51 e4       	ldi	r21, 0x41	; 65
    22ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	8e 01       	movw	r16, r28
    22f4:	05 5b       	subi	r16, 0xB5	; 181
    22f6:	1f 4f       	sbci	r17, 0xFF	; 255
    22f8:	bc 01       	movw	r22, r24
    22fa:	cd 01       	movw	r24, r26
    22fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	f8 01       	movw	r30, r16
    2306:	91 83       	std	Z+1, r25	; 0x01
    2308:	80 83       	st	Z, r24
    230a:	1f c0       	rjmp	.+62     	; 0x234a <main+0x8ce>
    230c:	fe 01       	movw	r30, r28
    230e:	e7 5b       	subi	r30, 0xB7	; 183
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	88 ec       	ldi	r24, 0xC8	; 200
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	91 83       	std	Z+1, r25	; 0x01
    2318:	80 83       	st	Z, r24
    231a:	fe 01       	movw	r30, r28
    231c:	e7 5b       	subi	r30, 0xB7	; 183
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	80 81       	ld	r24, Z
    2322:	91 81       	ldd	r25, Z+1	; 0x01
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	f1 f7       	brne	.-4      	; 0x2324 <main+0x8a8>
    2328:	fe 01       	movw	r30, r28
    232a:	e7 5b       	subi	r30, 0xB7	; 183
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2332:	de 01       	movw	r26, r28
    2334:	a5 5b       	subi	r26, 0xB5	; 181
    2336:	bf 4f       	sbci	r27, 0xFF	; 255
    2338:	fe 01       	movw	r30, r28
    233a:	e5 5b       	subi	r30, 0xB5	; 181
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	80 81       	ld	r24, Z
    2340:	91 81       	ldd	r25, Z+1	; 0x01
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	11 96       	adiw	r26, 0x01	; 1
    2346:	9c 93       	st	X, r25
    2348:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234a:	fe 01       	movw	r30, r28
    234c:	e5 5b       	subi	r30, 0xB5	; 181
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	80 81       	ld	r24, Z
    2352:	91 81       	ldd	r25, Z+1	; 0x01
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	d1 f6       	brne	.-76     	; 0x230c <main+0x890>
    2358:	27 c0       	rjmp	.+78     	; 0x23a8 <main+0x92c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235a:	8e 01       	movw	r16, r28
    235c:	05 5b       	subi	r16, 0xB5	; 181
    235e:	1f 4f       	sbci	r17, 0xFF	; 255
    2360:	fe 01       	movw	r30, r28
    2362:	e3 5b       	subi	r30, 0xB3	; 179
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	60 81       	ld	r22, Z
    2368:	71 81       	ldd	r23, Z+1	; 0x01
    236a:	82 81       	ldd	r24, Z+2	; 0x02
    236c:	93 81       	ldd	r25, Z+3	; 0x03
    236e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	f8 01       	movw	r30, r16
    2378:	91 83       	std	Z+1, r25	; 0x01
    237a:	80 83       	st	Z, r24
    237c:	de 01       	movw	r26, r28
    237e:	a9 5b       	subi	r26, 0xB9	; 185
    2380:	bf 4f       	sbci	r27, 0xFF	; 255
    2382:	fe 01       	movw	r30, r28
    2384:	e5 5b       	subi	r30, 0xB5	; 181
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	80 81       	ld	r24, Z
    238a:	91 81       	ldd	r25, Z+1	; 0x01
    238c:	8d 93       	st	X+, r24
    238e:	9c 93       	st	X, r25
    2390:	fe 01       	movw	r30, r28
    2392:	e9 5b       	subi	r30, 0xB9	; 185
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	80 81       	ld	r24, Z
    2398:	91 81       	ldd	r25, Z+1	; 0x01
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <main+0x91e>
    239e:	fe 01       	movw	r30, r28
    23a0:	e9 5b       	subi	r30, 0xB9	; 185
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	91 83       	std	Z+1, r25	; 0x01
    23a6:	80 83       	st	Z, r24
	_delay_ms(100);


	CLCD_Void_LCDClear();
    23a8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <CLCD_Void_LCDClear>
    23ac:	fe 01       	movw	r30, r28
    23ae:	ed 5b       	subi	r30, 0xBD	; 189
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	a8 ec       	ldi	r26, 0xC8	; 200
    23b8:	b2 e4       	ldi	r27, 0x42	; 66
    23ba:	80 83       	st	Z, r24
    23bc:	91 83       	std	Z+1, r25	; 0x01
    23be:	a2 83       	std	Z+2, r26	; 0x02
    23c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c2:	8e 01       	movw	r16, r28
    23c4:	01 5c       	subi	r16, 0xC1	; 193
    23c6:	1f 4f       	sbci	r17, 0xFF	; 255
    23c8:	fe 01       	movw	r30, r28
    23ca:	ed 5b       	subi	r30, 0xBD	; 189
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	60 81       	ld	r22, Z
    23d0:	71 81       	ldd	r23, Z+1	; 0x01
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	93 81       	ldd	r25, Z+3	; 0x03
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	4a ef       	ldi	r20, 0xFA	; 250
    23dc:	54 e4       	ldi	r21, 0x44	; 68
    23de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	f8 01       	movw	r30, r16
    23e8:	80 83       	st	Z, r24
    23ea:	91 83       	std	Z+1, r25	; 0x01
    23ec:	a2 83       	std	Z+2, r26	; 0x02
    23ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23f0:	fe 01       	movw	r30, r28
    23f2:	ff 96       	adiw	r30, 0x3f	; 63
    23f4:	60 81       	ld	r22, Z
    23f6:	71 81       	ldd	r23, Z+1	; 0x01
    23f8:	82 81       	ldd	r24, Z+2	; 0x02
    23fa:	93 81       	ldd	r25, Z+3	; 0x03
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e8       	ldi	r20, 0x80	; 128
    2402:	5f e3       	ldi	r21, 0x3F	; 63
    2404:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2408:	88 23       	and	r24, r24
    240a:	2c f4       	brge	.+10     	; 0x2416 <main+0x99a>
		__ticks = 1;
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	9e af       	std	Y+62, r25	; 0x3e
    2412:	8d af       	std	Y+61, r24	; 0x3d
    2414:	46 c0       	rjmp	.+140    	; 0x24a2 <main+0xa26>
	else if (__tmp > 65535)
    2416:	fe 01       	movw	r30, r28
    2418:	ff 96       	adiw	r30, 0x3f	; 63
    241a:	60 81       	ld	r22, Z
    241c:	71 81       	ldd	r23, Z+1	; 0x01
    241e:	82 81       	ldd	r24, Z+2	; 0x02
    2420:	93 81       	ldd	r25, Z+3	; 0x03
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	3f ef       	ldi	r19, 0xFF	; 255
    2426:	4f e7       	ldi	r20, 0x7F	; 127
    2428:	57 e4       	ldi	r21, 0x47	; 71
    242a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    242e:	18 16       	cp	r1, r24
    2430:	64 f5       	brge	.+88     	; 0x248a <main+0xa0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2432:	fe 01       	movw	r30, r28
    2434:	ed 5b       	subi	r30, 0xBD	; 189
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	60 81       	ld	r22, Z
    243a:	71 81       	ldd	r23, Z+1	; 0x01
    243c:	82 81       	ldd	r24, Z+2	; 0x02
    243e:	93 81       	ldd	r25, Z+3	; 0x03
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e2       	ldi	r20, 0x20	; 32
    2446:	51 e4       	ldi	r21, 0x41	; 65
    2448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	9e af       	std	Y+62, r25	; 0x3e
    245e:	8d af       	std	Y+61, r24	; 0x3d
    2460:	0f c0       	rjmp	.+30     	; 0x2480 <main+0xa04>
    2462:	88 ec       	ldi	r24, 0xC8	; 200
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	9c af       	std	Y+60, r25	; 0x3c
    2468:	8b af       	std	Y+59, r24	; 0x3b
    246a:	8b ad       	ldd	r24, Y+59	; 0x3b
    246c:	9c ad       	ldd	r25, Y+60	; 0x3c
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <main+0x9f2>
    2472:	9c af       	std	Y+60, r25	; 0x3c
    2474:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2476:	8d ad       	ldd	r24, Y+61	; 0x3d
    2478:	9e ad       	ldd	r25, Y+62	; 0x3e
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	9e af       	std	Y+62, r25	; 0x3e
    247e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2480:	8d ad       	ldd	r24, Y+61	; 0x3d
    2482:	9e ad       	ldd	r25, Y+62	; 0x3e
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	69 f7       	brne	.-38     	; 0x2462 <main+0x9e6>
    2488:	16 c0       	rjmp	.+44     	; 0x24b6 <main+0xa3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248a:	fe 01       	movw	r30, r28
    248c:	ff 96       	adiw	r30, 0x3f	; 63
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	93 81       	ldd	r25, Z+3	; 0x03
    2496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	9e af       	std	Y+62, r25	; 0x3e
    24a0:	8d af       	std	Y+61, r24	; 0x3d
    24a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    24a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    24a6:	9a af       	std	Y+58, r25	; 0x3a
    24a8:	89 af       	std	Y+57, r24	; 0x39
    24aa:	89 ad       	ldd	r24, Y+57	; 0x39
    24ac:	9a ad       	ldd	r25, Y+58	; 0x3a
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <main+0xa32>
    24b2:	9a af       	std	Y+58, r25	; 0x3a
    24b4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);


	CLCD_GoTOXY(1,8);
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	68 e0       	ldi	r22, 0x08	; 8
    24ba:	0e 94 2a 0c 	call	0x1854	; 0x1854 <CLCD_GoTOXY>
	CLCD_voidSendString("so he went");
    24be:	84 e9       	ldi	r24, 0x94	; 148
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	0e 94 56 0c 	call	0x18ac	; 0x18ac <CLCD_voidSendString>
	CLCD_GoTOXY(2,5);
    24c6:	82 e0       	ldi	r24, 0x02	; 2
    24c8:	65 e0       	ldi	r22, 0x05	; 5
    24ca:	0e 94 2a 0c 	call	0x1854	; 0x1854 <CLCD_GoTOXY>
	CLCD_voidSendString("to an audition");
    24ce:	8f e9       	ldi	r24, 0x9F	; 159
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	0e 94 56 0c 	call	0x18ac	; 0x18ac <CLCD_voidSendString>
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	a0 ea       	ldi	r26, 0xA0	; 160
    24dc:	b1 e4       	ldi	r27, 0x41	; 65
    24de:	8d ab       	std	Y+53, r24	; 0x35
    24e0:	9e ab       	std	Y+54, r25	; 0x36
    24e2:	af ab       	std	Y+55, r26	; 0x37
    24e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e6:	6d a9       	ldd	r22, Y+53	; 0x35
    24e8:	7e a9       	ldd	r23, Y+54	; 0x36
    24ea:	8f a9       	ldd	r24, Y+55	; 0x37
    24ec:	98 ad       	ldd	r25, Y+56	; 0x38
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	4a ef       	ldi	r20, 0xFA	; 250
    24f4:	54 e4       	ldi	r21, 0x44	; 68
    24f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	89 ab       	std	Y+49, r24	; 0x31
    2500:	9a ab       	std	Y+50, r25	; 0x32
    2502:	ab ab       	std	Y+51, r26	; 0x33
    2504:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2506:	69 a9       	ldd	r22, Y+49	; 0x31
    2508:	7a a9       	ldd	r23, Y+50	; 0x32
    250a:	8b a9       	ldd	r24, Y+51	; 0x33
    250c:	9c a9       	ldd	r25, Y+52	; 0x34
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e8       	ldi	r20, 0x80	; 128
    2514:	5f e3       	ldi	r21, 0x3F	; 63
    2516:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    251a:	88 23       	and	r24, r24
    251c:	2c f4       	brge	.+10     	; 0x2528 <main+0xaac>
		__ticks = 1;
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	98 ab       	std	Y+48, r25	; 0x30
    2524:	8f a7       	std	Y+47, r24	; 0x2f
    2526:	3f c0       	rjmp	.+126    	; 0x25a6 <main+0xb2a>
	else if (__tmp > 65535)
    2528:	69 a9       	ldd	r22, Y+49	; 0x31
    252a:	7a a9       	ldd	r23, Y+50	; 0x32
    252c:	8b a9       	ldd	r24, Y+51	; 0x33
    252e:	9c a9       	ldd	r25, Y+52	; 0x34
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	3f ef       	ldi	r19, 0xFF	; 255
    2534:	4f e7       	ldi	r20, 0x7F	; 127
    2536:	57 e4       	ldi	r21, 0x47	; 71
    2538:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    253c:	18 16       	cp	r1, r24
    253e:	4c f5       	brge	.+82     	; 0x2592 <main+0xb16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2540:	6d a9       	ldd	r22, Y+53	; 0x35
    2542:	7e a9       	ldd	r23, Y+54	; 0x36
    2544:	8f a9       	ldd	r24, Y+55	; 0x37
    2546:	98 ad       	ldd	r25, Y+56	; 0x38
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e2       	ldi	r20, 0x20	; 32
    254e:	51 e4       	ldi	r21, 0x41	; 65
    2550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	bc 01       	movw	r22, r24
    255a:	cd 01       	movw	r24, r26
    255c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	98 ab       	std	Y+48, r25	; 0x30
    2566:	8f a7       	std	Y+47, r24	; 0x2f
    2568:	0f c0       	rjmp	.+30     	; 0x2588 <main+0xb0c>
    256a:	88 ec       	ldi	r24, 0xC8	; 200
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	9e a7       	std	Y+46, r25	; 0x2e
    2570:	8d a7       	std	Y+45, r24	; 0x2d
    2572:	8d a5       	ldd	r24, Y+45	; 0x2d
    2574:	9e a5       	ldd	r25, Y+46	; 0x2e
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <main+0xafa>
    257a:	9e a7       	std	Y+46, r25	; 0x2e
    257c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2580:	98 a9       	ldd	r25, Y+48	; 0x30
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	98 ab       	std	Y+48, r25	; 0x30
    2586:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2588:	8f a5       	ldd	r24, Y+47	; 0x2f
    258a:	98 a9       	ldd	r25, Y+48	; 0x30
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	69 f7       	brne	.-38     	; 0x256a <main+0xaee>
    2590:	14 c0       	rjmp	.+40     	; 0x25ba <main+0xb3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2592:	69 a9       	ldd	r22, Y+49	; 0x31
    2594:	7a a9       	ldd	r23, Y+50	; 0x32
    2596:	8b a9       	ldd	r24, Y+51	; 0x33
    2598:	9c a9       	ldd	r25, Y+52	; 0x34
    259a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	98 ab       	std	Y+48, r25	; 0x30
    25a4:	8f a7       	std	Y+47, r24	; 0x2f
    25a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25a8:	98 a9       	ldd	r25, Y+48	; 0x30
    25aa:	9c a7       	std	Y+44, r25	; 0x2c
    25ac:	8b a7       	std	Y+43, r24	; 0x2b
    25ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    25b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <main+0xb36>
    25b6:	9c a7       	std	Y+44, r25	; 0x2c
    25b8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(20);


	write_special_character(customChar1,0,0,1);
    25ba:	ce 01       	movw	r24, r28
    25bc:	81 58       	subi	r24, 0x81	; 129
    25be:	9f 4f       	sbci	r25, 0xFF	; 255
    25c0:	60 e0       	ldi	r22, 0x00	; 0
    25c2:	40 e0       	ldi	r20, 0x00	; 0
    25c4:	21 e0       	ldi	r18, 0x01	; 1
    25c6:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <write_special_character>
	write_special_character(customchar4,3,0,1);
    25ca:	ce 01       	movw	r24, r28
    25cc:	89 56       	subi	r24, 0x69	; 105
    25ce:	9f 4f       	sbci	r25, 0xFF	; 255
    25d0:	63 e0       	ldi	r22, 0x03	; 3
    25d2:	40 e0       	ldi	r20, 0x00	; 0
    25d4:	21 e0       	ldi	r18, 0x01	; 1
    25d6:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <write_special_character>
	write_special_character(customChar1,0,0,2);
    25da:	ce 01       	movw	r24, r28
    25dc:	81 58       	subi	r24, 0x81	; 129
    25de:	9f 4f       	sbci	r25, 0xFF	; 255
    25e0:	60 e0       	ldi	r22, 0x00	; 0
    25e2:	40 e0       	ldi	r20, 0x00	; 0
    25e4:	22 e0       	ldi	r18, 0x02	; 2
    25e6:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <write_special_character>
	write_special_character(customchar4,3,0,2);
    25ea:	ce 01       	movw	r24, r28
    25ec:	89 56       	subi	r24, 0x69	; 105
    25ee:	9f 4f       	sbci	r25, 0xFF	; 255
    25f0:	63 e0       	ldi	r22, 0x03	; 3
    25f2:	40 e0       	ldi	r20, 0x00	; 0
    25f4:	22 e0       	ldi	r18, 0x02	; 2
    25f6:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <write_special_character>
	write_special_character(customChar1,0,0,3);
    25fa:	ce 01       	movw	r24, r28
    25fc:	81 58       	subi	r24, 0x81	; 129
    25fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2600:	60 e0       	ldi	r22, 0x00	; 0
    2602:	40 e0       	ldi	r20, 0x00	; 0
    2604:	23 e0       	ldi	r18, 0x03	; 3
    2606:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <write_special_character>
	write_special_character(customchar4,3,0,3);
    260a:	ce 01       	movw	r24, r28
    260c:	89 56       	subi	r24, 0x69	; 105
    260e:	9f 4f       	sbci	r25, 0xFF	; 255
    2610:	63 e0       	ldi	r22, 0x03	; 3
    2612:	40 e0       	ldi	r20, 0x00	; 0
    2614:	23 e0       	ldi	r18, 0x03	; 3
    2616:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <write_special_character>
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	a0 ea       	ldi	r26, 0xA0	; 160
    2620:	b1 e4       	ldi	r27, 0x41	; 65
    2622:	8f a3       	std	Y+39, r24	; 0x27
    2624:	98 a7       	std	Y+40, r25	; 0x28
    2626:	a9 a7       	std	Y+41, r26	; 0x29
    2628:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262a:	6f a1       	ldd	r22, Y+39	; 0x27
    262c:	78 a5       	ldd	r23, Y+40	; 0x28
    262e:	89 a5       	ldd	r24, Y+41	; 0x29
    2630:	9a a5       	ldd	r25, Y+42	; 0x2a
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	4a ef       	ldi	r20, 0xFA	; 250
    2638:	54 e4       	ldi	r21, 0x44	; 68
    263a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	8b a3       	std	Y+35, r24	; 0x23
    2644:	9c a3       	std	Y+36, r25	; 0x24
    2646:	ad a3       	std	Y+37, r26	; 0x25
    2648:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    264a:	6b a1       	ldd	r22, Y+35	; 0x23
    264c:	7c a1       	ldd	r23, Y+36	; 0x24
    264e:	8d a1       	ldd	r24, Y+37	; 0x25
    2650:	9e a1       	ldd	r25, Y+38	; 0x26
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	40 e8       	ldi	r20, 0x80	; 128
    2658:	5f e3       	ldi	r21, 0x3F	; 63
    265a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    265e:	88 23       	and	r24, r24
    2660:	2c f4       	brge	.+10     	; 0x266c <main+0xbf0>
		__ticks = 1;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	9a a3       	std	Y+34, r25	; 0x22
    2668:	89 a3       	std	Y+33, r24	; 0x21
    266a:	3f c0       	rjmp	.+126    	; 0x26ea <main+0xc6e>
	else if (__tmp > 65535)
    266c:	6b a1       	ldd	r22, Y+35	; 0x23
    266e:	7c a1       	ldd	r23, Y+36	; 0x24
    2670:	8d a1       	ldd	r24, Y+37	; 0x25
    2672:	9e a1       	ldd	r25, Y+38	; 0x26
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	3f ef       	ldi	r19, 0xFF	; 255
    2678:	4f e7       	ldi	r20, 0x7F	; 127
    267a:	57 e4       	ldi	r21, 0x47	; 71
    267c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2680:	18 16       	cp	r1, r24
    2682:	4c f5       	brge	.+82     	; 0x26d6 <main+0xc5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2684:	6f a1       	ldd	r22, Y+39	; 0x27
    2686:	78 a5       	ldd	r23, Y+40	; 0x28
    2688:	89 a5       	ldd	r24, Y+41	; 0x29
    268a:	9a a5       	ldd	r25, Y+42	; 0x2a
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e2       	ldi	r20, 0x20	; 32
    2692:	51 e4       	ldi	r21, 0x41	; 65
    2694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	9a a3       	std	Y+34, r25	; 0x22
    26aa:	89 a3       	std	Y+33, r24	; 0x21
    26ac:	0f c0       	rjmp	.+30     	; 0x26cc <main+0xc50>
    26ae:	88 ec       	ldi	r24, 0xC8	; 200
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	98 a3       	std	Y+32, r25	; 0x20
    26b4:	8f 8f       	std	Y+31, r24	; 0x1f
    26b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26b8:	98 a1       	ldd	r25, Y+32	; 0x20
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <main+0xc3e>
    26be:	98 a3       	std	Y+32, r25	; 0x20
    26c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c2:	89 a1       	ldd	r24, Y+33	; 0x21
    26c4:	9a a1       	ldd	r25, Y+34	; 0x22
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	9a a3       	std	Y+34, r25	; 0x22
    26ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26cc:	89 a1       	ldd	r24, Y+33	; 0x21
    26ce:	9a a1       	ldd	r25, Y+34	; 0x22
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	69 f7       	brne	.-38     	; 0x26ae <main+0xc32>
    26d4:	14 c0       	rjmp	.+40     	; 0x26fe <main+0xc82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d6:	6b a1       	ldd	r22, Y+35	; 0x23
    26d8:	7c a1       	ldd	r23, Y+36	; 0x24
    26da:	8d a1       	ldd	r24, Y+37	; 0x25
    26dc:	9e a1       	ldd	r25, Y+38	; 0x26
    26de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	9a a3       	std	Y+34, r25	; 0x22
    26e8:	89 a3       	std	Y+33, r24	; 0x21
    26ea:	89 a1       	ldd	r24, Y+33	; 0x21
    26ec:	9a a1       	ldd	r25, Y+34	; 0x22
    26ee:	9e 8f       	std	Y+30, r25	; 0x1e
    26f0:	8d 8f       	std	Y+29, r24	; 0x1d
    26f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	f1 f7       	brne	.-4      	; 0x26f6 <main+0xc7a>
    26fa:	9e 8f       	std	Y+30, r25	; 0x1e
    26fc:	8d 8f       	std	Y+29, r24	; 0x1d


	_delay_ms(20);

	write_special_character(customchar3,2,1,0);
    26fe:	ce 01       	movw	r24, r28
    2700:	81 57       	subi	r24, 0x71	; 113
    2702:	9f 4f       	sbci	r25, 0xFF	; 255
    2704:	62 e0       	ldi	r22, 0x02	; 2
    2706:	41 e0       	ldi	r20, 0x01	; 1
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <write_special_character>
	write_special_character(customchar3,2,1,1);
    270e:	ce 01       	movw	r24, r28
    2710:	81 57       	subi	r24, 0x71	; 113
    2712:	9f 4f       	sbci	r25, 0xFF	; 255
    2714:	62 e0       	ldi	r22, 0x02	; 2
    2716:	41 e0       	ldi	r20, 0x01	; 1
    2718:	21 e0       	ldi	r18, 0x01	; 1
    271a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <write_special_character>
	write_special_character(customchar3,2,1,2);
    271e:	ce 01       	movw	r24, r28
    2720:	81 57       	subi	r24, 0x71	; 113
    2722:	9f 4f       	sbci	r25, 0xFF	; 255
    2724:	62 e0       	ldi	r22, 0x02	; 2
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	22 e0       	ldi	r18, 0x02	; 2
    272a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <write_special_character>
	write_special_character(customchar3,2,2,0);
    272e:	ce 01       	movw	r24, r28
    2730:	81 57       	subi	r24, 0x71	; 113
    2732:	9f 4f       	sbci	r25, 0xFF	; 255
    2734:	62 e0       	ldi	r22, 0x02	; 2
    2736:	42 e0       	ldi	r20, 0x02	; 2
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <write_special_character>
	write_special_character(customchar3,2,2,1);
    273e:	ce 01       	movw	r24, r28
    2740:	81 57       	subi	r24, 0x71	; 113
    2742:	9f 4f       	sbci	r25, 0xFF	; 255
    2744:	62 e0       	ldi	r22, 0x02	; 2
    2746:	42 e0       	ldi	r20, 0x02	; 2
    2748:	21 e0       	ldi	r18, 0x01	; 1
    274a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <write_special_character>
	write_special_character(customchar3,2,2,2);
    274e:	ce 01       	movw	r24, r28
    2750:	81 57       	subi	r24, 0x71	; 113
    2752:	9f 4f       	sbci	r25, 0xFF	; 255
    2754:	62 e0       	ldi	r22, 0x02	; 2
    2756:	42 e0       	ldi	r20, 0x02	; 2
    2758:	22 e0       	ldi	r18, 0x02	; 2
    275a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <write_special_character>
	write_special_character(customchar3,2,3,0);
    275e:	ce 01       	movw	r24, r28
    2760:	81 57       	subi	r24, 0x71	; 113
    2762:	9f 4f       	sbci	r25, 0xFF	; 255
    2764:	62 e0       	ldi	r22, 0x02	; 2
    2766:	43 e0       	ldi	r20, 0x03	; 3
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <write_special_character>
	write_special_character(customchar3,2,3,1);
    276e:	ce 01       	movw	r24, r28
    2770:	81 57       	subi	r24, 0x71	; 113
    2772:	9f 4f       	sbci	r25, 0xFF	; 255
    2774:	62 e0       	ldi	r22, 0x02	; 2
    2776:	43 e0       	ldi	r20, 0x03	; 3
    2778:	21 e0       	ldi	r18, 0x01	; 1
    277a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <write_special_character>
	write_special_character(customchar3,2,3,2);
    277e:	ce 01       	movw	r24, r28
    2780:	81 57       	subi	r24, 0x71	; 113
    2782:	9f 4f       	sbci	r25, 0xFF	; 255
    2784:	62 e0       	ldi	r22, 0x02	; 2
    2786:	43 e0       	ldi	r20, 0x03	; 3
    2788:	22 e0       	ldi	r18, 0x02	; 2
    278a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <write_special_character>



	CLCD_Void_LCDClear();
    278e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <CLCD_Void_LCDClear>
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	a8 ec       	ldi	r26, 0xC8	; 200
    2798:	b2 e4       	ldi	r27, 0x42	; 66
    279a:	89 8f       	std	Y+25, r24	; 0x19
    279c:	9a 8f       	std	Y+26, r25	; 0x1a
    279e:	ab 8f       	std	Y+27, r26	; 0x1b
    27a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a2:	69 8d       	ldd	r22, Y+25	; 0x19
    27a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	4a ef       	ldi	r20, 0xFA	; 250
    27b0:	54 e4       	ldi	r21, 0x44	; 68
    27b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	8d 8b       	std	Y+21, r24	; 0x15
    27bc:	9e 8b       	std	Y+22, r25	; 0x16
    27be:	af 8b       	std	Y+23, r26	; 0x17
    27c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27c2:	6d 89       	ldd	r22, Y+21	; 0x15
    27c4:	7e 89       	ldd	r23, Y+22	; 0x16
    27c6:	8f 89       	ldd	r24, Y+23	; 0x17
    27c8:	98 8d       	ldd	r25, Y+24	; 0x18
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e8       	ldi	r20, 0x80	; 128
    27d0:	5f e3       	ldi	r21, 0x3F	; 63
    27d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27d6:	88 23       	and	r24, r24
    27d8:	2c f4       	brge	.+10     	; 0x27e4 <main+0xd68>
		__ticks = 1;
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	9c 8b       	std	Y+20, r25	; 0x14
    27e0:	8b 8b       	std	Y+19, r24	; 0x13
    27e2:	3f c0       	rjmp	.+126    	; 0x2862 <main+0xde6>
	else if (__tmp > 65535)
    27e4:	6d 89       	ldd	r22, Y+21	; 0x15
    27e6:	7e 89       	ldd	r23, Y+22	; 0x16
    27e8:	8f 89       	ldd	r24, Y+23	; 0x17
    27ea:	98 8d       	ldd	r25, Y+24	; 0x18
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	3f ef       	ldi	r19, 0xFF	; 255
    27f0:	4f e7       	ldi	r20, 0x7F	; 127
    27f2:	57 e4       	ldi	r21, 0x47	; 71
    27f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27f8:	18 16       	cp	r1, r24
    27fa:	4c f5       	brge	.+82     	; 0x284e <main+0xdd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27fc:	69 8d       	ldd	r22, Y+25	; 0x19
    27fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2800:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2802:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	40 e2       	ldi	r20, 0x20	; 32
    280a:	51 e4       	ldi	r21, 0x41	; 65
    280c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	bc 01       	movw	r22, r24
    2816:	cd 01       	movw	r24, r26
    2818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	9c 8b       	std	Y+20, r25	; 0x14
    2822:	8b 8b       	std	Y+19, r24	; 0x13
    2824:	0f c0       	rjmp	.+30     	; 0x2844 <main+0xdc8>
    2826:	88 ec       	ldi	r24, 0xC8	; 200
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	9a 8b       	std	Y+18, r25	; 0x12
    282c:	89 8b       	std	Y+17, r24	; 0x11
    282e:	89 89       	ldd	r24, Y+17	; 0x11
    2830:	9a 89       	ldd	r25, Y+18	; 0x12
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	f1 f7       	brne	.-4      	; 0x2832 <main+0xdb6>
    2836:	9a 8b       	std	Y+18, r25	; 0x12
    2838:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283a:	8b 89       	ldd	r24, Y+19	; 0x13
    283c:	9c 89       	ldd	r25, Y+20	; 0x14
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	9c 8b       	std	Y+20, r25	; 0x14
    2842:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2844:	8b 89       	ldd	r24, Y+19	; 0x13
    2846:	9c 89       	ldd	r25, Y+20	; 0x14
    2848:	00 97       	sbiw	r24, 0x00	; 0
    284a:	69 f7       	brne	.-38     	; 0x2826 <main+0xdaa>
    284c:	14 c0       	rjmp	.+40     	; 0x2876 <main+0xdfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284e:	6d 89       	ldd	r22, Y+21	; 0x15
    2850:	7e 89       	ldd	r23, Y+22	; 0x16
    2852:	8f 89       	ldd	r24, Y+23	; 0x17
    2854:	98 8d       	ldd	r25, Y+24	; 0x18
    2856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	9c 8b       	std	Y+20, r25	; 0x14
    2860:	8b 8b       	std	Y+19, r24	; 0x13
    2862:	8b 89       	ldd	r24, Y+19	; 0x13
    2864:	9c 89       	ldd	r25, Y+20	; 0x14
    2866:	98 8b       	std	Y+16, r25	; 0x10
    2868:	8f 87       	std	Y+15, r24	; 0x0f
    286a:	8f 85       	ldd	r24, Y+15	; 0x0f
    286c:	98 89       	ldd	r25, Y+16	; 0x10
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	f1 f7       	brne	.-4      	; 0x286e <main+0xdf2>
    2872:	98 8b       	std	Y+16, r25	; 0x10
    2874:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);


	CLCD_GoTOXY(0,1);
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	61 e0       	ldi	r22, 0x01	; 1
    287a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <CLCD_GoTOXY>
	CLCD_voidSendString("and fortunately");
    287e:	8e ea       	ldi	r24, 0xAE	; 174
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	0e 94 56 0c 	call	0x18ac	; 0x18ac <CLCD_voidSendString>
	CLCD_GoTOXY(1,1);
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	61 e0       	ldi	r22, 0x01	; 1
    288a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <CLCD_GoTOXY>
	CLCD_voidSendString("he got accepted");
    288e:	8e eb       	ldi	r24, 0xBE	; 190
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	0e 94 56 0c 	call	0x18ac	; 0x18ac <CLCD_voidSendString>
	CLCD_GoTOXY(2,1);
    2896:	82 e0       	ldi	r24, 0x02	; 2
    2898:	61 e0       	ldi	r22, 0x01	; 1
    289a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <CLCD_GoTOXY>
	CLCD_voidSendString("now he becomes a ");
    289e:	8e ec       	ldi	r24, 0xCE	; 206
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	0e 94 56 0c 	call	0x18ac	; 0x18ac <CLCD_voidSendString>
	CLCD_GoTOXY(3,1);
    28a6:	83 e0       	ldi	r24, 0x03	; 3
    28a8:	61 e0       	ldi	r22, 0x01	; 1
    28aa:	0e 94 2a 0c 	call	0x1854	; 0x1854 <CLCD_GoTOXY>
		CLCD_voidSendString("famous singer ");
    28ae:	80 ee       	ldi	r24, 0xE0	; 224
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	0e 94 56 0c 	call	0x18ac	; 0x18ac <CLCD_voidSendString>
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	a0 ea       	ldi	r26, 0xA0	; 160
    28bc:	b1 e4       	ldi	r27, 0x41	; 65
    28be:	8b 87       	std	Y+11, r24	; 0x0b
    28c0:	9c 87       	std	Y+12, r25	; 0x0c
    28c2:	ad 87       	std	Y+13, r26	; 0x0d
    28c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    28cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	4a ef       	ldi	r20, 0xFA	; 250
    28d4:	54 e4       	ldi	r21, 0x44	; 68
    28d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	8f 83       	std	Y+7, r24	; 0x07
    28e0:	98 87       	std	Y+8, r25	; 0x08
    28e2:	a9 87       	std	Y+9, r26	; 0x09
    28e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28e6:	6f 81       	ldd	r22, Y+7	; 0x07
    28e8:	78 85       	ldd	r23, Y+8	; 0x08
    28ea:	89 85       	ldd	r24, Y+9	; 0x09
    28ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	40 e8       	ldi	r20, 0x80	; 128
    28f4:	5f e3       	ldi	r21, 0x3F	; 63
    28f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28fa:	88 23       	and	r24, r24
    28fc:	2c f4       	brge	.+10     	; 0x2908 <main+0xe8c>
		__ticks = 1;
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	9e 83       	std	Y+6, r25	; 0x06
    2904:	8d 83       	std	Y+5, r24	; 0x05
    2906:	3f c0       	rjmp	.+126    	; 0x2986 <main+0xf0a>
	else if (__tmp > 65535)
    2908:	6f 81       	ldd	r22, Y+7	; 0x07
    290a:	78 85       	ldd	r23, Y+8	; 0x08
    290c:	89 85       	ldd	r24, Y+9	; 0x09
    290e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	3f ef       	ldi	r19, 0xFF	; 255
    2914:	4f e7       	ldi	r20, 0x7F	; 127
    2916:	57 e4       	ldi	r21, 0x47	; 71
    2918:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    291c:	18 16       	cp	r1, r24
    291e:	4c f5       	brge	.+82     	; 0x2972 <main+0xef6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2920:	6b 85       	ldd	r22, Y+11	; 0x0b
    2922:	7c 85       	ldd	r23, Y+12	; 0x0c
    2924:	8d 85       	ldd	r24, Y+13	; 0x0d
    2926:	9e 85       	ldd	r25, Y+14	; 0x0e
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	40 e2       	ldi	r20, 0x20	; 32
    292e:	51 e4       	ldi	r21, 0x41	; 65
    2930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	bc 01       	movw	r22, r24
    293a:	cd 01       	movw	r24, r26
    293c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	9e 83       	std	Y+6, r25	; 0x06
    2946:	8d 83       	std	Y+5, r24	; 0x05
    2948:	0f c0       	rjmp	.+30     	; 0x2968 <main+0xeec>
    294a:	88 ec       	ldi	r24, 0xC8	; 200
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	9c 83       	std	Y+4, r25	; 0x04
    2950:	8b 83       	std	Y+3, r24	; 0x03
    2952:	8b 81       	ldd	r24, Y+3	; 0x03
    2954:	9c 81       	ldd	r25, Y+4	; 0x04
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	f1 f7       	brne	.-4      	; 0x2956 <main+0xeda>
    295a:	9c 83       	std	Y+4, r25	; 0x04
    295c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295e:	8d 81       	ldd	r24, Y+5	; 0x05
    2960:	9e 81       	ldd	r25, Y+6	; 0x06
    2962:	01 97       	sbiw	r24, 0x01	; 1
    2964:	9e 83       	std	Y+6, r25	; 0x06
    2966:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2968:	8d 81       	ldd	r24, Y+5	; 0x05
    296a:	9e 81       	ldd	r25, Y+6	; 0x06
    296c:	00 97       	sbiw	r24, 0x00	; 0
    296e:	69 f7       	brne	.-38     	; 0x294a <main+0xece>
    2970:	14 c0       	rjmp	.+40     	; 0x299a <main+0xf1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2972:	6f 81       	ldd	r22, Y+7	; 0x07
    2974:	78 85       	ldd	r23, Y+8	; 0x08
    2976:	89 85       	ldd	r24, Y+9	; 0x09
    2978:	9a 85       	ldd	r25, Y+10	; 0x0a
    297a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	9e 83       	std	Y+6, r25	; 0x06
    2984:	8d 83       	std	Y+5, r24	; 0x05
    2986:	8d 81       	ldd	r24, Y+5	; 0x05
    2988:	9e 81       	ldd	r25, Y+6	; 0x06
    298a:	9a 83       	std	Y+2, r25	; 0x02
    298c:	89 83       	std	Y+1, r24	; 0x01
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	9a 81       	ldd	r25, Y+2	; 0x02
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	f1 f7       	brne	.-4      	; 0x2992 <main+0xf16>
    2996:	9a 83       	std	Y+2, r25	; 0x02
    2998:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	write_special_character(customchar5,4,3,16);
    299a:	ce 01       	movw	r24, r28
    299c:	81 56       	subi	r24, 0x61	; 97
    299e:	9f 4f       	sbci	r25, 0xFF	; 255
    29a0:	64 e0       	ldi	r22, 0x04	; 4
    29a2:	43 e0       	ldi	r20, 0x03	; 3
    29a4:	20 e1       	ldi	r18, 0x10	; 16
    29a6:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <write_special_character>
    29aa:	ff cf       	rjmp	.-2      	; 0x29aa <main+0xf2e>

000029ac <DIO_INIT>:
#include "init.h"
#include "config.h"


u8int_t  DIO_INIT  (u8int_t PortName, u8int_t PinNum,u8int_t Direction)
{
    29ac:	df 93       	push	r29
    29ae:	cf 93       	push	r28
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	28 97       	sbiw	r28, 0x08	; 8
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	8a 83       	std	Y+2, r24	; 0x02
    29c2:	6b 83       	std	Y+3, r22	; 0x03
    29c4:	4c 83       	std	Y+4, r20	; 0x04
	u8int_t Local_u8ERRStatus=OK;
    29c6:	19 82       	std	Y+1, r1	; 0x01

	if(PinNum>=0 && PinNum<=7)
    29c8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ca:	88 30       	cpi	r24, 0x08	; 8
    29cc:	08 f0       	brcs	.+2      	; 0x29d0 <DIO_INIT+0x24>
    29ce:	f4 c0       	rjmp	.+488    	; 0x2bb8 <DIO_INIT+0x20c>
	{
		if(Direction == PIN_INPUT)
    29d0:	8c 81       	ldd	r24, Y+4	; 0x04
    29d2:	88 23       	and	r24, r24
    29d4:	09 f0       	breq	.+2      	; 0x29d8 <DIO_INIT+0x2c>
    29d6:	77 c0       	rjmp	.+238    	; 0x2ac6 <DIO_INIT+0x11a>
		{

			switch(PortName)
    29d8:	8a 81       	ldd	r24, Y+2	; 0x02
    29da:	28 2f       	mov	r18, r24
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	38 87       	std	Y+8, r19	; 0x08
    29e0:	2f 83       	std	Y+7, r18	; 0x07
    29e2:	8f 81       	ldd	r24, Y+7	; 0x07
    29e4:	98 85       	ldd	r25, Y+8	; 0x08
    29e6:	81 30       	cpi	r24, 0x01	; 1
    29e8:	91 05       	cpc	r25, r1
    29ea:	59 f1       	breq	.+86     	; 0x2a42 <DIO_INIT+0x96>
    29ec:	2f 81       	ldd	r18, Y+7	; 0x07
    29ee:	38 85       	ldd	r19, Y+8	; 0x08
    29f0:	22 30       	cpi	r18, 0x02	; 2
    29f2:	31 05       	cpc	r19, r1
    29f4:	2c f4       	brge	.+10     	; 0x2a00 <DIO_INIT+0x54>
    29f6:	8f 81       	ldd	r24, Y+7	; 0x07
    29f8:	98 85       	ldd	r25, Y+8	; 0x08
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	69 f0       	breq	.+26     	; 0x2a18 <DIO_INIT+0x6c>
    29fe:	60 c0       	rjmp	.+192    	; 0x2ac0 <DIO_INIT+0x114>
    2a00:	2f 81       	ldd	r18, Y+7	; 0x07
    2a02:	38 85       	ldd	r19, Y+8	; 0x08
    2a04:	22 30       	cpi	r18, 0x02	; 2
    2a06:	31 05       	cpc	r19, r1
    2a08:	89 f1       	breq	.+98     	; 0x2a6c <DIO_INIT+0xc0>
    2a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    2a0c:	98 85       	ldd	r25, Y+8	; 0x08
    2a0e:	83 30       	cpi	r24, 0x03	; 3
    2a10:	91 05       	cpc	r25, r1
    2a12:	09 f4       	brne	.+2      	; 0x2a16 <DIO_INIT+0x6a>
    2a14:	40 c0       	rjmp	.+128    	; 0x2a96 <DIO_INIT+0xea>
    2a16:	54 c0       	rjmp	.+168    	; 0x2ac0 <DIO_INIT+0x114>
			{


			case(PORT_A):  CLR_BIT(DDRA_REG,PinNum);break;
    2a18:	aa e3       	ldi	r26, 0x3A	; 58
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	ea e3       	ldi	r30, 0x3A	; 58
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	48 2f       	mov	r20, r24
    2a24:	8b 81       	ldd	r24, Y+3	; 0x03
    2a26:	28 2f       	mov	r18, r24
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	02 2e       	mov	r0, r18
    2a30:	02 c0       	rjmp	.+4      	; 0x2a36 <DIO_INIT+0x8a>
    2a32:	88 0f       	add	r24, r24
    2a34:	99 1f       	adc	r25, r25
    2a36:	0a 94       	dec	r0
    2a38:	e2 f7       	brpl	.-8      	; 0x2a32 <DIO_INIT+0x86>
    2a3a:	80 95       	com	r24
    2a3c:	84 23       	and	r24, r20
    2a3e:	8c 93       	st	X, r24
    2a40:	bd c0       	rjmp	.+378    	; 0x2bbc <DIO_INIT+0x210>
			case(PORT_B): CLR_BIT(DDRB_REG,PinNum);break;
    2a42:	a7 e3       	ldi	r26, 0x37	; 55
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	e7 e3       	ldi	r30, 0x37	; 55
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	48 2f       	mov	r20, r24
    2a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a50:	28 2f       	mov	r18, r24
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	02 2e       	mov	r0, r18
    2a5a:	02 c0       	rjmp	.+4      	; 0x2a60 <DIO_INIT+0xb4>
    2a5c:	88 0f       	add	r24, r24
    2a5e:	99 1f       	adc	r25, r25
    2a60:	0a 94       	dec	r0
    2a62:	e2 f7       	brpl	.-8      	; 0x2a5c <DIO_INIT+0xb0>
    2a64:	80 95       	com	r24
    2a66:	84 23       	and	r24, r20
    2a68:	8c 93       	st	X, r24
    2a6a:	a8 c0       	rjmp	.+336    	; 0x2bbc <DIO_INIT+0x210>
			case(PORT_C): CLR_BIT(DDRC_REG,PinNum);break;
    2a6c:	a4 e3       	ldi	r26, 0x34	; 52
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	e4 e3       	ldi	r30, 0x34	; 52
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	80 81       	ld	r24, Z
    2a76:	48 2f       	mov	r20, r24
    2a78:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	02 2e       	mov	r0, r18
    2a84:	02 c0       	rjmp	.+4      	; 0x2a8a <DIO_INIT+0xde>
    2a86:	88 0f       	add	r24, r24
    2a88:	99 1f       	adc	r25, r25
    2a8a:	0a 94       	dec	r0
    2a8c:	e2 f7       	brpl	.-8      	; 0x2a86 <DIO_INIT+0xda>
    2a8e:	80 95       	com	r24
    2a90:	84 23       	and	r24, r20
    2a92:	8c 93       	st	X, r24
    2a94:	93 c0       	rjmp	.+294    	; 0x2bbc <DIO_INIT+0x210>
			case(PORT_D):CLR_BIT(DDRD_REG,PinNum);break;
    2a96:	a1 e3       	ldi	r26, 0x31	; 49
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	e1 e3       	ldi	r30, 0x31	; 49
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	48 2f       	mov	r20, r24
    2aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa4:	28 2f       	mov	r18, r24
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	02 2e       	mov	r0, r18
    2aae:	02 c0       	rjmp	.+4      	; 0x2ab4 <DIO_INIT+0x108>
    2ab0:	88 0f       	add	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	0a 94       	dec	r0
    2ab6:	e2 f7       	brpl	.-8      	; 0x2ab0 <DIO_INIT+0x104>
    2ab8:	80 95       	com	r24
    2aba:	84 23       	and	r24, r20
    2abc:	8c 93       	st	X, r24
    2abe:	7e c0       	rjmp	.+252    	; 0x2bbc <DIO_INIT+0x210>

			default: Local_u8ERRStatus=NOK;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	89 83       	std	Y+1, r24	; 0x01
    2ac4:	7b c0       	rjmp	.+246    	; 0x2bbc <DIO_INIT+0x210>
			break;
			}

		}

		else if(Direction == PIN_OUTPUT)
    2ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac8:	81 30       	cpi	r24, 0x01	; 1
    2aca:	09 f0       	breq	.+2      	; 0x2ace <DIO_INIT+0x122>
    2acc:	72 c0       	rjmp	.+228    	; 0x2bb2 <DIO_INIT+0x206>
		{
			switch(PortName)
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	28 2f       	mov	r18, r24
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	3e 83       	std	Y+6, r19	; 0x06
    2ad6:	2d 83       	std	Y+5, r18	; 0x05
    2ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ada:	9e 81       	ldd	r25, Y+6	; 0x06
    2adc:	81 30       	cpi	r24, 0x01	; 1
    2ade:	91 05       	cpc	r25, r1
    2ae0:	49 f1       	breq	.+82     	; 0x2b34 <DIO_INIT+0x188>
    2ae2:	2d 81       	ldd	r18, Y+5	; 0x05
    2ae4:	3e 81       	ldd	r19, Y+6	; 0x06
    2ae6:	22 30       	cpi	r18, 0x02	; 2
    2ae8:	31 05       	cpc	r19, r1
    2aea:	2c f4       	brge	.+10     	; 0x2af6 <DIO_INIT+0x14a>
    2aec:	8d 81       	ldd	r24, Y+5	; 0x05
    2aee:	9e 81       	ldd	r25, Y+6	; 0x06
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	61 f0       	breq	.+24     	; 0x2b0c <DIO_INIT+0x160>
    2af4:	5b c0       	rjmp	.+182    	; 0x2bac <DIO_INIT+0x200>
    2af6:	2d 81       	ldd	r18, Y+5	; 0x05
    2af8:	3e 81       	ldd	r19, Y+6	; 0x06
    2afa:	22 30       	cpi	r18, 0x02	; 2
    2afc:	31 05       	cpc	r19, r1
    2afe:	71 f1       	breq	.+92     	; 0x2b5c <DIO_INIT+0x1b0>
    2b00:	8d 81       	ldd	r24, Y+5	; 0x05
    2b02:	9e 81       	ldd	r25, Y+6	; 0x06
    2b04:	83 30       	cpi	r24, 0x03	; 3
    2b06:	91 05       	cpc	r25, r1
    2b08:	e9 f1       	breq	.+122    	; 0x2b84 <DIO_INIT+0x1d8>
    2b0a:	50 c0       	rjmp	.+160    	; 0x2bac <DIO_INIT+0x200>
			{


			case(PORT_A): SET_BIT(DDRA_REG,PinNum);break;
    2b0c:	aa e3       	ldi	r26, 0x3A	; 58
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	ea e3       	ldi	r30, 0x3A	; 58
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	48 2f       	mov	r20, r24
    2b18:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	02 2e       	mov	r0, r18
    2b24:	02 c0       	rjmp	.+4      	; 0x2b2a <DIO_INIT+0x17e>
    2b26:	88 0f       	add	r24, r24
    2b28:	99 1f       	adc	r25, r25
    2b2a:	0a 94       	dec	r0
    2b2c:	e2 f7       	brpl	.-8      	; 0x2b26 <DIO_INIT+0x17a>
    2b2e:	84 2b       	or	r24, r20
    2b30:	8c 93       	st	X, r24
    2b32:	44 c0       	rjmp	.+136    	; 0x2bbc <DIO_INIT+0x210>
			case(PORT_B): SET_BIT(DDRB_REG,PinNum);break;
    2b34:	a7 e3       	ldi	r26, 0x37	; 55
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	e7 e3       	ldi	r30, 0x37	; 55
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	48 2f       	mov	r20, r24
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	28 2f       	mov	r18, r24
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	02 2e       	mov	r0, r18
    2b4c:	02 c0       	rjmp	.+4      	; 0x2b52 <DIO_INIT+0x1a6>
    2b4e:	88 0f       	add	r24, r24
    2b50:	99 1f       	adc	r25, r25
    2b52:	0a 94       	dec	r0
    2b54:	e2 f7       	brpl	.-8      	; 0x2b4e <DIO_INIT+0x1a2>
    2b56:	84 2b       	or	r24, r20
    2b58:	8c 93       	st	X, r24
    2b5a:	30 c0       	rjmp	.+96     	; 0x2bbc <DIO_INIT+0x210>
			case(PORT_C): SET_BIT(DDRC_REG,PinNum);break;
    2b5c:	a4 e3       	ldi	r26, 0x34	; 52
    2b5e:	b0 e0       	ldi	r27, 0x00	; 0
    2b60:	e4 e3       	ldi	r30, 0x34	; 52
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	48 2f       	mov	r20, r24
    2b68:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6a:	28 2f       	mov	r18, r24
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	02 2e       	mov	r0, r18
    2b74:	02 c0       	rjmp	.+4      	; 0x2b7a <DIO_INIT+0x1ce>
    2b76:	88 0f       	add	r24, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	0a 94       	dec	r0
    2b7c:	e2 f7       	brpl	.-8      	; 0x2b76 <DIO_INIT+0x1ca>
    2b7e:	84 2b       	or	r24, r20
    2b80:	8c 93       	st	X, r24
    2b82:	1c c0       	rjmp	.+56     	; 0x2bbc <DIO_INIT+0x210>
			case(PORT_D):SET_BIT(DDRD_REG,PinNum);break;
    2b84:	a1 e3       	ldi	r26, 0x31	; 49
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	e1 e3       	ldi	r30, 0x31	; 49
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	48 2f       	mov	r20, r24
    2b90:	8b 81       	ldd	r24, Y+3	; 0x03
    2b92:	28 2f       	mov	r18, r24
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	02 2e       	mov	r0, r18
    2b9c:	02 c0       	rjmp	.+4      	; 0x2ba2 <DIO_INIT+0x1f6>
    2b9e:	88 0f       	add	r24, r24
    2ba0:	99 1f       	adc	r25, r25
    2ba2:	0a 94       	dec	r0
    2ba4:	e2 f7       	brpl	.-8      	; 0x2b9e <DIO_INIT+0x1f2>
    2ba6:	84 2b       	or	r24, r20
    2ba8:	8c 93       	st	X, r24
    2baa:	08 c0       	rjmp	.+16     	; 0x2bbc <DIO_INIT+0x210>
			default: Local_u8ERRStatus=NOK;
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	89 83       	std	Y+1, r24	; 0x01
    2bb0:	05 c0       	rjmp	.+10     	; 0x2bbc <DIO_INIT+0x210>
			}
		}

		else
		{
			Local_u8ERRStatus=NOK;
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	89 83       	std	Y+1, r24	; 0x01
    2bb6:	02 c0       	rjmp	.+4      	; 0x2bbc <DIO_INIT+0x210>
		}
	}
	else
	{
		Local_u8ERRStatus=NOK;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_u8ERRStatus;
    2bbc:	89 81       	ldd	r24, Y+1	; 0x01

}
    2bbe:	28 96       	adiw	r28, 0x08	; 8
    2bc0:	0f b6       	in	r0, 0x3f	; 63
    2bc2:	f8 94       	cli
    2bc4:	de bf       	out	0x3e, r29	; 62
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	cd bf       	out	0x3d, r28	; 61
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	08 95       	ret

00002bd0 <DIO_SetPinValue>:
u8int_t  DIO_SetPinValue (u8int_t PortName, u8int_t PinNum,u8int_t Value)
{
    2bd0:	df 93       	push	r29
    2bd2:	cf 93       	push	r28
    2bd4:	cd b7       	in	r28, 0x3d	; 61
    2bd6:	de b7       	in	r29, 0x3e	; 62
    2bd8:	28 97       	sbiw	r28, 0x08	; 8
    2bda:	0f b6       	in	r0, 0x3f	; 63
    2bdc:	f8 94       	cli
    2bde:	de bf       	out	0x3e, r29	; 62
    2be0:	0f be       	out	0x3f, r0	; 63
    2be2:	cd bf       	out	0x3d, r28	; 61
    2be4:	8a 83       	std	Y+2, r24	; 0x02
    2be6:	6b 83       	std	Y+3, r22	; 0x03
    2be8:	4c 83       	std	Y+4, r20	; 0x04
	u8int_t ErrorState=OK ;
    2bea:	19 82       	std	Y+1, r1	; 0x01

	if(PinNum>=0 && PinNum<=7 )
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	88 30       	cpi	r24, 0x08	; 8
    2bf0:	08 f0       	brcs	.+2      	; 0x2bf4 <DIO_SetPinValue+0x24>
    2bf2:	f0 c0       	rjmp	.+480    	; 0x2dd4 <DIO_SetPinValue+0x204>
	{
		if(Value== PIN_HIGH)
    2bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf6:	81 30       	cpi	r24, 0x01	; 1
    2bf8:	09 f0       	breq	.+2      	; 0x2bfc <DIO_SetPinValue+0x2c>
    2bfa:	6e c0       	rjmp	.+220    	; 0x2cd8 <DIO_SetPinValue+0x108>
		{

			switch(PortName){
    2bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfe:	28 2f       	mov	r18, r24
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	38 87       	std	Y+8, r19	; 0x08
    2c04:	2f 83       	std	Y+7, r18	; 0x07
    2c06:	8f 81       	ldd	r24, Y+7	; 0x07
    2c08:	98 85       	ldd	r25, Y+8	; 0x08
    2c0a:	81 30       	cpi	r24, 0x01	; 1
    2c0c:	91 05       	cpc	r25, r1
    2c0e:	49 f1       	breq	.+82     	; 0x2c62 <DIO_SetPinValue+0x92>
    2c10:	2f 81       	ldd	r18, Y+7	; 0x07
    2c12:	38 85       	ldd	r19, Y+8	; 0x08
    2c14:	22 30       	cpi	r18, 0x02	; 2
    2c16:	31 05       	cpc	r19, r1
    2c18:	2c f4       	brge	.+10     	; 0x2c24 <DIO_SetPinValue+0x54>
    2c1a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c1c:	98 85       	ldd	r25, Y+8	; 0x08
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	61 f0       	breq	.+24     	; 0x2c3a <DIO_SetPinValue+0x6a>
    2c22:	5a c0       	rjmp	.+180    	; 0x2cd8 <DIO_SetPinValue+0x108>
    2c24:	2f 81       	ldd	r18, Y+7	; 0x07
    2c26:	38 85       	ldd	r19, Y+8	; 0x08
    2c28:	22 30       	cpi	r18, 0x02	; 2
    2c2a:	31 05       	cpc	r19, r1
    2c2c:	71 f1       	breq	.+92     	; 0x2c8a <DIO_SetPinValue+0xba>
    2c2e:	8f 81       	ldd	r24, Y+7	; 0x07
    2c30:	98 85       	ldd	r25, Y+8	; 0x08
    2c32:	83 30       	cpi	r24, 0x03	; 3
    2c34:	91 05       	cpc	r25, r1
    2c36:	e9 f1       	breq	.+122    	; 0x2cb2 <DIO_SetPinValue+0xe2>
    2c38:	4f c0       	rjmp	.+158    	; 0x2cd8 <DIO_SetPinValue+0x108>

			case (PORT_A): SET_BIT(PORTA_REG,PinNum);break;
    2c3a:	ab e3       	ldi	r26, 0x3B	; 59
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	eb e3       	ldi	r30, 0x3B	; 59
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	80 81       	ld	r24, Z
    2c44:	48 2f       	mov	r20, r24
    2c46:	8b 81       	ldd	r24, Y+3	; 0x03
    2c48:	28 2f       	mov	r18, r24
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	02 2e       	mov	r0, r18
    2c52:	02 c0       	rjmp	.+4      	; 0x2c58 <DIO_SetPinValue+0x88>
    2c54:	88 0f       	add	r24, r24
    2c56:	99 1f       	adc	r25, r25
    2c58:	0a 94       	dec	r0
    2c5a:	e2 f7       	brpl	.-8      	; 0x2c54 <DIO_SetPinValue+0x84>
    2c5c:	84 2b       	or	r24, r20
    2c5e:	8c 93       	st	X, r24
    2c60:	3b c0       	rjmp	.+118    	; 0x2cd8 <DIO_SetPinValue+0x108>
			case (PORT_B): SET_BIT(PORTB_REG,PinNum);;break;
    2c62:	a8 e3       	ldi	r26, 0x38	; 56
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	e8 e3       	ldi	r30, 0x38	; 56
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	48 2f       	mov	r20, r24
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	28 2f       	mov	r18, r24
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	02 2e       	mov	r0, r18
    2c7a:	02 c0       	rjmp	.+4      	; 0x2c80 <DIO_SetPinValue+0xb0>
    2c7c:	88 0f       	add	r24, r24
    2c7e:	99 1f       	adc	r25, r25
    2c80:	0a 94       	dec	r0
    2c82:	e2 f7       	brpl	.-8      	; 0x2c7c <DIO_SetPinValue+0xac>
    2c84:	84 2b       	or	r24, r20
    2c86:	8c 93       	st	X, r24
    2c88:	27 c0       	rjmp	.+78     	; 0x2cd8 <DIO_SetPinValue+0x108>
			case (PORT_C): SET_BIT(PORTC_REG,PinNum);break;
    2c8a:	a5 e3       	ldi	r26, 0x35	; 53
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	e5 e3       	ldi	r30, 0x35	; 53
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	80 81       	ld	r24, Z
    2c94:	48 2f       	mov	r20, r24
    2c96:	8b 81       	ldd	r24, Y+3	; 0x03
    2c98:	28 2f       	mov	r18, r24
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	02 2e       	mov	r0, r18
    2ca2:	02 c0       	rjmp	.+4      	; 0x2ca8 <DIO_SetPinValue+0xd8>
    2ca4:	88 0f       	add	r24, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	0a 94       	dec	r0
    2caa:	e2 f7       	brpl	.-8      	; 0x2ca4 <DIO_SetPinValue+0xd4>
    2cac:	84 2b       	or	r24, r20
    2cae:	8c 93       	st	X, r24
    2cb0:	13 c0       	rjmp	.+38     	; 0x2cd8 <DIO_SetPinValue+0x108>
			case (PORT_D): SET_BIT(PORTD_REG,PinNum);break;
    2cb2:	a2 e3       	ldi	r26, 0x32	; 50
    2cb4:	b0 e0       	ldi	r27, 0x00	; 0
    2cb6:	e2 e3       	ldi	r30, 0x32	; 50
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	48 2f       	mov	r20, r24
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	28 2f       	mov	r18, r24
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	02 2e       	mov	r0, r18
    2cca:	02 c0       	rjmp	.+4      	; 0x2cd0 <DIO_SetPinValue+0x100>
    2ccc:	88 0f       	add	r24, r24
    2cce:	99 1f       	adc	r25, r25
    2cd0:	0a 94       	dec	r0
    2cd2:	e2 f7       	brpl	.-8      	; 0x2ccc <DIO_SetPinValue+0xfc>
    2cd4:	84 2b       	or	r24, r20
    2cd6:	8c 93       	st	X, r24
			default:break;

			}
		}
		if(Value== PIN_LOW)
    2cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cda:	88 23       	and	r24, r24
    2cdc:	09 f0       	breq	.+2      	; 0x2ce0 <DIO_SetPinValue+0x110>
    2cde:	77 c0       	rjmp	.+238    	; 0x2dce <DIO_SetPinValue+0x1fe>
		{

			switch(PortName){
    2ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce2:	28 2f       	mov	r18, r24
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	3e 83       	std	Y+6, r19	; 0x06
    2ce8:	2d 83       	std	Y+5, r18	; 0x05
    2cea:	8d 81       	ldd	r24, Y+5	; 0x05
    2cec:	9e 81       	ldd	r25, Y+6	; 0x06
    2cee:	81 30       	cpi	r24, 0x01	; 1
    2cf0:	91 05       	cpc	r25, r1
    2cf2:	59 f1       	breq	.+86     	; 0x2d4a <DIO_SetPinValue+0x17a>
    2cf4:	2d 81       	ldd	r18, Y+5	; 0x05
    2cf6:	3e 81       	ldd	r19, Y+6	; 0x06
    2cf8:	22 30       	cpi	r18, 0x02	; 2
    2cfa:	31 05       	cpc	r19, r1
    2cfc:	2c f4       	brge	.+10     	; 0x2d08 <DIO_SetPinValue+0x138>
    2cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2d00:	9e 81       	ldd	r25, Y+6	; 0x06
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	69 f0       	breq	.+26     	; 0x2d20 <DIO_SetPinValue+0x150>
    2d06:	60 c0       	rjmp	.+192    	; 0x2dc8 <DIO_SetPinValue+0x1f8>
    2d08:	2d 81       	ldd	r18, Y+5	; 0x05
    2d0a:	3e 81       	ldd	r19, Y+6	; 0x06
    2d0c:	22 30       	cpi	r18, 0x02	; 2
    2d0e:	31 05       	cpc	r19, r1
    2d10:	89 f1       	breq	.+98     	; 0x2d74 <DIO_SetPinValue+0x1a4>
    2d12:	8d 81       	ldd	r24, Y+5	; 0x05
    2d14:	9e 81       	ldd	r25, Y+6	; 0x06
    2d16:	83 30       	cpi	r24, 0x03	; 3
    2d18:	91 05       	cpc	r25, r1
    2d1a:	09 f4       	brne	.+2      	; 0x2d1e <DIO_SetPinValue+0x14e>
    2d1c:	40 c0       	rjmp	.+128    	; 0x2d9e <DIO_SetPinValue+0x1ce>
    2d1e:	54 c0       	rjmp	.+168    	; 0x2dc8 <DIO_SetPinValue+0x1f8>

			case (PORT_A): CLR_BIT(PORTA_REG,PinNum);break;
    2d20:	ab e3       	ldi	r26, 0x3B	; 59
    2d22:	b0 e0       	ldi	r27, 0x00	; 0
    2d24:	eb e3       	ldi	r30, 0x3B	; 59
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	80 81       	ld	r24, Z
    2d2a:	48 2f       	mov	r20, r24
    2d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2e:	28 2f       	mov	r18, r24
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	02 2e       	mov	r0, r18
    2d38:	02 c0       	rjmp	.+4      	; 0x2d3e <DIO_SetPinValue+0x16e>
    2d3a:	88 0f       	add	r24, r24
    2d3c:	99 1f       	adc	r25, r25
    2d3e:	0a 94       	dec	r0
    2d40:	e2 f7       	brpl	.-8      	; 0x2d3a <DIO_SetPinValue+0x16a>
    2d42:	80 95       	com	r24
    2d44:	84 23       	and	r24, r20
    2d46:	8c 93       	st	X, r24
    2d48:	47 c0       	rjmp	.+142    	; 0x2dd8 <DIO_SetPinValue+0x208>
			case (PORT_B): CLR_BIT(PORTB_REG,PinNum);;break;
    2d4a:	a8 e3       	ldi	r26, 0x38	; 56
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	e8 e3       	ldi	r30, 0x38	; 56
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
    2d54:	48 2f       	mov	r20, r24
    2d56:	8b 81       	ldd	r24, Y+3	; 0x03
    2d58:	28 2f       	mov	r18, r24
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	02 2e       	mov	r0, r18
    2d62:	02 c0       	rjmp	.+4      	; 0x2d68 <DIO_SetPinValue+0x198>
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	0a 94       	dec	r0
    2d6a:	e2 f7       	brpl	.-8      	; 0x2d64 <DIO_SetPinValue+0x194>
    2d6c:	80 95       	com	r24
    2d6e:	84 23       	and	r24, r20
    2d70:	8c 93       	st	X, r24
    2d72:	32 c0       	rjmp	.+100    	; 0x2dd8 <DIO_SetPinValue+0x208>
			case (PORT_C): CLR_BIT(PORTC_REG,PinNum);break;
    2d74:	a5 e3       	ldi	r26, 0x35	; 53
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	e5 e3       	ldi	r30, 0x35	; 53
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	80 81       	ld	r24, Z
    2d7e:	48 2f       	mov	r20, r24
    2d80:	8b 81       	ldd	r24, Y+3	; 0x03
    2d82:	28 2f       	mov	r18, r24
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	02 2e       	mov	r0, r18
    2d8c:	02 c0       	rjmp	.+4      	; 0x2d92 <DIO_SetPinValue+0x1c2>
    2d8e:	88 0f       	add	r24, r24
    2d90:	99 1f       	adc	r25, r25
    2d92:	0a 94       	dec	r0
    2d94:	e2 f7       	brpl	.-8      	; 0x2d8e <DIO_SetPinValue+0x1be>
    2d96:	80 95       	com	r24
    2d98:	84 23       	and	r24, r20
    2d9a:	8c 93       	st	X, r24
    2d9c:	1d c0       	rjmp	.+58     	; 0x2dd8 <DIO_SetPinValue+0x208>
			case (PORT_D): CLR_BIT(PORTD_REG,PinNum);break;
    2d9e:	a2 e3       	ldi	r26, 0x32	; 50
    2da0:	b0 e0       	ldi	r27, 0x00	; 0
    2da2:	e2 e3       	ldi	r30, 0x32	; 50
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	80 81       	ld	r24, Z
    2da8:	48 2f       	mov	r20, r24
    2daa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dac:	28 2f       	mov	r18, r24
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	02 2e       	mov	r0, r18
    2db6:	02 c0       	rjmp	.+4      	; 0x2dbc <DIO_SetPinValue+0x1ec>
    2db8:	88 0f       	add	r24, r24
    2dba:	99 1f       	adc	r25, r25
    2dbc:	0a 94       	dec	r0
    2dbe:	e2 f7       	brpl	.-8      	; 0x2db8 <DIO_SetPinValue+0x1e8>
    2dc0:	80 95       	com	r24
    2dc2:	84 23       	and	r24, r20
    2dc4:	8c 93       	st	X, r24
    2dc6:	08 c0       	rjmp	.+16     	; 0x2dd8 <DIO_SetPinValue+0x208>
			default:ErrorState=NOK;break;
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	89 83       	std	Y+1, r24	; 0x01
    2dcc:	05 c0       	rjmp	.+10     	; 0x2dd8 <DIO_SetPinValue+0x208>

			}
		}
		else
		{
			ErrorState =NOK;
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	89 83       	std	Y+1, r24	; 0x01
    2dd2:	02 c0       	rjmp	.+4      	; 0x2dd8 <DIO_SetPinValue+0x208>
		}

	}
	else
	{
		ErrorState=NOK;
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
    2dd6:	89 83       	std	Y+1, r24	; 0x01
	}



	return ErrorState;
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dda:	28 96       	adiw	r28, 0x08	; 8
    2ddc:	0f b6       	in	r0, 0x3f	; 63
    2dde:	f8 94       	cli
    2de0:	de bf       	out	0x3e, r29	; 62
    2de2:	0f be       	out	0x3f, r0	; 63
    2de4:	cd bf       	out	0x3d, r28	; 61
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <DIO_ReadPin>:
u8int_t DIO_ReadPin (u8int_t PortName, u8int_t PinNum, u8int_t *Value)
{
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
    2df4:	27 97       	sbiw	r28, 0x07	; 7
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	de bf       	out	0x3e, r29	; 62
    2dfc:	0f be       	out	0x3f, r0	; 63
    2dfe:	cd bf       	out	0x3d, r28	; 61
    2e00:	8a 83       	std	Y+2, r24	; 0x02
    2e02:	6b 83       	std	Y+3, r22	; 0x03
    2e04:	5d 83       	std	Y+5, r21	; 0x05
    2e06:	4c 83       	std	Y+4, r20	; 0x04
	u8int_t ErrorState=OK;
    2e08:	19 82       	std	Y+1, r1	; 0x01

	if(PinNum>=0 && PinNum<=7)
    2e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0c:	88 30       	cpi	r24, 0x08	; 8
    2e0e:	08 f0       	brcs	.+2      	; 0x2e12 <DIO_ReadPin+0x26>
    2e10:	74 c0       	rjmp	.+232    	; 0x2efa <DIO_ReadPin+0x10e>
	{
		switch(PortName){
    2e12:	8a 81       	ldd	r24, Y+2	; 0x02
    2e14:	28 2f       	mov	r18, r24
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	3f 83       	std	Y+7, r19	; 0x07
    2e1a:	2e 83       	std	Y+6, r18	; 0x06
    2e1c:	4e 81       	ldd	r20, Y+6	; 0x06
    2e1e:	5f 81       	ldd	r21, Y+7	; 0x07
    2e20:	41 30       	cpi	r20, 0x01	; 1
    2e22:	51 05       	cpc	r21, r1
    2e24:	59 f1       	breq	.+86     	; 0x2e7c <DIO_ReadPin+0x90>
    2e26:	8e 81       	ldd	r24, Y+6	; 0x06
    2e28:	9f 81       	ldd	r25, Y+7	; 0x07
    2e2a:	82 30       	cpi	r24, 0x02	; 2
    2e2c:	91 05       	cpc	r25, r1
    2e2e:	34 f4       	brge	.+12     	; 0x2e3c <DIO_ReadPin+0x50>
    2e30:	2e 81       	ldd	r18, Y+6	; 0x06
    2e32:	3f 81       	ldd	r19, Y+7	; 0x07
    2e34:	21 15       	cp	r18, r1
    2e36:	31 05       	cpc	r19, r1
    2e38:	69 f0       	breq	.+26     	; 0x2e54 <DIO_ReadPin+0x68>
    2e3a:	5c c0       	rjmp	.+184    	; 0x2ef4 <DIO_ReadPin+0x108>
    2e3c:	4e 81       	ldd	r20, Y+6	; 0x06
    2e3e:	5f 81       	ldd	r21, Y+7	; 0x07
    2e40:	42 30       	cpi	r20, 0x02	; 2
    2e42:	51 05       	cpc	r21, r1
    2e44:	79 f1       	breq	.+94     	; 0x2ea4 <DIO_ReadPin+0xb8>
    2e46:	8e 81       	ldd	r24, Y+6	; 0x06
    2e48:	9f 81       	ldd	r25, Y+7	; 0x07
    2e4a:	83 30       	cpi	r24, 0x03	; 3
    2e4c:	91 05       	cpc	r25, r1
    2e4e:	09 f4       	brne	.+2      	; 0x2e52 <DIO_ReadPin+0x66>
    2e50:	3d c0       	rjmp	.+122    	; 0x2ecc <DIO_ReadPin+0xe0>
    2e52:	50 c0       	rjmp	.+160    	; 0x2ef4 <DIO_ReadPin+0x108>

		case PORT_A:    *Value=GET_BIT(PINA_REG,PinNum);break;
    2e54:	e9 e3       	ldi	r30, 0x39	; 57
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	80 81       	ld	r24, Z
    2e5a:	28 2f       	mov	r18, r24
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e60:	88 2f       	mov	r24, r24
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	a9 01       	movw	r20, r18
    2e66:	02 c0       	rjmp	.+4      	; 0x2e6c <DIO_ReadPin+0x80>
    2e68:	55 95       	asr	r21
    2e6a:	47 95       	ror	r20
    2e6c:	8a 95       	dec	r24
    2e6e:	e2 f7       	brpl	.-8      	; 0x2e68 <DIO_ReadPin+0x7c>
    2e70:	ca 01       	movw	r24, r20
    2e72:	81 70       	andi	r24, 0x01	; 1
    2e74:	ec 81       	ldd	r30, Y+4	; 0x04
    2e76:	fd 81       	ldd	r31, Y+5	; 0x05
    2e78:	80 83       	st	Z, r24
    2e7a:	41 c0       	rjmp	.+130    	; 0x2efe <DIO_ReadPin+0x112>
		case PORT_B:    *Value=GET_BIT(PINB_REG,PinNum);break;
    2e7c:	e6 e3       	ldi	r30, 0x36	; 54
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	28 2f       	mov	r18, r24
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	88 2f       	mov	r24, r24
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	a9 01       	movw	r20, r18
    2e8e:	02 c0       	rjmp	.+4      	; 0x2e94 <DIO_ReadPin+0xa8>
    2e90:	55 95       	asr	r21
    2e92:	47 95       	ror	r20
    2e94:	8a 95       	dec	r24
    2e96:	e2 f7       	brpl	.-8      	; 0x2e90 <DIO_ReadPin+0xa4>
    2e98:	ca 01       	movw	r24, r20
    2e9a:	81 70       	andi	r24, 0x01	; 1
    2e9c:	ec 81       	ldd	r30, Y+4	; 0x04
    2e9e:	fd 81       	ldd	r31, Y+5	; 0x05
    2ea0:	80 83       	st	Z, r24
    2ea2:	2d c0       	rjmp	.+90     	; 0x2efe <DIO_ReadPin+0x112>
		case PORT_C:    *Value=GET_BIT(PINC_REG,PinNum);break;
    2ea4:	e3 e3       	ldi	r30, 0x33	; 51
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	80 81       	ld	r24, Z
    2eaa:	28 2f       	mov	r18, r24
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb0:	88 2f       	mov	r24, r24
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	a9 01       	movw	r20, r18
    2eb6:	02 c0       	rjmp	.+4      	; 0x2ebc <DIO_ReadPin+0xd0>
    2eb8:	55 95       	asr	r21
    2eba:	47 95       	ror	r20
    2ebc:	8a 95       	dec	r24
    2ebe:	e2 f7       	brpl	.-8      	; 0x2eb8 <DIO_ReadPin+0xcc>
    2ec0:	ca 01       	movw	r24, r20
    2ec2:	81 70       	andi	r24, 0x01	; 1
    2ec4:	ec 81       	ldd	r30, Y+4	; 0x04
    2ec6:	fd 81       	ldd	r31, Y+5	; 0x05
    2ec8:	80 83       	st	Z, r24
    2eca:	19 c0       	rjmp	.+50     	; 0x2efe <DIO_ReadPin+0x112>
		case PORT_D:    *Value=GET_BIT(PIND_REG,PinNum);break;
    2ecc:	e0 e3       	ldi	r30, 0x30	; 48
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	80 81       	ld	r24, Z
    2ed2:	28 2f       	mov	r18, r24
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed8:	88 2f       	mov	r24, r24
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	a9 01       	movw	r20, r18
    2ede:	02 c0       	rjmp	.+4      	; 0x2ee4 <DIO_ReadPin+0xf8>
    2ee0:	55 95       	asr	r21
    2ee2:	47 95       	ror	r20
    2ee4:	8a 95       	dec	r24
    2ee6:	e2 f7       	brpl	.-8      	; 0x2ee0 <DIO_ReadPin+0xf4>
    2ee8:	ca 01       	movw	r24, r20
    2eea:	81 70       	andi	r24, 0x01	; 1
    2eec:	ec 81       	ldd	r30, Y+4	; 0x04
    2eee:	fd 81       	ldd	r31, Y+5	; 0x05
    2ef0:	80 83       	st	Z, r24
    2ef2:	05 c0       	rjmp	.+10     	; 0x2efe <DIO_ReadPin+0x112>
		default:ErrorState=NOK;break;
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	89 83       	std	Y+1, r24	; 0x01
    2ef8:	02 c0       	rjmp	.+4      	; 0x2efe <DIO_ReadPin+0x112>

		}
	}
	else
	{
		ErrorState=NOK;
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    2efe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f00:	27 96       	adiw	r28, 0x07	; 7
    2f02:	0f b6       	in	r0, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	de bf       	out	0x3e, r29	; 62
    2f08:	0f be       	out	0x3f, r0	; 63
    2f0a:	cd bf       	out	0x3d, r28	; 61
    2f0c:	cf 91       	pop	r28
    2f0e:	df 91       	pop	r29
    2f10:	08 95       	ret

00002f12 <TogglePin>:

u8int_t TogglePin(u8int_t PortId,u8int_t PinId)
{
    2f12:	df 93       	push	r29
    2f14:	cf 93       	push	r28
    2f16:	00 d0       	rcall	.+0      	; 0x2f18 <TogglePin+0x6>
    2f18:	00 d0       	rcall	.+0      	; 0x2f1a <TogglePin+0x8>
    2f1a:	0f 92       	push	r0
    2f1c:	cd b7       	in	r28, 0x3d	; 61
    2f1e:	de b7       	in	r29, 0x3e	; 62
    2f20:	8a 83       	std	Y+2, r24	; 0x02
    2f22:	6b 83       	std	Y+3, r22	; 0x03
	u8int_t ErrorState=OK;
    2f24:	19 82       	std	Y+1, r1	; 0x01
	switch(PortId){
    2f26:	8a 81       	ldd	r24, Y+2	; 0x02
    2f28:	28 2f       	mov	r18, r24
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	3d 83       	std	Y+5, r19	; 0x05
    2f2e:	2c 83       	std	Y+4, r18	; 0x04
    2f30:	8c 81       	ldd	r24, Y+4	; 0x04
    2f32:	9d 81       	ldd	r25, Y+5	; 0x05
    2f34:	81 30       	cpi	r24, 0x01	; 1
    2f36:	91 05       	cpc	r25, r1
    2f38:	09 f4       	brne	.+2      	; 0x2f3c <TogglePin+0x2a>
    2f3a:	3d c0       	rjmp	.+122    	; 0x2fb6 <TogglePin+0xa4>
    2f3c:	2c 81       	ldd	r18, Y+4	; 0x04
    2f3e:	3d 81       	ldd	r19, Y+5	; 0x05
    2f40:	22 30       	cpi	r18, 0x02	; 2
    2f42:	31 05       	cpc	r19, r1
    2f44:	2c f4       	brge	.+10     	; 0x2f50 <TogglePin+0x3e>
    2f46:	8c 81       	ldd	r24, Y+4	; 0x04
    2f48:	9d 81       	ldd	r25, Y+5	; 0x05
    2f4a:	00 97       	sbiw	r24, 0x00	; 0
    2f4c:	71 f0       	breq	.+28     	; 0x2f6a <TogglePin+0x58>
    2f4e:	a5 c0       	rjmp	.+330    	; 0x309a <TogglePin+0x188>
    2f50:	2c 81       	ldd	r18, Y+4	; 0x04
    2f52:	3d 81       	ldd	r19, Y+5	; 0x05
    2f54:	22 30       	cpi	r18, 0x02	; 2
    2f56:	31 05       	cpc	r19, r1
    2f58:	09 f4       	brne	.+2      	; 0x2f5c <TogglePin+0x4a>
    2f5a:	53 c0       	rjmp	.+166    	; 0x3002 <TogglePin+0xf0>
    2f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f5e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f60:	83 30       	cpi	r24, 0x03	; 3
    2f62:	91 05       	cpc	r25, r1
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <TogglePin+0x56>
    2f66:	73 c0       	rjmp	.+230    	; 0x304e <TogglePin+0x13c>
    2f68:	98 c0       	rjmp	.+304    	; 0x309a <TogglePin+0x188>
	case PORT_A: SET_BIT(DDRA_REG,PinId);TOG_BIT(PORTA_REG,PinId);break;
    2f6a:	aa e3       	ldi	r26, 0x3A	; 58
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	ea e3       	ldi	r30, 0x3A	; 58
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	80 81       	ld	r24, Z
    2f74:	48 2f       	mov	r20, r24
    2f76:	8b 81       	ldd	r24, Y+3	; 0x03
    2f78:	28 2f       	mov	r18, r24
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	02 c0       	rjmp	.+4      	; 0x2f86 <TogglePin+0x74>
    2f82:	88 0f       	add	r24, r24
    2f84:	99 1f       	adc	r25, r25
    2f86:	2a 95       	dec	r18
    2f88:	e2 f7       	brpl	.-8      	; 0x2f82 <TogglePin+0x70>
    2f8a:	84 2b       	or	r24, r20
    2f8c:	8c 93       	st	X, r24
    2f8e:	ab e3       	ldi	r26, 0x3B	; 59
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	eb e3       	ldi	r30, 0x3B	; 59
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	48 2f       	mov	r20, r24
    2f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	02 2e       	mov	r0, r18
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <TogglePin+0x9a>
    2fa8:	88 0f       	add	r24, r24
    2faa:	99 1f       	adc	r25, r25
    2fac:	0a 94       	dec	r0
    2fae:	e2 f7       	brpl	.-8      	; 0x2fa8 <TogglePin+0x96>
    2fb0:	84 27       	eor	r24, r20
    2fb2:	8c 93       	st	X, r24
    2fb4:	74 c0       	rjmp	.+232    	; 0x309e <TogglePin+0x18c>
	case PORT_B: SET_BIT(DDRB_REG,PinId);TOG_BIT(PORTB_REG,PinId);break;
    2fb6:	a7 e3       	ldi	r26, 0x37	; 55
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	e7 e3       	ldi	r30, 0x37	; 55
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	80 81       	ld	r24, Z
    2fc0:	48 2f       	mov	r20, r24
    2fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc4:	28 2f       	mov	r18, r24
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	02 c0       	rjmp	.+4      	; 0x2fd2 <TogglePin+0xc0>
    2fce:	88 0f       	add	r24, r24
    2fd0:	99 1f       	adc	r25, r25
    2fd2:	2a 95       	dec	r18
    2fd4:	e2 f7       	brpl	.-8      	; 0x2fce <TogglePin+0xbc>
    2fd6:	84 2b       	or	r24, r20
    2fd8:	8c 93       	st	X, r24
    2fda:	a8 e3       	ldi	r26, 0x38	; 56
    2fdc:	b0 e0       	ldi	r27, 0x00	; 0
    2fde:	e8 e3       	ldi	r30, 0x38	; 56
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	80 81       	ld	r24, Z
    2fe4:	48 2f       	mov	r20, r24
    2fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe8:	28 2f       	mov	r18, r24
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	02 2e       	mov	r0, r18
    2ff2:	02 c0       	rjmp	.+4      	; 0x2ff8 <TogglePin+0xe6>
    2ff4:	88 0f       	add	r24, r24
    2ff6:	99 1f       	adc	r25, r25
    2ff8:	0a 94       	dec	r0
    2ffa:	e2 f7       	brpl	.-8      	; 0x2ff4 <TogglePin+0xe2>
    2ffc:	84 27       	eor	r24, r20
    2ffe:	8c 93       	st	X, r24
    3000:	4e c0       	rjmp	.+156    	; 0x309e <TogglePin+0x18c>
	case PORT_C: SET_BIT(DDRC_REG,PinId);TOG_BIT(PORTC_REG,PinId);break;
    3002:	a4 e3       	ldi	r26, 0x34	; 52
    3004:	b0 e0       	ldi	r27, 0x00	; 0
    3006:	e4 e3       	ldi	r30, 0x34	; 52
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	80 81       	ld	r24, Z
    300c:	48 2f       	mov	r20, r24
    300e:	8b 81       	ldd	r24, Y+3	; 0x03
    3010:	28 2f       	mov	r18, r24
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	02 c0       	rjmp	.+4      	; 0x301e <TogglePin+0x10c>
    301a:	88 0f       	add	r24, r24
    301c:	99 1f       	adc	r25, r25
    301e:	2a 95       	dec	r18
    3020:	e2 f7       	brpl	.-8      	; 0x301a <TogglePin+0x108>
    3022:	84 2b       	or	r24, r20
    3024:	8c 93       	st	X, r24
    3026:	a5 e3       	ldi	r26, 0x35	; 53
    3028:	b0 e0       	ldi	r27, 0x00	; 0
    302a:	e5 e3       	ldi	r30, 0x35	; 53
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	80 81       	ld	r24, Z
    3030:	48 2f       	mov	r20, r24
    3032:	8b 81       	ldd	r24, Y+3	; 0x03
    3034:	28 2f       	mov	r18, r24
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	02 2e       	mov	r0, r18
    303e:	02 c0       	rjmp	.+4      	; 0x3044 <TogglePin+0x132>
    3040:	88 0f       	add	r24, r24
    3042:	99 1f       	adc	r25, r25
    3044:	0a 94       	dec	r0
    3046:	e2 f7       	brpl	.-8      	; 0x3040 <TogglePin+0x12e>
    3048:	84 27       	eor	r24, r20
    304a:	8c 93       	st	X, r24
    304c:	28 c0       	rjmp	.+80     	; 0x309e <TogglePin+0x18c>
	case PORT_D: SET_BIT(DDRD_REG,PinId);TOG_BIT(PORTD_REG,PinId);break;
    304e:	a1 e3       	ldi	r26, 0x31	; 49
    3050:	b0 e0       	ldi	r27, 0x00	; 0
    3052:	e1 e3       	ldi	r30, 0x31	; 49
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	80 81       	ld	r24, Z
    3058:	48 2f       	mov	r20, r24
    305a:	8b 81       	ldd	r24, Y+3	; 0x03
    305c:	28 2f       	mov	r18, r24
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	02 c0       	rjmp	.+4      	; 0x306a <TogglePin+0x158>
    3066:	88 0f       	add	r24, r24
    3068:	99 1f       	adc	r25, r25
    306a:	2a 95       	dec	r18
    306c:	e2 f7       	brpl	.-8      	; 0x3066 <TogglePin+0x154>
    306e:	84 2b       	or	r24, r20
    3070:	8c 93       	st	X, r24
    3072:	a2 e3       	ldi	r26, 0x32	; 50
    3074:	b0 e0       	ldi	r27, 0x00	; 0
    3076:	e2 e3       	ldi	r30, 0x32	; 50
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	80 81       	ld	r24, Z
    307c:	48 2f       	mov	r20, r24
    307e:	8b 81       	ldd	r24, Y+3	; 0x03
    3080:	28 2f       	mov	r18, r24
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	02 2e       	mov	r0, r18
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <TogglePin+0x17e>
    308c:	88 0f       	add	r24, r24
    308e:	99 1f       	adc	r25, r25
    3090:	0a 94       	dec	r0
    3092:	e2 f7       	brpl	.-8      	; 0x308c <TogglePin+0x17a>
    3094:	84 27       	eor	r24, r20
    3096:	8c 93       	st	X, r24
    3098:	02 c0       	rjmp	.+4      	; 0x309e <TogglePin+0x18c>
	default:ErrorState=NOK;break;
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	89 83       	std	Y+1, r24	; 0x01

	}
	return ErrorState;
    309e:	89 81       	ldd	r24, Y+1	; 0x01
}
    30a0:	0f 90       	pop	r0
    30a2:	0f 90       	pop	r0
    30a4:	0f 90       	pop	r0
    30a6:	0f 90       	pop	r0
    30a8:	0f 90       	pop	r0
    30aa:	cf 91       	pop	r28
    30ac:	df 91       	pop	r29
    30ae:	08 95       	ret

000030b0 <DIO_SetPortDirection>:

u8int_t DIO_SetPortDirection(u8int_t PortId, u8int_t PortDir)
{
    30b0:	df 93       	push	r29
    30b2:	cf 93       	push	r28
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
    30b8:	27 97       	sbiw	r28, 0x07	; 7
    30ba:	0f b6       	in	r0, 0x3f	; 63
    30bc:	f8 94       	cli
    30be:	de bf       	out	0x3e, r29	; 62
    30c0:	0f be       	out	0x3f, r0	; 63
    30c2:	cd bf       	out	0x3d, r28	; 61
    30c4:	8a 83       	std	Y+2, r24	; 0x02
    30c6:	6b 83       	std	Y+3, r22	; 0x03
	u8int_t ErrState=OK;
    30c8:	19 82       	std	Y+1, r1	; 0x01
	if(PortDir == PORT_IN)
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	88 23       	and	r24, r24
    30ce:	91 f5       	brne	.+100    	; 0x3134 <DIO_SetPortDirection+0x84>
	{
		switch(PortId){
    30d0:	8a 81       	ldd	r24, Y+2	; 0x02
    30d2:	28 2f       	mov	r18, r24
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	3f 83       	std	Y+7, r19	; 0x07
    30d8:	2e 83       	std	Y+6, r18	; 0x06
    30da:	8e 81       	ldd	r24, Y+6	; 0x06
    30dc:	9f 81       	ldd	r25, Y+7	; 0x07
    30de:	81 30       	cpi	r24, 0x01	; 1
    30e0:	91 05       	cpc	r25, r1
    30e2:	c9 f0       	breq	.+50     	; 0x3116 <DIO_SetPortDirection+0x66>
    30e4:	2e 81       	ldd	r18, Y+6	; 0x06
    30e6:	3f 81       	ldd	r19, Y+7	; 0x07
    30e8:	22 30       	cpi	r18, 0x02	; 2
    30ea:	31 05       	cpc	r19, r1
    30ec:	2c f4       	brge	.+10     	; 0x30f8 <DIO_SetPortDirection+0x48>
    30ee:	8e 81       	ldd	r24, Y+6	; 0x06
    30f0:	9f 81       	ldd	r25, Y+7	; 0x07
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	61 f0       	breq	.+24     	; 0x310e <DIO_SetPortDirection+0x5e>
    30f6:	1b c0       	rjmp	.+54     	; 0x312e <DIO_SetPortDirection+0x7e>
    30f8:	2e 81       	ldd	r18, Y+6	; 0x06
    30fa:	3f 81       	ldd	r19, Y+7	; 0x07
    30fc:	22 30       	cpi	r18, 0x02	; 2
    30fe:	31 05       	cpc	r19, r1
    3100:	71 f0       	breq	.+28     	; 0x311e <DIO_SetPortDirection+0x6e>
    3102:	8e 81       	ldd	r24, Y+6	; 0x06
    3104:	9f 81       	ldd	r25, Y+7	; 0x07
    3106:	83 30       	cpi	r24, 0x03	; 3
    3108:	91 05       	cpc	r25, r1
    310a:	69 f0       	breq	.+26     	; 0x3126 <DIO_SetPortDirection+0x76>
    310c:	10 c0       	rjmp	.+32     	; 0x312e <DIO_SetPortDirection+0x7e>
		case PORT_A: DDRA_REG=PORT_IN;break;
    310e:	ea e3       	ldi	r30, 0x3A	; 58
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	10 82       	st	Z, r1
    3114:	4a c0       	rjmp	.+148    	; 0x31aa <DIO_SetPortDirection+0xfa>
		case PORT_B: DDRA_REG=PORT_IN;break;
    3116:	ea e3       	ldi	r30, 0x3A	; 58
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	10 82       	st	Z, r1
    311c:	46 c0       	rjmp	.+140    	; 0x31aa <DIO_SetPortDirection+0xfa>
		case PORT_C: DDRA_REG=PORT_IN;break;
    311e:	ea e3       	ldi	r30, 0x3A	; 58
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	10 82       	st	Z, r1
    3124:	42 c0       	rjmp	.+132    	; 0x31aa <DIO_SetPortDirection+0xfa>
		case PORT_D: DDRA_REG=PORT_IN;break;
    3126:	ea e3       	ldi	r30, 0x3A	; 58
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	10 82       	st	Z, r1
    312c:	3e c0       	rjmp	.+124    	; 0x31aa <DIO_SetPortDirection+0xfa>
		default:ErrState=NOK;break;
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	89 83       	std	Y+1, r24	; 0x01
    3132:	3b c0       	rjmp	.+118    	; 0x31aa <DIO_SetPortDirection+0xfa>

		}
	}
	else if (PortDir == PORT_OUT)
    3134:	8b 81       	ldd	r24, Y+3	; 0x03
    3136:	8f 3f       	cpi	r24, 0xFF	; 255
    3138:	b1 f5       	brne	.+108    	; 0x31a6 <DIO_SetPortDirection+0xf6>
	{
		switch(PortId){
    313a:	8a 81       	ldd	r24, Y+2	; 0x02
    313c:	28 2f       	mov	r18, r24
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	3d 83       	std	Y+5, r19	; 0x05
    3142:	2c 83       	std	Y+4, r18	; 0x04
    3144:	8c 81       	ldd	r24, Y+4	; 0x04
    3146:	9d 81       	ldd	r25, Y+5	; 0x05
    3148:	81 30       	cpi	r24, 0x01	; 1
    314a:	91 05       	cpc	r25, r1
    314c:	d1 f0       	breq	.+52     	; 0x3182 <DIO_SetPortDirection+0xd2>
    314e:	2c 81       	ldd	r18, Y+4	; 0x04
    3150:	3d 81       	ldd	r19, Y+5	; 0x05
    3152:	22 30       	cpi	r18, 0x02	; 2
    3154:	31 05       	cpc	r19, r1
    3156:	2c f4       	brge	.+10     	; 0x3162 <DIO_SetPortDirection+0xb2>
    3158:	8c 81       	ldd	r24, Y+4	; 0x04
    315a:	9d 81       	ldd	r25, Y+5	; 0x05
    315c:	00 97       	sbiw	r24, 0x00	; 0
    315e:	61 f0       	breq	.+24     	; 0x3178 <DIO_SetPortDirection+0xc8>
    3160:	1f c0       	rjmp	.+62     	; 0x31a0 <DIO_SetPortDirection+0xf0>
    3162:	2c 81       	ldd	r18, Y+4	; 0x04
    3164:	3d 81       	ldd	r19, Y+5	; 0x05
    3166:	22 30       	cpi	r18, 0x02	; 2
    3168:	31 05       	cpc	r19, r1
    316a:	81 f0       	breq	.+32     	; 0x318c <DIO_SetPortDirection+0xdc>
    316c:	8c 81       	ldd	r24, Y+4	; 0x04
    316e:	9d 81       	ldd	r25, Y+5	; 0x05
    3170:	83 30       	cpi	r24, 0x03	; 3
    3172:	91 05       	cpc	r25, r1
    3174:	81 f0       	breq	.+32     	; 0x3196 <DIO_SetPortDirection+0xe6>
    3176:	14 c0       	rjmp	.+40     	; 0x31a0 <DIO_SetPortDirection+0xf0>
		case PORT_A: DDRA_REG=PORT_OUT;break;
    3178:	ea e3       	ldi	r30, 0x3A	; 58
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	8f ef       	ldi	r24, 0xFF	; 255
    317e:	80 83       	st	Z, r24
    3180:	14 c0       	rjmp	.+40     	; 0x31aa <DIO_SetPortDirection+0xfa>
		case PORT_B: DDRA_REG=PORT_OUT;break;
    3182:	ea e3       	ldi	r30, 0x3A	; 58
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	8f ef       	ldi	r24, 0xFF	; 255
    3188:	80 83       	st	Z, r24
    318a:	0f c0       	rjmp	.+30     	; 0x31aa <DIO_SetPortDirection+0xfa>
		case PORT_C: DDRA_REG=PORT_OUT;break;
    318c:	ea e3       	ldi	r30, 0x3A	; 58
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	8f ef       	ldi	r24, 0xFF	; 255
    3192:	80 83       	st	Z, r24
    3194:	0a c0       	rjmp	.+20     	; 0x31aa <DIO_SetPortDirection+0xfa>
		case PORT_D: DDRA_REG=PORT_OUT;break;
    3196:	ea e3       	ldi	r30, 0x3A	; 58
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	8f ef       	ldi	r24, 0xFF	; 255
    319c:	80 83       	st	Z, r24
    319e:	05 c0       	rjmp	.+10     	; 0x31aa <DIO_SetPortDirection+0xfa>
		default:ErrState=NOK;break;
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	89 83       	std	Y+1, r24	; 0x01
    31a4:	02 c0       	rjmp	.+4      	; 0x31aa <DIO_SetPortDirection+0xfa>
		}
	}

	else
	{
		ErrState=NOK;
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrState;
    31aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    31ac:	27 96       	adiw	r28, 0x07	; 7
    31ae:	0f b6       	in	r0, 0x3f	; 63
    31b0:	f8 94       	cli
    31b2:	de bf       	out	0x3e, r29	; 62
    31b4:	0f be       	out	0x3f, r0	; 63
    31b6:	cd bf       	out	0x3d, r28	; 61
    31b8:	cf 91       	pop	r28
    31ba:	df 91       	pop	r29
    31bc:	08 95       	ret

000031be <DIO_SetPortValue>:
u8int_t DIO_SetPortValue(u8int_t PortId, u8int_t PortVal)
{
    31be:	df 93       	push	r29
    31c0:	cf 93       	push	r28
    31c2:	cd b7       	in	r28, 0x3d	; 61
    31c4:	de b7       	in	r29, 0x3e	; 62
    31c6:	27 97       	sbiw	r28, 0x07	; 7
    31c8:	0f b6       	in	r0, 0x3f	; 63
    31ca:	f8 94       	cli
    31cc:	de bf       	out	0x3e, r29	; 62
    31ce:	0f be       	out	0x3f, r0	; 63
    31d0:	cd bf       	out	0x3d, r28	; 61
    31d2:	8a 83       	std	Y+2, r24	; 0x02
    31d4:	6b 83       	std	Y+3, r22	; 0x03
	u8int_t ErrorState=OK;
    31d6:	19 82       	std	Y+1, r1	; 0x01
	if(PortVal == PORT_HIGH)
    31d8:	8b 81       	ldd	r24, Y+3	; 0x03
    31da:	8f 3f       	cpi	r24, 0xFF	; 255
    31dc:	b1 f5       	brne	.+108    	; 0x324a <DIO_SetPortValue+0x8c>
	{
		switch(PortId){
    31de:	8a 81       	ldd	r24, Y+2	; 0x02
    31e0:	28 2f       	mov	r18, r24
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	3f 83       	std	Y+7, r19	; 0x07
    31e6:	2e 83       	std	Y+6, r18	; 0x06
    31e8:	8e 81       	ldd	r24, Y+6	; 0x06
    31ea:	9f 81       	ldd	r25, Y+7	; 0x07
    31ec:	81 30       	cpi	r24, 0x01	; 1
    31ee:	91 05       	cpc	r25, r1
    31f0:	d1 f0       	breq	.+52     	; 0x3226 <DIO_SetPortValue+0x68>
    31f2:	2e 81       	ldd	r18, Y+6	; 0x06
    31f4:	3f 81       	ldd	r19, Y+7	; 0x07
    31f6:	22 30       	cpi	r18, 0x02	; 2
    31f8:	31 05       	cpc	r19, r1
    31fa:	2c f4       	brge	.+10     	; 0x3206 <DIO_SetPortValue+0x48>
    31fc:	8e 81       	ldd	r24, Y+6	; 0x06
    31fe:	9f 81       	ldd	r25, Y+7	; 0x07
    3200:	00 97       	sbiw	r24, 0x00	; 0
    3202:	61 f0       	breq	.+24     	; 0x321c <DIO_SetPortValue+0x5e>
    3204:	1f c0       	rjmp	.+62     	; 0x3244 <DIO_SetPortValue+0x86>
    3206:	2e 81       	ldd	r18, Y+6	; 0x06
    3208:	3f 81       	ldd	r19, Y+7	; 0x07
    320a:	22 30       	cpi	r18, 0x02	; 2
    320c:	31 05       	cpc	r19, r1
    320e:	81 f0       	breq	.+32     	; 0x3230 <DIO_SetPortValue+0x72>
    3210:	8e 81       	ldd	r24, Y+6	; 0x06
    3212:	9f 81       	ldd	r25, Y+7	; 0x07
    3214:	83 30       	cpi	r24, 0x03	; 3
    3216:	91 05       	cpc	r25, r1
    3218:	81 f0       	breq	.+32     	; 0x323a <DIO_SetPortValue+0x7c>
    321a:	14 c0       	rjmp	.+40     	; 0x3244 <DIO_SetPortValue+0x86>
		case PORT_A: PORTA_REG=PORT_HIGH;break;
    321c:	eb e3       	ldi	r30, 0x3B	; 59
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	8f ef       	ldi	r24, 0xFF	; 255
    3222:	80 83       	st	Z, r24
    3224:	49 c0       	rjmp	.+146    	; 0x32b8 <DIO_SetPortValue+0xfa>
		case PORT_B: PORTB_REG=PORT_HIGH;break;
    3226:	e8 e3       	ldi	r30, 0x38	; 56
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	8f ef       	ldi	r24, 0xFF	; 255
    322c:	80 83       	st	Z, r24
    322e:	44 c0       	rjmp	.+136    	; 0x32b8 <DIO_SetPortValue+0xfa>
		case PORT_C: PORTC_REG=PORT_HIGH;break;
    3230:	e5 e3       	ldi	r30, 0x35	; 53
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	8f ef       	ldi	r24, 0xFF	; 255
    3236:	80 83       	st	Z, r24
    3238:	3f c0       	rjmp	.+126    	; 0x32b8 <DIO_SetPortValue+0xfa>
		case PORT_D: PORTD_REG=PORT_HIGH;break;
    323a:	e2 e3       	ldi	r30, 0x32	; 50
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	8f ef       	ldi	r24, 0xFF	; 255
    3240:	80 83       	st	Z, r24
    3242:	3a c0       	rjmp	.+116    	; 0x32b8 <DIO_SetPortValue+0xfa>
		default:ErrorState=NOK;break;
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	89 83       	std	Y+1, r24	; 0x01
    3248:	37 c0       	rjmp	.+110    	; 0x32b8 <DIO_SetPortValue+0xfa>

		}


	}
	else if (PortVal == PORT_LOW)
    324a:	8b 81       	ldd	r24, Y+3	; 0x03
    324c:	88 23       	and	r24, r24
    324e:	91 f5       	brne	.+100    	; 0x32b4 <DIO_SetPortValue+0xf6>
	{
		switch(PortId){
    3250:	8a 81       	ldd	r24, Y+2	; 0x02
    3252:	28 2f       	mov	r18, r24
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	3d 83       	std	Y+5, r19	; 0x05
    3258:	2c 83       	std	Y+4, r18	; 0x04
    325a:	8c 81       	ldd	r24, Y+4	; 0x04
    325c:	9d 81       	ldd	r25, Y+5	; 0x05
    325e:	81 30       	cpi	r24, 0x01	; 1
    3260:	91 05       	cpc	r25, r1
    3262:	c9 f0       	breq	.+50     	; 0x3296 <DIO_SetPortValue+0xd8>
    3264:	2c 81       	ldd	r18, Y+4	; 0x04
    3266:	3d 81       	ldd	r19, Y+5	; 0x05
    3268:	22 30       	cpi	r18, 0x02	; 2
    326a:	31 05       	cpc	r19, r1
    326c:	2c f4       	brge	.+10     	; 0x3278 <DIO_SetPortValue+0xba>
    326e:	8c 81       	ldd	r24, Y+4	; 0x04
    3270:	9d 81       	ldd	r25, Y+5	; 0x05
    3272:	00 97       	sbiw	r24, 0x00	; 0
    3274:	61 f0       	breq	.+24     	; 0x328e <DIO_SetPortValue+0xd0>
    3276:	1b c0       	rjmp	.+54     	; 0x32ae <DIO_SetPortValue+0xf0>
    3278:	2c 81       	ldd	r18, Y+4	; 0x04
    327a:	3d 81       	ldd	r19, Y+5	; 0x05
    327c:	22 30       	cpi	r18, 0x02	; 2
    327e:	31 05       	cpc	r19, r1
    3280:	71 f0       	breq	.+28     	; 0x329e <DIO_SetPortValue+0xe0>
    3282:	8c 81       	ldd	r24, Y+4	; 0x04
    3284:	9d 81       	ldd	r25, Y+5	; 0x05
    3286:	83 30       	cpi	r24, 0x03	; 3
    3288:	91 05       	cpc	r25, r1
    328a:	69 f0       	breq	.+26     	; 0x32a6 <DIO_SetPortValue+0xe8>
    328c:	10 c0       	rjmp	.+32     	; 0x32ae <DIO_SetPortValue+0xf0>
		case PORT_A: PORTA_REG=PORT_LOW;break;
    328e:	eb e3       	ldi	r30, 0x3B	; 59
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	10 82       	st	Z, r1
    3294:	11 c0       	rjmp	.+34     	; 0x32b8 <DIO_SetPortValue+0xfa>
		case PORT_B: PORTB_REG=PORT_LOW;break;
    3296:	e8 e3       	ldi	r30, 0x38	; 56
    3298:	f0 e0       	ldi	r31, 0x00	; 0
    329a:	10 82       	st	Z, r1
    329c:	0d c0       	rjmp	.+26     	; 0x32b8 <DIO_SetPortValue+0xfa>
		case PORT_C: PORTC_REG=PORT_LOW;break;
    329e:	e5 e3       	ldi	r30, 0x35	; 53
    32a0:	f0 e0       	ldi	r31, 0x00	; 0
    32a2:	10 82       	st	Z, r1
    32a4:	09 c0       	rjmp	.+18     	; 0x32b8 <DIO_SetPortValue+0xfa>
		case PORT_D: PORTD_REG=PORT_LOW;break;
    32a6:	e2 e3       	ldi	r30, 0x32	; 50
    32a8:	f0 e0       	ldi	r31, 0x00	; 0
    32aa:	10 82       	st	Z, r1
    32ac:	05 c0       	rjmp	.+10     	; 0x32b8 <DIO_SetPortValue+0xfa>
		default:ErrorState=NOK;break;
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	89 83       	std	Y+1, r24	; 0x01
    32b2:	02 c0       	rjmp	.+4      	; 0x32b8 <DIO_SetPortValue+0xfa>


	}
	else
	{
		ErrorState=NOK;
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    32b8:	89 81       	ldd	r24, Y+1	; 0x01

}
    32ba:	27 96       	adiw	r28, 0x07	; 7
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	f8 94       	cli
    32c0:	de bf       	out	0x3e, r29	; 62
    32c2:	0f be       	out	0x3f, r0	; 63
    32c4:	cd bf       	out	0x3d, r28	; 61
    32c6:	cf 91       	pop	r28
    32c8:	df 91       	pop	r29
    32ca:	08 95       	ret

000032cc <__udivmodsi4>:
    32cc:	a1 e2       	ldi	r26, 0x21	; 33
    32ce:	1a 2e       	mov	r1, r26
    32d0:	aa 1b       	sub	r26, r26
    32d2:	bb 1b       	sub	r27, r27
    32d4:	fd 01       	movw	r30, r26
    32d6:	0d c0       	rjmp	.+26     	; 0x32f2 <__udivmodsi4_ep>

000032d8 <__udivmodsi4_loop>:
    32d8:	aa 1f       	adc	r26, r26
    32da:	bb 1f       	adc	r27, r27
    32dc:	ee 1f       	adc	r30, r30
    32de:	ff 1f       	adc	r31, r31
    32e0:	a2 17       	cp	r26, r18
    32e2:	b3 07       	cpc	r27, r19
    32e4:	e4 07       	cpc	r30, r20
    32e6:	f5 07       	cpc	r31, r21
    32e8:	20 f0       	brcs	.+8      	; 0x32f2 <__udivmodsi4_ep>
    32ea:	a2 1b       	sub	r26, r18
    32ec:	b3 0b       	sbc	r27, r19
    32ee:	e4 0b       	sbc	r30, r20
    32f0:	f5 0b       	sbc	r31, r21

000032f2 <__udivmodsi4_ep>:
    32f2:	66 1f       	adc	r22, r22
    32f4:	77 1f       	adc	r23, r23
    32f6:	88 1f       	adc	r24, r24
    32f8:	99 1f       	adc	r25, r25
    32fa:	1a 94       	dec	r1
    32fc:	69 f7       	brne	.-38     	; 0x32d8 <__udivmodsi4_loop>
    32fe:	60 95       	com	r22
    3300:	70 95       	com	r23
    3302:	80 95       	com	r24
    3304:	90 95       	com	r25
    3306:	9b 01       	movw	r18, r22
    3308:	ac 01       	movw	r20, r24
    330a:	bd 01       	movw	r22, r26
    330c:	cf 01       	movw	r24, r30
    330e:	08 95       	ret

00003310 <__prologue_saves__>:
    3310:	2f 92       	push	r2
    3312:	3f 92       	push	r3
    3314:	4f 92       	push	r4
    3316:	5f 92       	push	r5
    3318:	6f 92       	push	r6
    331a:	7f 92       	push	r7
    331c:	8f 92       	push	r8
    331e:	9f 92       	push	r9
    3320:	af 92       	push	r10
    3322:	bf 92       	push	r11
    3324:	cf 92       	push	r12
    3326:	df 92       	push	r13
    3328:	ef 92       	push	r14
    332a:	ff 92       	push	r15
    332c:	0f 93       	push	r16
    332e:	1f 93       	push	r17
    3330:	cf 93       	push	r28
    3332:	df 93       	push	r29
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
    3338:	ca 1b       	sub	r28, r26
    333a:	db 0b       	sbc	r29, r27
    333c:	0f b6       	in	r0, 0x3f	; 63
    333e:	f8 94       	cli
    3340:	de bf       	out	0x3e, r29	; 62
    3342:	0f be       	out	0x3f, r0	; 63
    3344:	cd bf       	out	0x3d, r28	; 61
    3346:	09 94       	ijmp

00003348 <__epilogue_restores__>:
    3348:	2a 88       	ldd	r2, Y+18	; 0x12
    334a:	39 88       	ldd	r3, Y+17	; 0x11
    334c:	48 88       	ldd	r4, Y+16	; 0x10
    334e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3350:	6e 84       	ldd	r6, Y+14	; 0x0e
    3352:	7d 84       	ldd	r7, Y+13	; 0x0d
    3354:	8c 84       	ldd	r8, Y+12	; 0x0c
    3356:	9b 84       	ldd	r9, Y+11	; 0x0b
    3358:	aa 84       	ldd	r10, Y+10	; 0x0a
    335a:	b9 84       	ldd	r11, Y+9	; 0x09
    335c:	c8 84       	ldd	r12, Y+8	; 0x08
    335e:	df 80       	ldd	r13, Y+7	; 0x07
    3360:	ee 80       	ldd	r14, Y+6	; 0x06
    3362:	fd 80       	ldd	r15, Y+5	; 0x05
    3364:	0c 81       	ldd	r16, Y+4	; 0x04
    3366:	1b 81       	ldd	r17, Y+3	; 0x03
    3368:	aa 81       	ldd	r26, Y+2	; 0x02
    336a:	b9 81       	ldd	r27, Y+1	; 0x01
    336c:	ce 0f       	add	r28, r30
    336e:	d1 1d       	adc	r29, r1
    3370:	0f b6       	in	r0, 0x3f	; 63
    3372:	f8 94       	cli
    3374:	de bf       	out	0x3e, r29	; 62
    3376:	0f be       	out	0x3f, r0	; 63
    3378:	cd bf       	out	0x3d, r28	; 61
    337a:	ed 01       	movw	r28, r26
    337c:	08 95       	ret

0000337e <_exit>:
    337e:	f8 94       	cli

00003380 <__stop_program>:
    3380:	ff cf       	rjmp	.-2      	; 0x3380 <__stop_program>
