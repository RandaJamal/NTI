
Simple_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00003c2e  00003cc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800088  00800088  00003cea  2**0
                  ALLOC
  3 .stab         00002604  00000000  00000000  00003cec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d0d  00000000  00000000  000062f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000713d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000072ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009de1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ab90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000acf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000af7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b74b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <main>
      8a:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 de 1d 	jmp	0x3bbc	; 0x3bbc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fa 1d 	jmp	0x3bf4	; 0x3bf4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ea 1d 	jmp	0x3bd4	; 0x3bd4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 06 1e 	jmp	0x3c0c	; 0x3c0c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ea 1d 	jmp	0x3bd4	; 0x3bd4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 06 1e 	jmp	0x3c0c	; 0x3c0c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 de 1d 	jmp	0x3bbc	; 0x3bbc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fa 1d 	jmp	0x3bf4	; 0x3bf4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ea 1d 	jmp	0x3bd4	; 0x3bd4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 06 1e 	jmp	0x3c0c	; 0x3c0c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ea 1d 	jmp	0x3bd4	; 0x3bd4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 06 1e 	jmp	0x3c0c	; 0x3c0c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ea 1d 	jmp	0x3bd4	; 0x3bd4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 06 1e 	jmp	0x3c0c	; 0x3c0c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ee 1d 	jmp	0x3bdc	; 0x3bdc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0a 1e 	jmp	0x3c14	; 0x3c14 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KYP_Init>:

#include "KYP_config.h"
#include "KYP_int.h"

void KYP_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*set rows pins as input pull up from 0->3*/
	DIO_INIT(KYP_PORT,PIN_0,PIN_INPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	0e 94 05 19 	call	0x320a	; 0x320a <DIO_INIT>
	DIO_SetPinValue(KYP_PORT,PIN_0,PIN_HIGH);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>

	DIO_INIT(KYP_PORT,PIN_1,PIN_INPUT);
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	0e 94 05 19 	call	0x320a	; 0x320a <DIO_INIT>
	DIO_SetPinValue(KYP_PORT,PIN_1,PIN_HIGH);
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	41 e0       	ldi	r20, 0x01	; 1
     b72:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>

	DIO_INIT(KYP_PORT,PIN_2,PIN_INPUT);
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	62 e0       	ldi	r22, 0x02	; 2
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	0e 94 05 19 	call	0x320a	; 0x320a <DIO_INIT>
	DIO_SetPinValue(KYP_PORT,PIN_2,PIN_HIGH);
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	62 e0       	ldi	r22, 0x02	; 2
     b84:	41 e0       	ldi	r20, 0x01	; 1
     b86:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>

	DIO_INIT(KYP_PORT,PIN_3,PIN_INPUT);
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	63 e0       	ldi	r22, 0x03	; 3
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	0e 94 05 19 	call	0x320a	; 0x320a <DIO_INIT>
	DIO_SetPinValue(KYP_PORT,PIN_3,PIN_HIGH);
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	63 e0       	ldi	r22, 0x03	; 3
     b98:	41 e0       	ldi	r20, 0x01	; 1
     b9a:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
	/*set col pins as ouput and initially high 4->7*/
	DIO_INIT(KYP_PORT,PIN_4,PIN_OUTPUT);
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	64 e0       	ldi	r22, 0x04	; 4
     ba2:	41 e0       	ldi	r20, 0x01	; 1
     ba4:	0e 94 05 19 	call	0x320a	; 0x320a <DIO_INIT>
	DIO_SetPinValue(KYP_PORT,PIN_4,PIN_HIGH);
     ba8:	82 e0       	ldi	r24, 0x02	; 2
     baa:	64 e0       	ldi	r22, 0x04	; 4
     bac:	41 e0       	ldi	r20, 0x01	; 1
     bae:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>

	DIO_INIT(KYP_PORT,PIN_5,PIN_OUTPUT);
     bb2:	82 e0       	ldi	r24, 0x02	; 2
     bb4:	65 e0       	ldi	r22, 0x05	; 5
     bb6:	41 e0       	ldi	r20, 0x01	; 1
     bb8:	0e 94 05 19 	call	0x320a	; 0x320a <DIO_INIT>
	DIO_SetPinValue(KYP_PORT,PIN_5,PIN_HIGH);
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	65 e0       	ldi	r22, 0x05	; 5
     bc0:	41 e0       	ldi	r20, 0x01	; 1
     bc2:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>

	DIO_INIT(KYP_PORT,PIN_6,PIN_OUTPUT);
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	66 e0       	ldi	r22, 0x06	; 6
     bca:	41 e0       	ldi	r20, 0x01	; 1
     bcc:	0e 94 05 19 	call	0x320a	; 0x320a <DIO_INIT>
	DIO_SetPinValue(KYP_PORT,PIN_6,PIN_HIGH);
     bd0:	82 e0       	ldi	r24, 0x02	; 2
     bd2:	66 e0       	ldi	r22, 0x06	; 6
     bd4:	41 e0       	ldi	r20, 0x01	; 1
     bd6:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>

	DIO_INIT(KYP_PORT,PIN_7,PIN_OUTPUT);
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	67 e0       	ldi	r22, 0x07	; 7
     bde:	41 e0       	ldi	r20, 0x01	; 1
     be0:	0e 94 05 19 	call	0x320a	; 0x320a <DIO_INIT>
	DIO_SetPinValue(KYP_PORT,PIN_7,PIN_HIGH);
     be4:	82 e0       	ldi	r24, 0x02	; 2
     be6:	67 e0       	ldi	r22, 0x07	; 7
     be8:	41 e0       	ldi	r20, 0x01	; 1
     bea:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>

}
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	08 95       	ret

00000bf4 <KYP_u8GetPressed>:
u8int_t KYP_u8GetPressed(void)
{
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
     bfc:	63 97       	sbiw	r28, 0x13	; 19
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61
	u8int_t pressed_key= KYP_NO_PRESSED;
     c08:	84 e1       	ldi	r24, 0x14	; 20
     c0a:	89 8b       	std	Y+17, r24	; 0x11
	static u8int_t KYP_ARR[4][4]=KYP_ARR_VAL ;
	u8int_t button;

	for(u8int_t col=4; col<8;col++)
     c0c:	84 e0       	ldi	r24, 0x04	; 4
     c0e:	88 8b       	std	Y+16, r24	; 0x10
     c10:	b8 c0       	rjmp	.+368    	; 0xd82 <KYP_u8GetPressed+0x18e>
	{
		/*activate current col  */
		DIO_SetPinValue(KYP_PORT,col,PIN_LOW);
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	68 89       	ldd	r22, Y+16	; 0x10
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
		for(u8int_t row=0; row<4; row++)
     c1c:	1f 86       	std	Y+15, r1	; 0x0f
     c1e:	a5 c0       	rjmp	.+330    	; 0xd6a <KYP_u8GetPressed+0x176>
		{
			DIO_ReadPin(KYP_PORT,row,&button);
     c20:	9e 01       	movw	r18, r28
     c22:	2e 5e       	subi	r18, 0xEE	; 238
     c24:	3f 4f       	sbci	r19, 0xFF	; 255
     c26:	82 e0       	ldi	r24, 0x02	; 2
     c28:	6f 85       	ldd	r22, Y+15	; 0x0f
     c2a:	a9 01       	movw	r20, r18
     c2c:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_ReadPin>

			/*check if a sietch is pressed*/
			if(PIN_LOW == button)
     c30:	8a 89       	ldd	r24, Y+18	; 0x12
     c32:	88 23       	and	r24, r24
     c34:	09 f0       	breq	.+2      	; 0xc38 <KYP_u8GetPressed+0x44>
     c36:	96 c0       	rjmp	.+300    	; 0xd64 <KYP_u8GetPressed+0x170>
			{
				//pressed_key=KYP_ARR[col][row];
				pressed_key= KYP_ARR[row][col-4];
     c38:	8f 85       	ldd	r24, Y+15	; 0x0f
     c3a:	48 2f       	mov	r20, r24
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	88 89       	ldd	r24, Y+16	; 0x10
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	9c 01       	movw	r18, r24
     c46:	24 50       	subi	r18, 0x04	; 4
     c48:	30 40       	sbci	r19, 0x00	; 0
     c4a:	ca 01       	movw	r24, r20
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	82 0f       	add	r24, r18
     c56:	93 1f       	adc	r25, r19
     c58:	fc 01       	movw	r30, r24
     c5a:	e8 59       	subi	r30, 0x98	; 152
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	80 81       	ld	r24, Z
     c60:	89 8b       	std	Y+17, r24	; 0x11
     c62:	08 c0       	rjmp	.+16     	; 0xc74 <KYP_u8GetPressed+0x80>
				while (PIN_LOW == button)
				{
					DIO_ReadPin(KYP_PORT,row,&button);
     c64:	9e 01       	movw	r18, r28
     c66:	2e 5e       	subi	r18, 0xEE	; 238
     c68:	3f 4f       	sbci	r19, 0xFF	; 255
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	6f 85       	ldd	r22, Y+15	; 0x0f
     c6e:	a9 01       	movw	r20, r18
     c70:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_ReadPin>
			/*check if a sietch is pressed*/
			if(PIN_LOW == button)
			{
				//pressed_key=KYP_ARR[col][row];
				pressed_key= KYP_ARR[row][col-4];
				while (PIN_LOW == button)
     c74:	8a 89       	ldd	r24, Y+18	; 0x12
     c76:	88 23       	and	r24, r24
     c78:	a9 f3       	breq	.-22     	; 0xc64 <KYP_u8GetPressed+0x70>
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	a0 ea       	ldi	r26, 0xA0	; 160
     c80:	b1 e4       	ldi	r27, 0x41	; 65
     c82:	8b 87       	std	Y+11, r24	; 0x0b
     c84:	9c 87       	std	Y+12, r25	; 0x0c
     c86:	ad 87       	std	Y+13, r26	; 0x0d
     c88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     c8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c90:	9e 85       	ldd	r25, Y+14	; 0x0e
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	4a ef       	ldi	r20, 0xFA	; 250
     c98:	54 e4       	ldi	r21, 0x44	; 68
     c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	8f 83       	std	Y+7, r24	; 0x07
     ca4:	98 87       	std	Y+8, r25	; 0x08
     ca6:	a9 87       	std	Y+9, r26	; 0x09
     ca8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     caa:	6f 81       	ldd	r22, Y+7	; 0x07
     cac:	78 85       	ldd	r23, Y+8	; 0x08
     cae:	89 85       	ldd	r24, Y+9	; 0x09
     cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	40 e8       	ldi	r20, 0x80	; 128
     cb8:	5f e3       	ldi	r21, 0x3F	; 63
     cba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cbe:	88 23       	and	r24, r24
     cc0:	2c f4       	brge	.+10     	; 0xccc <KYP_u8GetPressed+0xd8>
		__ticks = 1;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	9e 83       	std	Y+6, r25	; 0x06
     cc8:	8d 83       	std	Y+5, r24	; 0x05
     cca:	3f c0       	rjmp	.+126    	; 0xd4a <KYP_u8GetPressed+0x156>
	else if (__tmp > 65535)
     ccc:	6f 81       	ldd	r22, Y+7	; 0x07
     cce:	78 85       	ldd	r23, Y+8	; 0x08
     cd0:	89 85       	ldd	r24, Y+9	; 0x09
     cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	3f ef       	ldi	r19, 0xFF	; 255
     cd8:	4f e7       	ldi	r20, 0x7F	; 127
     cda:	57 e4       	ldi	r21, 0x47	; 71
     cdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ce0:	18 16       	cp	r1, r24
     ce2:	4c f5       	brge	.+82     	; 0xd36 <KYP_u8GetPressed+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
     cea:	9e 85       	ldd	r25, Y+14	; 0x0e
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e2       	ldi	r20, 0x20	; 32
     cf2:	51 e4       	ldi	r21, 0x41	; 65
     cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	bc 01       	movw	r22, r24
     cfe:	cd 01       	movw	r24, r26
     d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	9e 83       	std	Y+6, r25	; 0x06
     d0a:	8d 83       	std	Y+5, r24	; 0x05
     d0c:	0f c0       	rjmp	.+30     	; 0xd2c <KYP_u8GetPressed+0x138>
     d0e:	88 ec       	ldi	r24, 0xC8	; 200
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	9c 83       	std	Y+4, r25	; 0x04
     d14:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	9c 81       	ldd	r25, Y+4	; 0x04
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	f1 f7       	brne	.-4      	; 0xd1a <KYP_u8GetPressed+0x126>
     d1e:	9c 83       	std	Y+4, r25	; 0x04
     d20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d22:	8d 81       	ldd	r24, Y+5	; 0x05
     d24:	9e 81       	ldd	r25, Y+6	; 0x06
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	9e 83       	std	Y+6, r25	; 0x06
     d2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d2c:	8d 81       	ldd	r24, Y+5	; 0x05
     d2e:	9e 81       	ldd	r25, Y+6	; 0x06
     d30:	00 97       	sbiw	r24, 0x00	; 0
     d32:	69 f7       	brne	.-38     	; 0xd0e <KYP_u8GetPressed+0x11a>
     d34:	14 c0       	rjmp	.+40     	; 0xd5e <KYP_u8GetPressed+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d36:	6f 81       	ldd	r22, Y+7	; 0x07
     d38:	78 85       	ldd	r23, Y+8	; 0x08
     d3a:	89 85       	ldd	r24, Y+9	; 0x09
     d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	9e 83       	std	Y+6, r25	; 0x06
     d48:	8d 83       	std	Y+5, r24	; 0x05
     d4a:	8d 81       	ldd	r24, Y+5	; 0x05
     d4c:	9e 81       	ldd	r25, Y+6	; 0x06
     d4e:	9a 83       	std	Y+2, r25	; 0x02
     d50:	89 83       	std	Y+1, r24	; 0x01
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	01 97       	sbiw	r24, 0x01	; 1
     d58:	f1 f7       	brne	.-4      	; 0xd56 <KYP_u8GetPressed+0x162>
     d5a:	9a 83       	std	Y+2, r25	; 0x02
     d5c:	89 83       	std	Y+1, r24	; 0x01


				}
				_delay_ms(20);

				return pressed_key ;
     d5e:	89 89       	ldd	r24, Y+17	; 0x11
     d60:	8b 8b       	std	Y+19, r24	; 0x13
     d62:	15 c0       	rjmp	.+42     	; 0xd8e <KYP_u8GetPressed+0x19a>

	for(u8int_t col=4; col<8;col++)
	{
		/*activate current col  */
		DIO_SetPinValue(KYP_PORT,col,PIN_LOW);
		for(u8int_t row=0; row<4; row++)
     d64:	8f 85       	ldd	r24, Y+15	; 0x0f
     d66:	8f 5f       	subi	r24, 0xFF	; 255
     d68:	8f 87       	std	Y+15, r24	; 0x0f
     d6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d6c:	84 30       	cpi	r24, 0x04	; 4
     d6e:	08 f4       	brcc	.+2      	; 0xd72 <KYP_u8GetPressed+0x17e>
     d70:	57 cf       	rjmp	.-338    	; 0xc20 <KYP_u8GetPressed+0x2c>


		}

		/*deactivate the current col*/
		DIO_SetPinValue(KYP_PORT,col,PIN_HIGH);
     d72:	82 e0       	ldi	r24, 0x02	; 2
     d74:	68 89       	ldd	r22, Y+16	; 0x10
     d76:	41 e0       	ldi	r20, 0x01	; 1
     d78:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
{
	u8int_t pressed_key= KYP_NO_PRESSED;
	static u8int_t KYP_ARR[4][4]=KYP_ARR_VAL ;
	u8int_t button;

	for(u8int_t col=4; col<8;col++)
     d7c:	88 89       	ldd	r24, Y+16	; 0x10
     d7e:	8f 5f       	subi	r24, 0xFF	; 255
     d80:	88 8b       	std	Y+16, r24	; 0x10
     d82:	88 89       	ldd	r24, Y+16	; 0x10
     d84:	88 30       	cpi	r24, 0x08	; 8
     d86:	08 f4       	brcc	.+2      	; 0xd8a <KYP_u8GetPressed+0x196>
     d88:	44 cf       	rjmp	.-376    	; 0xc12 <KYP_u8GetPressed+0x1e>
		/*deactivate the current col*/
		DIO_SetPinValue(KYP_PORT,col,PIN_HIGH);

	}

	return pressed_key;
     d8a:	89 89       	ldd	r24, Y+17	; 0x11
     d8c:	8b 8b       	std	Y+19, r24	; 0x13
     d8e:	8b 89       	ldd	r24, Y+19	; 0x13
}
     d90:	63 96       	adiw	r28, 0x13	; 19
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	cd bf       	out	0x3d, r28	; 61
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <CLCD_voidCommand>:
#include "config.h"



void CLCD_voidCommand(u8int_t copy_u8Command)
{
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	e9 97       	sbiw	r28, 0x39	; 57
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	89 af       	std	Y+57, r24	; 0x39
	/*Set RS pin low for command*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,PIN_LOW);
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	63 e0       	ldi	r22, 0x03	; 3
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
	/*Set RW pin Low to write*/
	//DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN ,PIN_LOW);

	/*Send command to data pins */
	DIO_SetPinValue(PORT_B,PIN_0,GET_BIT(copy_u8Command,4));
     dc2:	89 ad       	ldd	r24, Y+57	; 0x39
     dc4:	82 95       	swap	r24
     dc6:	8f 70       	andi	r24, 0x0F	; 15
     dc8:	98 2f       	mov	r25, r24
     dca:	91 70       	andi	r25, 0x01	; 1
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	49 2f       	mov	r20, r25
     dd2:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_1,GET_BIT(copy_u8Command,5));
     dd6:	89 ad       	ldd	r24, Y+57	; 0x39
     dd8:	82 95       	swap	r24
     dda:	86 95       	lsr	r24
     ddc:	87 70       	andi	r24, 0x07	; 7
     dde:	98 2f       	mov	r25, r24
     de0:	91 70       	andi	r25, 0x01	; 1
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	61 e0       	ldi	r22, 0x01	; 1
     de6:	49 2f       	mov	r20, r25
     de8:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_2,GET_BIT(copy_u8Command,6));
     dec:	89 ad       	ldd	r24, Y+57	; 0x39
     dee:	82 95       	swap	r24
     df0:	86 95       	lsr	r24
     df2:	86 95       	lsr	r24
     df4:	83 70       	andi	r24, 0x03	; 3
     df6:	98 2f       	mov	r25, r24
     df8:	91 70       	andi	r25, 0x01	; 1
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	62 e0       	ldi	r22, 0x02	; 2
     dfe:	49 2f       	mov	r20, r25
     e00:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_4,GET_BIT(copy_u8Command,7));
     e04:	89 ad       	ldd	r24, Y+57	; 0x39
     e06:	98 2f       	mov	r25, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	99 27       	eor	r25, r25
     e0c:	99 1f       	adc	r25, r25
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	64 e0       	ldi	r22, 0x04	; 4
     e12:	49 2f       	mov	r20, r25
     e14:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>

	/*Send enable pulse*/
	DIO_SetPinValue(PORT_A,PIN_2 ,PIN_HIGH);
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	62 e0       	ldi	r22, 0x02	; 2
     e1c:	41 e0       	ldi	r20, 0x01	; 1
     e1e:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	a0 e0       	ldi	r26, 0x00	; 0
     e28:	b0 e4       	ldi	r27, 0x40	; 64
     e2a:	8d ab       	std	Y+53, r24	; 0x35
     e2c:	9e ab       	std	Y+54, r25	; 0x36
     e2e:	af ab       	std	Y+55, r26	; 0x37
     e30:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e32:	6d a9       	ldd	r22, Y+53	; 0x35
     e34:	7e a9       	ldd	r23, Y+54	; 0x36
     e36:	8f a9       	ldd	r24, Y+55	; 0x37
     e38:	98 ad       	ldd	r25, Y+56	; 0x38
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	4a ef       	ldi	r20, 0xFA	; 250
     e40:	54 e4       	ldi	r21, 0x44	; 68
     e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	89 ab       	std	Y+49, r24	; 0x31
     e4c:	9a ab       	std	Y+50, r25	; 0x32
     e4e:	ab ab       	std	Y+51, r26	; 0x33
     e50:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e52:	69 a9       	ldd	r22, Y+49	; 0x31
     e54:	7a a9       	ldd	r23, Y+50	; 0x32
     e56:	8b a9       	ldd	r24, Y+51	; 0x33
     e58:	9c a9       	ldd	r25, Y+52	; 0x34
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e8       	ldi	r20, 0x80	; 128
     e60:	5f e3       	ldi	r21, 0x3F	; 63
     e62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e66:	88 23       	and	r24, r24
     e68:	2c f4       	brge	.+10     	; 0xe74 <CLCD_voidCommand+0xd2>
		__ticks = 1;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	98 ab       	std	Y+48, r25	; 0x30
     e70:	8f a7       	std	Y+47, r24	; 0x2f
     e72:	3f c0       	rjmp	.+126    	; 0xef2 <CLCD_voidCommand+0x150>
	else if (__tmp > 65535)
     e74:	69 a9       	ldd	r22, Y+49	; 0x31
     e76:	7a a9       	ldd	r23, Y+50	; 0x32
     e78:	8b a9       	ldd	r24, Y+51	; 0x33
     e7a:	9c a9       	ldd	r25, Y+52	; 0x34
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	3f ef       	ldi	r19, 0xFF	; 255
     e80:	4f e7       	ldi	r20, 0x7F	; 127
     e82:	57 e4       	ldi	r21, 0x47	; 71
     e84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e88:	18 16       	cp	r1, r24
     e8a:	4c f5       	brge	.+82     	; 0xede <CLCD_voidCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e8c:	6d a9       	ldd	r22, Y+53	; 0x35
     e8e:	7e a9       	ldd	r23, Y+54	; 0x36
     e90:	8f a9       	ldd	r24, Y+55	; 0x37
     e92:	98 ad       	ldd	r25, Y+56	; 0x38
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	40 e2       	ldi	r20, 0x20	; 32
     e9a:	51 e4       	ldi	r21, 0x41	; 65
     e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	bc 01       	movw	r22, r24
     ea6:	cd 01       	movw	r24, r26
     ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	98 ab       	std	Y+48, r25	; 0x30
     eb2:	8f a7       	std	Y+47, r24	; 0x2f
     eb4:	0f c0       	rjmp	.+30     	; 0xed4 <CLCD_voidCommand+0x132>
     eb6:	88 ec       	ldi	r24, 0xC8	; 200
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	9e a7       	std	Y+46, r25	; 0x2e
     ebc:	8d a7       	std	Y+45, r24	; 0x2d
     ebe:	8d a5       	ldd	r24, Y+45	; 0x2d
     ec0:	9e a5       	ldd	r25, Y+46	; 0x2e
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <CLCD_voidCommand+0x120>
     ec6:	9e a7       	std	Y+46, r25	; 0x2e
     ec8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eca:	8f a5       	ldd	r24, Y+47	; 0x2f
     ecc:	98 a9       	ldd	r25, Y+48	; 0x30
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	98 ab       	std	Y+48, r25	; 0x30
     ed2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed4:	8f a5       	ldd	r24, Y+47	; 0x2f
     ed6:	98 a9       	ldd	r25, Y+48	; 0x30
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	69 f7       	brne	.-38     	; 0xeb6 <CLCD_voidCommand+0x114>
     edc:	14 c0       	rjmp	.+40     	; 0xf06 <CLCD_voidCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ede:	69 a9       	ldd	r22, Y+49	; 0x31
     ee0:	7a a9       	ldd	r23, Y+50	; 0x32
     ee2:	8b a9       	ldd	r24, Y+51	; 0x33
     ee4:	9c a9       	ldd	r25, Y+52	; 0x34
     ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	98 ab       	std	Y+48, r25	; 0x30
     ef0:	8f a7       	std	Y+47, r24	; 0x2f
     ef2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ef4:	98 a9       	ldd	r25, Y+48	; 0x30
     ef6:	9c a7       	std	Y+44, r25	; 0x2c
     ef8:	8b a7       	std	Y+43, r24	; 0x2b
     efa:	8b a5       	ldd	r24, Y+43	; 0x2b
     efc:	9c a5       	ldd	r25, Y+44	; 0x2c
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	f1 f7       	brne	.-4      	; 0xefe <CLCD_voidCommand+0x15c>
     f02:	9c a7       	std	Y+44, r25	; 0x2c
     f04:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_SetPinValue(PORT_A,PIN_2,PIN_LOW);
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	62 e0       	ldi	r22, 0x02	; 2
     f0a:	40 e0       	ldi	r20, 0x00	; 0
     f0c:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	a0 ea       	ldi	r26, 0xA0	; 160
     f16:	b0 e4       	ldi	r27, 0x40	; 64
     f18:	8f a3       	std	Y+39, r24	; 0x27
     f1a:	98 a7       	std	Y+40, r25	; 0x28
     f1c:	a9 a7       	std	Y+41, r26	; 0x29
     f1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f20:	6f a1       	ldd	r22, Y+39	; 0x27
     f22:	78 a5       	ldd	r23, Y+40	; 0x28
     f24:	89 a5       	ldd	r24, Y+41	; 0x29
     f26:	9a a5       	ldd	r25, Y+42	; 0x2a
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	4a ef       	ldi	r20, 0xFA	; 250
     f2e:	54 e4       	ldi	r21, 0x44	; 68
     f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	8b a3       	std	Y+35, r24	; 0x23
     f3a:	9c a3       	std	Y+36, r25	; 0x24
     f3c:	ad a3       	std	Y+37, r26	; 0x25
     f3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f40:	6b a1       	ldd	r22, Y+35	; 0x23
     f42:	7c a1       	ldd	r23, Y+36	; 0x24
     f44:	8d a1       	ldd	r24, Y+37	; 0x25
     f46:	9e a1       	ldd	r25, Y+38	; 0x26
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	40 e8       	ldi	r20, 0x80	; 128
     f4e:	5f e3       	ldi	r21, 0x3F	; 63
     f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f54:	88 23       	and	r24, r24
     f56:	2c f4       	brge	.+10     	; 0xf62 <CLCD_voidCommand+0x1c0>
		__ticks = 1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	9a a3       	std	Y+34, r25	; 0x22
     f5e:	89 a3       	std	Y+33, r24	; 0x21
     f60:	3f c0       	rjmp	.+126    	; 0xfe0 <CLCD_voidCommand+0x23e>
	else if (__tmp > 65535)
     f62:	6b a1       	ldd	r22, Y+35	; 0x23
     f64:	7c a1       	ldd	r23, Y+36	; 0x24
     f66:	8d a1       	ldd	r24, Y+37	; 0x25
     f68:	9e a1       	ldd	r25, Y+38	; 0x26
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	3f ef       	ldi	r19, 0xFF	; 255
     f6e:	4f e7       	ldi	r20, 0x7F	; 127
     f70:	57 e4       	ldi	r21, 0x47	; 71
     f72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f76:	18 16       	cp	r1, r24
     f78:	4c f5       	brge	.+82     	; 0xfcc <CLCD_voidCommand+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f7a:	6f a1       	ldd	r22, Y+39	; 0x27
     f7c:	78 a5       	ldd	r23, Y+40	; 0x28
     f7e:	89 a5       	ldd	r24, Y+41	; 0x29
     f80:	9a a5       	ldd	r25, Y+42	; 0x2a
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	40 e2       	ldi	r20, 0x20	; 32
     f88:	51 e4       	ldi	r21, 0x41	; 65
     f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	bc 01       	movw	r22, r24
     f94:	cd 01       	movw	r24, r26
     f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	9a a3       	std	Y+34, r25	; 0x22
     fa0:	89 a3       	std	Y+33, r24	; 0x21
     fa2:	0f c0       	rjmp	.+30     	; 0xfc2 <CLCD_voidCommand+0x220>
     fa4:	88 ec       	ldi	r24, 0xC8	; 200
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	98 a3       	std	Y+32, r25	; 0x20
     faa:	8f 8f       	std	Y+31, r24	; 0x1f
     fac:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fae:	98 a1       	ldd	r25, Y+32	; 0x20
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <CLCD_voidCommand+0x20e>
     fb4:	98 a3       	std	Y+32, r25	; 0x20
     fb6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb8:	89 a1       	ldd	r24, Y+33	; 0x21
     fba:	9a a1       	ldd	r25, Y+34	; 0x22
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	9a a3       	std	Y+34, r25	; 0x22
     fc0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc2:	89 a1       	ldd	r24, Y+33	; 0x21
     fc4:	9a a1       	ldd	r25, Y+34	; 0x22
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	69 f7       	brne	.-38     	; 0xfa4 <CLCD_voidCommand+0x202>
     fca:	14 c0       	rjmp	.+40     	; 0xff4 <CLCD_voidCommand+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fcc:	6b a1       	ldd	r22, Y+35	; 0x23
     fce:	7c a1       	ldd	r23, Y+36	; 0x24
     fd0:	8d a1       	ldd	r24, Y+37	; 0x25
     fd2:	9e a1       	ldd	r25, Y+38	; 0x26
     fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	9a a3       	std	Y+34, r25	; 0x22
     fde:	89 a3       	std	Y+33, r24	; 0x21
     fe0:	89 a1       	ldd	r24, Y+33	; 0x21
     fe2:	9a a1       	ldd	r25, Y+34	; 0x22
     fe4:	9e 8f       	std	Y+30, r25	; 0x1e
     fe6:	8d 8f       	std	Y+29, r24	; 0x1d
     fe8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fea:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <CLCD_voidCommand+0x24a>
     ff0:	9e 8f       	std	Y+30, r25	; 0x1e
     ff2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	DIO_SetPinValue(PORT_B,PIN_0,GET_BIT(copy_u8Command,0));
     ff4:	89 ad       	ldd	r24, Y+57	; 0x39
     ff6:	98 2f       	mov	r25, r24
     ff8:	91 70       	andi	r25, 0x01	; 1
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	49 2f       	mov	r20, r25
    1000:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_1,GET_BIT(copy_u8Command,1));
    1004:	89 ad       	ldd	r24, Y+57	; 0x39
    1006:	86 95       	lsr	r24
    1008:	98 2f       	mov	r25, r24
    100a:	91 70       	andi	r25, 0x01	; 1
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	49 2f       	mov	r20, r25
    1012:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_2,GET_BIT(copy_u8Command,2));
    1016:	89 ad       	ldd	r24, Y+57	; 0x39
    1018:	86 95       	lsr	r24
    101a:	86 95       	lsr	r24
    101c:	98 2f       	mov	r25, r24
    101e:	91 70       	andi	r25, 0x01	; 1
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	62 e0       	ldi	r22, 0x02	; 2
    1024:	49 2f       	mov	r20, r25
    1026:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_4,GET_BIT(copy_u8Command,3));
    102a:	89 ad       	ldd	r24, Y+57	; 0x39
    102c:	86 95       	lsr	r24
    102e:	86 95       	lsr	r24
    1030:	86 95       	lsr	r24
    1032:	98 2f       	mov	r25, r24
    1034:	91 70       	andi	r25, 0x01	; 1
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	64 e0       	ldi	r22, 0x04	; 4
    103a:	49 2f       	mov	r20, r25
    103c:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>



	/*Send enable pulse*/
	DIO_SetPinValue(PORT_A,PIN_2 ,PIN_HIGH);
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	62 e0       	ldi	r22, 0x02	; 2
    1044:	41 e0       	ldi	r20, 0x01	; 1
    1046:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	a0 e0       	ldi	r26, 0x00	; 0
    1050:	b0 e4       	ldi	r27, 0x40	; 64
    1052:	89 8f       	std	Y+25, r24	; 0x19
    1054:	9a 8f       	std	Y+26, r25	; 0x1a
    1056:	ab 8f       	std	Y+27, r26	; 0x1b
    1058:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    105a:	69 8d       	ldd	r22, Y+25	; 0x19
    105c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    105e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1060:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	4a ef       	ldi	r20, 0xFA	; 250
    1068:	54 e4       	ldi	r21, 0x44	; 68
    106a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	8d 8b       	std	Y+21, r24	; 0x15
    1074:	9e 8b       	std	Y+22, r25	; 0x16
    1076:	af 8b       	std	Y+23, r26	; 0x17
    1078:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    107a:	6d 89       	ldd	r22, Y+21	; 0x15
    107c:	7e 89       	ldd	r23, Y+22	; 0x16
    107e:	8f 89       	ldd	r24, Y+23	; 0x17
    1080:	98 8d       	ldd	r25, Y+24	; 0x18
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e8       	ldi	r20, 0x80	; 128
    1088:	5f e3       	ldi	r21, 0x3F	; 63
    108a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    108e:	88 23       	and	r24, r24
    1090:	2c f4       	brge	.+10     	; 0x109c <CLCD_voidCommand+0x2fa>
		__ticks = 1;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	9c 8b       	std	Y+20, r25	; 0x14
    1098:	8b 8b       	std	Y+19, r24	; 0x13
    109a:	3f c0       	rjmp	.+126    	; 0x111a <CLCD_voidCommand+0x378>
	else if (__tmp > 65535)
    109c:	6d 89       	ldd	r22, Y+21	; 0x15
    109e:	7e 89       	ldd	r23, Y+22	; 0x16
    10a0:	8f 89       	ldd	r24, Y+23	; 0x17
    10a2:	98 8d       	ldd	r25, Y+24	; 0x18
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	3f ef       	ldi	r19, 0xFF	; 255
    10a8:	4f e7       	ldi	r20, 0x7F	; 127
    10aa:	57 e4       	ldi	r21, 0x47	; 71
    10ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b0:	18 16       	cp	r1, r24
    10b2:	4c f5       	brge	.+82     	; 0x1106 <CLCD_voidCommand+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b4:	69 8d       	ldd	r22, Y+25	; 0x19
    10b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e2       	ldi	r20, 0x20	; 32
    10c2:	51 e4       	ldi	r21, 0x41	; 65
    10c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	bc 01       	movw	r22, r24
    10ce:	cd 01       	movw	r24, r26
    10d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	9c 8b       	std	Y+20, r25	; 0x14
    10da:	8b 8b       	std	Y+19, r24	; 0x13
    10dc:	0f c0       	rjmp	.+30     	; 0x10fc <CLCD_voidCommand+0x35a>
    10de:	88 ec       	ldi	r24, 0xC8	; 200
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	9a 8b       	std	Y+18, r25	; 0x12
    10e4:	89 8b       	std	Y+17, r24	; 0x11
    10e6:	89 89       	ldd	r24, Y+17	; 0x11
    10e8:	9a 89       	ldd	r25, Y+18	; 0x12
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <CLCD_voidCommand+0x348>
    10ee:	9a 8b       	std	Y+18, r25	; 0x12
    10f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f2:	8b 89       	ldd	r24, Y+19	; 0x13
    10f4:	9c 89       	ldd	r25, Y+20	; 0x14
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	9c 8b       	std	Y+20, r25	; 0x14
    10fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10fc:	8b 89       	ldd	r24, Y+19	; 0x13
    10fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	69 f7       	brne	.-38     	; 0x10de <CLCD_voidCommand+0x33c>
    1104:	14 c0       	rjmp	.+40     	; 0x112e <CLCD_voidCommand+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1106:	6d 89       	ldd	r22, Y+21	; 0x15
    1108:	7e 89       	ldd	r23, Y+22	; 0x16
    110a:	8f 89       	ldd	r24, Y+23	; 0x17
    110c:	98 8d       	ldd	r25, Y+24	; 0x18
    110e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	9c 8b       	std	Y+20, r25	; 0x14
    1118:	8b 8b       	std	Y+19, r24	; 0x13
    111a:	8b 89       	ldd	r24, Y+19	; 0x13
    111c:	9c 89       	ldd	r25, Y+20	; 0x14
    111e:	98 8b       	std	Y+16, r25	; 0x10
    1120:	8f 87       	std	Y+15, r24	; 0x0f
    1122:	8f 85       	ldd	r24, Y+15	; 0x0f
    1124:	98 89       	ldd	r25, Y+16	; 0x10
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	f1 f7       	brne	.-4      	; 0x1126 <CLCD_voidCommand+0x384>
    112a:	98 8b       	std	Y+16, r25	; 0x10
    112c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_SetPinValue(PORT_A,PIN_2 ,PIN_LOW);
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	62 e0       	ldi	r22, 0x02	; 2
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	a0 ea       	ldi	r26, 0xA0	; 160
    113e:	b0 e4       	ldi	r27, 0x40	; 64
    1140:	8b 87       	std	Y+11, r24	; 0x0b
    1142:	9c 87       	std	Y+12, r25	; 0x0c
    1144:	ad 87       	std	Y+13, r26	; 0x0d
    1146:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1148:	6b 85       	ldd	r22, Y+11	; 0x0b
    114a:	7c 85       	ldd	r23, Y+12	; 0x0c
    114c:	8d 85       	ldd	r24, Y+13	; 0x0d
    114e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	4a ef       	ldi	r20, 0xFA	; 250
    1156:	54 e4       	ldi	r21, 0x44	; 68
    1158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	8f 83       	std	Y+7, r24	; 0x07
    1162:	98 87       	std	Y+8, r25	; 0x08
    1164:	a9 87       	std	Y+9, r26	; 0x09
    1166:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1168:	6f 81       	ldd	r22, Y+7	; 0x07
    116a:	78 85       	ldd	r23, Y+8	; 0x08
    116c:	89 85       	ldd	r24, Y+9	; 0x09
    116e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	40 e8       	ldi	r20, 0x80	; 128
    1176:	5f e3       	ldi	r21, 0x3F	; 63
    1178:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    117c:	88 23       	and	r24, r24
    117e:	2c f4       	brge	.+10     	; 0x118a <CLCD_voidCommand+0x3e8>
		__ticks = 1;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	9e 83       	std	Y+6, r25	; 0x06
    1186:	8d 83       	std	Y+5, r24	; 0x05
    1188:	3f c0       	rjmp	.+126    	; 0x1208 <CLCD_voidCommand+0x466>
	else if (__tmp > 65535)
    118a:	6f 81       	ldd	r22, Y+7	; 0x07
    118c:	78 85       	ldd	r23, Y+8	; 0x08
    118e:	89 85       	ldd	r24, Y+9	; 0x09
    1190:	9a 85       	ldd	r25, Y+10	; 0x0a
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	3f ef       	ldi	r19, 0xFF	; 255
    1196:	4f e7       	ldi	r20, 0x7F	; 127
    1198:	57 e4       	ldi	r21, 0x47	; 71
    119a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    119e:	18 16       	cp	r1, r24
    11a0:	4c f5       	brge	.+82     	; 0x11f4 <CLCD_voidCommand+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	40 e2       	ldi	r20, 0x20	; 32
    11b0:	51 e4       	ldi	r21, 0x41	; 65
    11b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	bc 01       	movw	r22, r24
    11bc:	cd 01       	movw	r24, r26
    11be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	9e 83       	std	Y+6, r25	; 0x06
    11c8:	8d 83       	std	Y+5, r24	; 0x05
    11ca:	0f c0       	rjmp	.+30     	; 0x11ea <CLCD_voidCommand+0x448>
    11cc:	88 ec       	ldi	r24, 0xC8	; 200
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	9c 83       	std	Y+4, r25	; 0x04
    11d2:	8b 83       	std	Y+3, r24	; 0x03
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	9c 81       	ldd	r25, Y+4	; 0x04
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	f1 f7       	brne	.-4      	; 0x11d8 <CLCD_voidCommand+0x436>
    11dc:	9c 83       	std	Y+4, r25	; 0x04
    11de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e0:	8d 81       	ldd	r24, Y+5	; 0x05
    11e2:	9e 81       	ldd	r25, Y+6	; 0x06
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	9e 83       	std	Y+6, r25	; 0x06
    11e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ea:	8d 81       	ldd	r24, Y+5	; 0x05
    11ec:	9e 81       	ldd	r25, Y+6	; 0x06
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	69 f7       	brne	.-38     	; 0x11cc <CLCD_voidCommand+0x42a>
    11f2:	14 c0       	rjmp	.+40     	; 0x121c <CLCD_voidCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f4:	6f 81       	ldd	r22, Y+7	; 0x07
    11f6:	78 85       	ldd	r23, Y+8	; 0x08
    11f8:	89 85       	ldd	r24, Y+9	; 0x09
    11fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	9e 83       	std	Y+6, r25	; 0x06
    1206:	8d 83       	std	Y+5, r24	; 0x05
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	9e 81       	ldd	r25, Y+6	; 0x06
    120c:	9a 83       	std	Y+2, r25	; 0x02
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	9a 81       	ldd	r25, Y+2	; 0x02
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	f1 f7       	brne	.-4      	; 0x1214 <CLCD_voidCommand+0x472>
    1218:	9a 83       	std	Y+2, r25	; 0x02
    121a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

}
    121c:	e9 96       	adiw	r28, 0x39	; 57
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <CLCD_voidSendData>:
void CLCD_voidSendData(u8int_t copy_u8Data)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	e9 97       	sbiw	r28, 0x39	; 57
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	89 af       	std	Y+57, r24	; 0x39
	/*Set RS pin high for data*/
	DIO_SetPinValue(PORT_A,PIN_3,PIN_HIGH);
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	63 e0       	ldi	r22, 0x03	; 3
    1248:	41 e0       	ldi	r20, 0x01	; 1
    124a:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>

	/*Set RW pin LOW to write*/
	//DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,PIN_LOW);
	/*SEND DATA ONLY ON FOR BITS*/
	DIO_SetPinValue(PORT_B,PIN_0,GET_BIT(copy_u8Data,4));
    124e:	89 ad       	ldd	r24, Y+57	; 0x39
    1250:	82 95       	swap	r24
    1252:	8f 70       	andi	r24, 0x0F	; 15
    1254:	98 2f       	mov	r25, r24
    1256:	91 70       	andi	r25, 0x01	; 1
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	49 2f       	mov	r20, r25
    125e:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_1,GET_BIT(copy_u8Data,5));
    1262:	89 ad       	ldd	r24, Y+57	; 0x39
    1264:	82 95       	swap	r24
    1266:	86 95       	lsr	r24
    1268:	87 70       	andi	r24, 0x07	; 7
    126a:	98 2f       	mov	r25, r24
    126c:	91 70       	andi	r25, 0x01	; 1
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	61 e0       	ldi	r22, 0x01	; 1
    1272:	49 2f       	mov	r20, r25
    1274:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_2,GET_BIT(copy_u8Data,6));
    1278:	89 ad       	ldd	r24, Y+57	; 0x39
    127a:	82 95       	swap	r24
    127c:	86 95       	lsr	r24
    127e:	86 95       	lsr	r24
    1280:	83 70       	andi	r24, 0x03	; 3
    1282:	98 2f       	mov	r25, r24
    1284:	91 70       	andi	r25, 0x01	; 1
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	62 e0       	ldi	r22, 0x02	; 2
    128a:	49 2f       	mov	r20, r25
    128c:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_4,GET_BIT(copy_u8Data,7));
    1290:	89 ad       	ldd	r24, Y+57	; 0x39
    1292:	98 2f       	mov	r25, r24
    1294:	99 1f       	adc	r25, r25
    1296:	99 27       	eor	r25, r25
    1298:	99 1f       	adc	r25, r25
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	64 e0       	ldi	r22, 0x04	; 4
    129e:	49 2f       	mov	r20, r25
    12a0:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>


	/*Send enable pulse*/
	DIO_SetPinValue(PORT_A,PIN_2,PIN_HIGH);
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	62 e0       	ldi	r22, 0x02	; 2
    12a8:	41 e0       	ldi	r20, 0x01	; 1
    12aa:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	a0 e0       	ldi	r26, 0x00	; 0
    12b4:	b0 e4       	ldi	r27, 0x40	; 64
    12b6:	8d ab       	std	Y+53, r24	; 0x35
    12b8:	9e ab       	std	Y+54, r25	; 0x36
    12ba:	af ab       	std	Y+55, r26	; 0x37
    12bc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12be:	6d a9       	ldd	r22, Y+53	; 0x35
    12c0:	7e a9       	ldd	r23, Y+54	; 0x36
    12c2:	8f a9       	ldd	r24, Y+55	; 0x37
    12c4:	98 ad       	ldd	r25, Y+56	; 0x38
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	4a ef       	ldi	r20, 0xFA	; 250
    12cc:	54 e4       	ldi	r21, 0x44	; 68
    12ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	89 ab       	std	Y+49, r24	; 0x31
    12d8:	9a ab       	std	Y+50, r25	; 0x32
    12da:	ab ab       	std	Y+51, r26	; 0x33
    12dc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12de:	69 a9       	ldd	r22, Y+49	; 0x31
    12e0:	7a a9       	ldd	r23, Y+50	; 0x32
    12e2:	8b a9       	ldd	r24, Y+51	; 0x33
    12e4:	9c a9       	ldd	r25, Y+52	; 0x34
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e8       	ldi	r20, 0x80	; 128
    12ec:	5f e3       	ldi	r21, 0x3F	; 63
    12ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12f2:	88 23       	and	r24, r24
    12f4:	2c f4       	brge	.+10     	; 0x1300 <CLCD_voidSendData+0xd2>
		__ticks = 1;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	98 ab       	std	Y+48, r25	; 0x30
    12fc:	8f a7       	std	Y+47, r24	; 0x2f
    12fe:	3f c0       	rjmp	.+126    	; 0x137e <CLCD_voidSendData+0x150>
	else if (__tmp > 65535)
    1300:	69 a9       	ldd	r22, Y+49	; 0x31
    1302:	7a a9       	ldd	r23, Y+50	; 0x32
    1304:	8b a9       	ldd	r24, Y+51	; 0x33
    1306:	9c a9       	ldd	r25, Y+52	; 0x34
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	3f ef       	ldi	r19, 0xFF	; 255
    130c:	4f e7       	ldi	r20, 0x7F	; 127
    130e:	57 e4       	ldi	r21, 0x47	; 71
    1310:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1314:	18 16       	cp	r1, r24
    1316:	4c f5       	brge	.+82     	; 0x136a <CLCD_voidSendData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1318:	6d a9       	ldd	r22, Y+53	; 0x35
    131a:	7e a9       	ldd	r23, Y+54	; 0x36
    131c:	8f a9       	ldd	r24, Y+55	; 0x37
    131e:	98 ad       	ldd	r25, Y+56	; 0x38
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e2       	ldi	r20, 0x20	; 32
    1326:	51 e4       	ldi	r21, 0x41	; 65
    1328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	bc 01       	movw	r22, r24
    1332:	cd 01       	movw	r24, r26
    1334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	98 ab       	std	Y+48, r25	; 0x30
    133e:	8f a7       	std	Y+47, r24	; 0x2f
    1340:	0f c0       	rjmp	.+30     	; 0x1360 <CLCD_voidSendData+0x132>
    1342:	88 ec       	ldi	r24, 0xC8	; 200
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	9e a7       	std	Y+46, r25	; 0x2e
    1348:	8d a7       	std	Y+45, r24	; 0x2d
    134a:	8d a5       	ldd	r24, Y+45	; 0x2d
    134c:	9e a5       	ldd	r25, Y+46	; 0x2e
    134e:	01 97       	sbiw	r24, 0x01	; 1
    1350:	f1 f7       	brne	.-4      	; 0x134e <CLCD_voidSendData+0x120>
    1352:	9e a7       	std	Y+46, r25	; 0x2e
    1354:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1356:	8f a5       	ldd	r24, Y+47	; 0x2f
    1358:	98 a9       	ldd	r25, Y+48	; 0x30
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	98 ab       	std	Y+48, r25	; 0x30
    135e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1360:	8f a5       	ldd	r24, Y+47	; 0x2f
    1362:	98 a9       	ldd	r25, Y+48	; 0x30
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	69 f7       	brne	.-38     	; 0x1342 <CLCD_voidSendData+0x114>
    1368:	14 c0       	rjmp	.+40     	; 0x1392 <CLCD_voidSendData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    136a:	69 a9       	ldd	r22, Y+49	; 0x31
    136c:	7a a9       	ldd	r23, Y+50	; 0x32
    136e:	8b a9       	ldd	r24, Y+51	; 0x33
    1370:	9c a9       	ldd	r25, Y+52	; 0x34
    1372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	98 ab       	std	Y+48, r25	; 0x30
    137c:	8f a7       	std	Y+47, r24	; 0x2f
    137e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1380:	98 a9       	ldd	r25, Y+48	; 0x30
    1382:	9c a7       	std	Y+44, r25	; 0x2c
    1384:	8b a7       	std	Y+43, r24	; 0x2b
    1386:	8b a5       	ldd	r24, Y+43	; 0x2b
    1388:	9c a5       	ldd	r25, Y+44	; 0x2c
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	f1 f7       	brne	.-4      	; 0x138a <CLCD_voidSendData+0x15c>
    138e:	9c a7       	std	Y+44, r25	; 0x2c
    1390:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_SetPinValue(PORT_A,PIN_2,PIN_LOW);
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	62 e0       	ldi	r22, 0x02	; 2
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	a0 ea       	ldi	r26, 0xA0	; 160
    13a2:	b0 e4       	ldi	r27, 0x40	; 64
    13a4:	8f a3       	std	Y+39, r24	; 0x27
    13a6:	98 a7       	std	Y+40, r25	; 0x28
    13a8:	a9 a7       	std	Y+41, r26	; 0x29
    13aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ac:	6f a1       	ldd	r22, Y+39	; 0x27
    13ae:	78 a5       	ldd	r23, Y+40	; 0x28
    13b0:	89 a5       	ldd	r24, Y+41	; 0x29
    13b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	4a ef       	ldi	r20, 0xFA	; 250
    13ba:	54 e4       	ldi	r21, 0x44	; 68
    13bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	8b a3       	std	Y+35, r24	; 0x23
    13c6:	9c a3       	std	Y+36, r25	; 0x24
    13c8:	ad a3       	std	Y+37, r26	; 0x25
    13ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13cc:	6b a1       	ldd	r22, Y+35	; 0x23
    13ce:	7c a1       	ldd	r23, Y+36	; 0x24
    13d0:	8d a1       	ldd	r24, Y+37	; 0x25
    13d2:	9e a1       	ldd	r25, Y+38	; 0x26
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	40 e8       	ldi	r20, 0x80	; 128
    13da:	5f e3       	ldi	r21, 0x3F	; 63
    13dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e0:	88 23       	and	r24, r24
    13e2:	2c f4       	brge	.+10     	; 0x13ee <CLCD_voidSendData+0x1c0>
		__ticks = 1;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	9a a3       	std	Y+34, r25	; 0x22
    13ea:	89 a3       	std	Y+33, r24	; 0x21
    13ec:	3f c0       	rjmp	.+126    	; 0x146c <CLCD_voidSendData+0x23e>
	else if (__tmp > 65535)
    13ee:	6b a1       	ldd	r22, Y+35	; 0x23
    13f0:	7c a1       	ldd	r23, Y+36	; 0x24
    13f2:	8d a1       	ldd	r24, Y+37	; 0x25
    13f4:	9e a1       	ldd	r25, Y+38	; 0x26
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	3f ef       	ldi	r19, 0xFF	; 255
    13fa:	4f e7       	ldi	r20, 0x7F	; 127
    13fc:	57 e4       	ldi	r21, 0x47	; 71
    13fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1402:	18 16       	cp	r1, r24
    1404:	4c f5       	brge	.+82     	; 0x1458 <CLCD_voidSendData+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1406:	6f a1       	ldd	r22, Y+39	; 0x27
    1408:	78 a5       	ldd	r23, Y+40	; 0x28
    140a:	89 a5       	ldd	r24, Y+41	; 0x29
    140c:	9a a5       	ldd	r25, Y+42	; 0x2a
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	40 e2       	ldi	r20, 0x20	; 32
    1414:	51 e4       	ldi	r21, 0x41	; 65
    1416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	bc 01       	movw	r22, r24
    1420:	cd 01       	movw	r24, r26
    1422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	9a a3       	std	Y+34, r25	; 0x22
    142c:	89 a3       	std	Y+33, r24	; 0x21
    142e:	0f c0       	rjmp	.+30     	; 0x144e <CLCD_voidSendData+0x220>
    1430:	88 ec       	ldi	r24, 0xC8	; 200
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	98 a3       	std	Y+32, r25	; 0x20
    1436:	8f 8f       	std	Y+31, r24	; 0x1f
    1438:	8f 8d       	ldd	r24, Y+31	; 0x1f
    143a:	98 a1       	ldd	r25, Y+32	; 0x20
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	f1 f7       	brne	.-4      	; 0x143c <CLCD_voidSendData+0x20e>
    1440:	98 a3       	std	Y+32, r25	; 0x20
    1442:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1444:	89 a1       	ldd	r24, Y+33	; 0x21
    1446:	9a a1       	ldd	r25, Y+34	; 0x22
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	9a a3       	std	Y+34, r25	; 0x22
    144c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144e:	89 a1       	ldd	r24, Y+33	; 0x21
    1450:	9a a1       	ldd	r25, Y+34	; 0x22
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	69 f7       	brne	.-38     	; 0x1430 <CLCD_voidSendData+0x202>
    1456:	14 c0       	rjmp	.+40     	; 0x1480 <CLCD_voidSendData+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1458:	6b a1       	ldd	r22, Y+35	; 0x23
    145a:	7c a1       	ldd	r23, Y+36	; 0x24
    145c:	8d a1       	ldd	r24, Y+37	; 0x25
    145e:	9e a1       	ldd	r25, Y+38	; 0x26
    1460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	9a a3       	std	Y+34, r25	; 0x22
    146a:	89 a3       	std	Y+33, r24	; 0x21
    146c:	89 a1       	ldd	r24, Y+33	; 0x21
    146e:	9a a1       	ldd	r25, Y+34	; 0x22
    1470:	9e 8f       	std	Y+30, r25	; 0x1e
    1472:	8d 8f       	std	Y+29, r24	; 0x1d
    1474:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1476:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <CLCD_voidSendData+0x24a>
    147c:	9e 8f       	std	Y+30, r25	; 0x1e
    147e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	DIO_SetPinValue(PORT_B,PIN_0,GET_BIT(copy_u8Data,0));
    1480:	89 ad       	ldd	r24, Y+57	; 0x39
    1482:	98 2f       	mov	r25, r24
    1484:	91 70       	andi	r25, 0x01	; 1
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	49 2f       	mov	r20, r25
    148c:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_1,GET_BIT(copy_u8Data,1));
    1490:	89 ad       	ldd	r24, Y+57	; 0x39
    1492:	86 95       	lsr	r24
    1494:	98 2f       	mov	r25, r24
    1496:	91 70       	andi	r25, 0x01	; 1
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	61 e0       	ldi	r22, 0x01	; 1
    149c:	49 2f       	mov	r20, r25
    149e:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_2,GET_BIT(copy_u8Data,2));
    14a2:	89 ad       	ldd	r24, Y+57	; 0x39
    14a4:	86 95       	lsr	r24
    14a6:	86 95       	lsr	r24
    14a8:	98 2f       	mov	r25, r24
    14aa:	91 70       	andi	r25, 0x01	; 1
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	62 e0       	ldi	r22, 0x02	; 2
    14b0:	49 2f       	mov	r20, r25
    14b2:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_4,GET_BIT(copy_u8Data,3));
    14b6:	89 ad       	ldd	r24, Y+57	; 0x39
    14b8:	86 95       	lsr	r24
    14ba:	86 95       	lsr	r24
    14bc:	86 95       	lsr	r24
    14be:	98 2f       	mov	r25, r24
    14c0:	91 70       	andi	r25, 0x01	; 1
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	64 e0       	ldi	r22, 0x04	; 4
    14c6:	49 2f       	mov	r20, r25
    14c8:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>




	/*Send enable pulse*/
	DIO_SetPinValue(PORT_A,PIN_2,PIN_HIGH);
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	62 e0       	ldi	r22, 0x02	; 2
    14d0:	41 e0       	ldi	r20, 0x01	; 1
    14d2:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	a0 e0       	ldi	r26, 0x00	; 0
    14dc:	b0 e4       	ldi	r27, 0x40	; 64
    14de:	89 8f       	std	Y+25, r24	; 0x19
    14e0:	9a 8f       	std	Y+26, r25	; 0x1a
    14e2:	ab 8f       	std	Y+27, r26	; 0x1b
    14e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e6:	69 8d       	ldd	r22, Y+25	; 0x19
    14e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	4a ef       	ldi	r20, 0xFA	; 250
    14f4:	54 e4       	ldi	r21, 0x44	; 68
    14f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	8d 8b       	std	Y+21, r24	; 0x15
    1500:	9e 8b       	std	Y+22, r25	; 0x16
    1502:	af 8b       	std	Y+23, r26	; 0x17
    1504:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1506:	6d 89       	ldd	r22, Y+21	; 0x15
    1508:	7e 89       	ldd	r23, Y+22	; 0x16
    150a:	8f 89       	ldd	r24, Y+23	; 0x17
    150c:	98 8d       	ldd	r25, Y+24	; 0x18
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e8       	ldi	r20, 0x80	; 128
    1514:	5f e3       	ldi	r21, 0x3F	; 63
    1516:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    151a:	88 23       	and	r24, r24
    151c:	2c f4       	brge	.+10     	; 0x1528 <CLCD_voidSendData+0x2fa>
		__ticks = 1;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	9c 8b       	std	Y+20, r25	; 0x14
    1524:	8b 8b       	std	Y+19, r24	; 0x13
    1526:	3f c0       	rjmp	.+126    	; 0x15a6 <CLCD_voidSendData+0x378>
	else if (__tmp > 65535)
    1528:	6d 89       	ldd	r22, Y+21	; 0x15
    152a:	7e 89       	ldd	r23, Y+22	; 0x16
    152c:	8f 89       	ldd	r24, Y+23	; 0x17
    152e:	98 8d       	ldd	r25, Y+24	; 0x18
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	3f ef       	ldi	r19, 0xFF	; 255
    1534:	4f e7       	ldi	r20, 0x7F	; 127
    1536:	57 e4       	ldi	r21, 0x47	; 71
    1538:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    153c:	18 16       	cp	r1, r24
    153e:	4c f5       	brge	.+82     	; 0x1592 <CLCD_voidSendData+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1540:	69 8d       	ldd	r22, Y+25	; 0x19
    1542:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1544:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1546:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e2       	ldi	r20, 0x20	; 32
    154e:	51 e4       	ldi	r21, 0x41	; 65
    1550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	bc 01       	movw	r22, r24
    155a:	cd 01       	movw	r24, r26
    155c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	9c 8b       	std	Y+20, r25	; 0x14
    1566:	8b 8b       	std	Y+19, r24	; 0x13
    1568:	0f c0       	rjmp	.+30     	; 0x1588 <CLCD_voidSendData+0x35a>
    156a:	88 ec       	ldi	r24, 0xC8	; 200
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	9a 8b       	std	Y+18, r25	; 0x12
    1570:	89 8b       	std	Y+17, r24	; 0x11
    1572:	89 89       	ldd	r24, Y+17	; 0x11
    1574:	9a 89       	ldd	r25, Y+18	; 0x12
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <CLCD_voidSendData+0x348>
    157a:	9a 8b       	std	Y+18, r25	; 0x12
    157c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157e:	8b 89       	ldd	r24, Y+19	; 0x13
    1580:	9c 89       	ldd	r25, Y+20	; 0x14
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	9c 8b       	std	Y+20, r25	; 0x14
    1586:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1588:	8b 89       	ldd	r24, Y+19	; 0x13
    158a:	9c 89       	ldd	r25, Y+20	; 0x14
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	69 f7       	brne	.-38     	; 0x156a <CLCD_voidSendData+0x33c>
    1590:	14 c0       	rjmp	.+40     	; 0x15ba <CLCD_voidSendData+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1592:	6d 89       	ldd	r22, Y+21	; 0x15
    1594:	7e 89       	ldd	r23, Y+22	; 0x16
    1596:	8f 89       	ldd	r24, Y+23	; 0x17
    1598:	98 8d       	ldd	r25, Y+24	; 0x18
    159a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	9c 8b       	std	Y+20, r25	; 0x14
    15a4:	8b 8b       	std	Y+19, r24	; 0x13
    15a6:	8b 89       	ldd	r24, Y+19	; 0x13
    15a8:	9c 89       	ldd	r25, Y+20	; 0x14
    15aa:	98 8b       	std	Y+16, r25	; 0x10
    15ac:	8f 87       	std	Y+15, r24	; 0x0f
    15ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b0:	98 89       	ldd	r25, Y+16	; 0x10
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	f1 f7       	brne	.-4      	; 0x15b2 <CLCD_voidSendData+0x384>
    15b6:	98 8b       	std	Y+16, r25	; 0x10
    15b8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_SetPinValue(PORT_A,PIN_2,PIN_LOW);
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	62 e0       	ldi	r22, 0x02	; 2
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	0e 94 17 1a 	call	0x342e	; 0x342e <DIO_SetPinValue>
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	a0 ea       	ldi	r26, 0xA0	; 160
    15ca:	b0 e4       	ldi	r27, 0x40	; 64
    15cc:	8b 87       	std	Y+11, r24	; 0x0b
    15ce:	9c 87       	std	Y+12, r25	; 0x0c
    15d0:	ad 87       	std	Y+13, r26	; 0x0d
    15d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15da:	9e 85       	ldd	r25, Y+14	; 0x0e
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	4a ef       	ldi	r20, 0xFA	; 250
    15e2:	54 e4       	ldi	r21, 0x44	; 68
    15e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	8f 83       	std	Y+7, r24	; 0x07
    15ee:	98 87       	std	Y+8, r25	; 0x08
    15f0:	a9 87       	std	Y+9, r26	; 0x09
    15f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15f4:	6f 81       	ldd	r22, Y+7	; 0x07
    15f6:	78 85       	ldd	r23, Y+8	; 0x08
    15f8:	89 85       	ldd	r24, Y+9	; 0x09
    15fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e8       	ldi	r20, 0x80	; 128
    1602:	5f e3       	ldi	r21, 0x3F	; 63
    1604:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1608:	88 23       	and	r24, r24
    160a:	2c f4       	brge	.+10     	; 0x1616 <CLCD_voidSendData+0x3e8>
		__ticks = 1;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	9e 83       	std	Y+6, r25	; 0x06
    1612:	8d 83       	std	Y+5, r24	; 0x05
    1614:	3f c0       	rjmp	.+126    	; 0x1694 <CLCD_voidSendData+0x466>
	else if (__tmp > 65535)
    1616:	6f 81       	ldd	r22, Y+7	; 0x07
    1618:	78 85       	ldd	r23, Y+8	; 0x08
    161a:	89 85       	ldd	r24, Y+9	; 0x09
    161c:	9a 85       	ldd	r25, Y+10	; 0x0a
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	3f ef       	ldi	r19, 0xFF	; 255
    1622:	4f e7       	ldi	r20, 0x7F	; 127
    1624:	57 e4       	ldi	r21, 0x47	; 71
    1626:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    162a:	18 16       	cp	r1, r24
    162c:	4c f5       	brge	.+82     	; 0x1680 <CLCD_voidSendData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1630:	7c 85       	ldd	r23, Y+12	; 0x0c
    1632:	8d 85       	ldd	r24, Y+13	; 0x0d
    1634:	9e 85       	ldd	r25, Y+14	; 0x0e
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e2       	ldi	r20, 0x20	; 32
    163c:	51 e4       	ldi	r21, 0x41	; 65
    163e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	bc 01       	movw	r22, r24
    1648:	cd 01       	movw	r24, r26
    164a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	9e 83       	std	Y+6, r25	; 0x06
    1654:	8d 83       	std	Y+5, r24	; 0x05
    1656:	0f c0       	rjmp	.+30     	; 0x1676 <CLCD_voidSendData+0x448>
    1658:	88 ec       	ldi	r24, 0xC8	; 200
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	9c 83       	std	Y+4, r25	; 0x04
    165e:	8b 83       	std	Y+3, r24	; 0x03
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	9c 81       	ldd	r25, Y+4	; 0x04
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <CLCD_voidSendData+0x436>
    1668:	9c 83       	std	Y+4, r25	; 0x04
    166a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	9e 81       	ldd	r25, Y+6	; 0x06
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	9e 83       	std	Y+6, r25	; 0x06
    1674:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	69 f7       	brne	.-38     	; 0x1658 <CLCD_voidSendData+0x42a>
    167e:	14 c0       	rjmp	.+40     	; 0x16a8 <CLCD_voidSendData+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1680:	6f 81       	ldd	r22, Y+7	; 0x07
    1682:	78 85       	ldd	r23, Y+8	; 0x08
    1684:	89 85       	ldd	r24, Y+9	; 0x09
    1686:	9a 85       	ldd	r25, Y+10	; 0x0a
    1688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	9e 83       	std	Y+6, r25	; 0x06
    1692:	8d 83       	std	Y+5, r24	; 0x05
    1694:	8d 81       	ldd	r24, Y+5	; 0x05
    1696:	9e 81       	ldd	r25, Y+6	; 0x06
    1698:	9a 83       	std	Y+2, r25	; 0x02
    169a:	89 83       	std	Y+1, r24	; 0x01
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	9a 81       	ldd	r25, Y+2	; 0x02
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <CLCD_voidSendData+0x472>
    16a4:	9a 83       	std	Y+2, r25	; 0x02
    16a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

}
    16a8:	e9 96       	adiw	r28, 0x39	; 57
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <CLCD_voidInit>:
void CLCD_voidInit(void)
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	e8 97       	sbiw	r28, 0x38	; 56
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
	/*set pin rs,rw,e->output*/
	DIO_INIT(PORT_A,PIN_3,PIN_OUTPUT);
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	63 e0       	ldi	r22, 0x03	; 3
    16d2:	41 e0       	ldi	r20, 0x01	; 1
    16d4:	0e 94 05 19 	call	0x320a	; 0x320a <DIO_INIT>
	//DIO_INIT(PORT_A,CLCD_RW_PIN,PIN_OUTPUT);
	DIO_INIT(PORT_A,PIN_2,PIN_OUTPUT);
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	62 e0       	ldi	r22, 0x02	; 2
    16dc:	41 e0       	ldi	r20, 0x01	; 1
    16de:	0e 94 05 19 	call	0x320a	; 0x320a <DIO_INIT>
	/*set data port as output*/

	DIO_SetPortDirection(PORT_B,PORT_OUT);
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	6f ef       	ldi	r22, 0xFF	; 255
    16e6:	0e 94 87 1c 	call	0x390e	; 0x390e <DIO_SetPortDirection>
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	a0 e2       	ldi	r26, 0x20	; 32
    16f0:	b2 e4       	ldi	r27, 0x42	; 66
    16f2:	8d ab       	std	Y+53, r24	; 0x35
    16f4:	9e ab       	std	Y+54, r25	; 0x36
    16f6:	af ab       	std	Y+55, r26	; 0x37
    16f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16fa:	6d a9       	ldd	r22, Y+53	; 0x35
    16fc:	7e a9       	ldd	r23, Y+54	; 0x36
    16fe:	8f a9       	ldd	r24, Y+55	; 0x37
    1700:	98 ad       	ldd	r25, Y+56	; 0x38
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	4a ef       	ldi	r20, 0xFA	; 250
    1708:	54 e4       	ldi	r21, 0x44	; 68
    170a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	89 ab       	std	Y+49, r24	; 0x31
    1714:	9a ab       	std	Y+50, r25	; 0x32
    1716:	ab ab       	std	Y+51, r26	; 0x33
    1718:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    171a:	69 a9       	ldd	r22, Y+49	; 0x31
    171c:	7a a9       	ldd	r23, Y+50	; 0x32
    171e:	8b a9       	ldd	r24, Y+51	; 0x33
    1720:	9c a9       	ldd	r25, Y+52	; 0x34
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 e8       	ldi	r20, 0x80	; 128
    1728:	5f e3       	ldi	r21, 0x3F	; 63
    172a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    172e:	88 23       	and	r24, r24
    1730:	2c f4       	brge	.+10     	; 0x173c <CLCD_voidInit+0x82>
		__ticks = 1;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	98 ab       	std	Y+48, r25	; 0x30
    1738:	8f a7       	std	Y+47, r24	; 0x2f
    173a:	3f c0       	rjmp	.+126    	; 0x17ba <CLCD_voidInit+0x100>
	else if (__tmp > 65535)
    173c:	69 a9       	ldd	r22, Y+49	; 0x31
    173e:	7a a9       	ldd	r23, Y+50	; 0x32
    1740:	8b a9       	ldd	r24, Y+51	; 0x33
    1742:	9c a9       	ldd	r25, Y+52	; 0x34
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	3f ef       	ldi	r19, 0xFF	; 255
    1748:	4f e7       	ldi	r20, 0x7F	; 127
    174a:	57 e4       	ldi	r21, 0x47	; 71
    174c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1750:	18 16       	cp	r1, r24
    1752:	4c f5       	brge	.+82     	; 0x17a6 <CLCD_voidInit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1754:	6d a9       	ldd	r22, Y+53	; 0x35
    1756:	7e a9       	ldd	r23, Y+54	; 0x36
    1758:	8f a9       	ldd	r24, Y+55	; 0x37
    175a:	98 ad       	ldd	r25, Y+56	; 0x38
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e2       	ldi	r20, 0x20	; 32
    1762:	51 e4       	ldi	r21, 0x41	; 65
    1764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	bc 01       	movw	r22, r24
    176e:	cd 01       	movw	r24, r26
    1770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	98 ab       	std	Y+48, r25	; 0x30
    177a:	8f a7       	std	Y+47, r24	; 0x2f
    177c:	0f c0       	rjmp	.+30     	; 0x179c <CLCD_voidInit+0xe2>
    177e:	88 ec       	ldi	r24, 0xC8	; 200
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	9e a7       	std	Y+46, r25	; 0x2e
    1784:	8d a7       	std	Y+45, r24	; 0x2d
    1786:	8d a5       	ldd	r24, Y+45	; 0x2d
    1788:	9e a5       	ldd	r25, Y+46	; 0x2e
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	f1 f7       	brne	.-4      	; 0x178a <CLCD_voidInit+0xd0>
    178e:	9e a7       	std	Y+46, r25	; 0x2e
    1790:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1792:	8f a5       	ldd	r24, Y+47	; 0x2f
    1794:	98 a9       	ldd	r25, Y+48	; 0x30
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	98 ab       	std	Y+48, r25	; 0x30
    179a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    179c:	8f a5       	ldd	r24, Y+47	; 0x2f
    179e:	98 a9       	ldd	r25, Y+48	; 0x30
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	69 f7       	brne	.-38     	; 0x177e <CLCD_voidInit+0xc4>
    17a4:	14 c0       	rjmp	.+40     	; 0x17ce <CLCD_voidInit+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a6:	69 a9       	ldd	r22, Y+49	; 0x31
    17a8:	7a a9       	ldd	r23, Y+50	; 0x32
    17aa:	8b a9       	ldd	r24, Y+51	; 0x33
    17ac:	9c a9       	ldd	r25, Y+52	; 0x34
    17ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	98 ab       	std	Y+48, r25	; 0x30
    17b8:	8f a7       	std	Y+47, r24	; 0x2f
    17ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    17bc:	98 a9       	ldd	r25, Y+48	; 0x30
    17be:	9c a7       	std	Y+44, r25	; 0x2c
    17c0:	8b a7       	std	Y+43, r24	; 0x2b
    17c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    17c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	f1 f7       	brne	.-4      	; 0x17c6 <CLCD_voidInit+0x10c>
    17ca:	9c a7       	std	Y+44, r25	; 0x2c
    17cc:	8b a7       	std	Y+43, r24	; 0x2b
	/*delay for more than 30 ms */
	_delay_ms(40);
	CLCD_voidCommand(0x33);
    17ce:	83 e3       	ldi	r24, 0x33	; 51
    17d0:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_voidCommand>
	CLCD_voidCommand(0x32);
    17d4:	82 e3       	ldi	r24, 0x32	; 50
    17d6:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_voidCommand>
	/*Function set command:2 lines(N)=1,,,5*8 font size (f=0)*/
	CLCD_voidCommand(0x28);
    17da:	88 e2       	ldi	r24, 0x28	; 40
    17dc:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_voidCommand>
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	a0 e8       	ldi	r26, 0x80	; 128
    17e6:	bf e3       	ldi	r27, 0x3F	; 63
    17e8:	8f a3       	std	Y+39, r24	; 0x27
    17ea:	98 a7       	std	Y+40, r25	; 0x28
    17ec:	a9 a7       	std	Y+41, r26	; 0x29
    17ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f0:	6f a1       	ldd	r22, Y+39	; 0x27
    17f2:	78 a5       	ldd	r23, Y+40	; 0x28
    17f4:	89 a5       	ldd	r24, Y+41	; 0x29
    17f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	4a ef       	ldi	r20, 0xFA	; 250
    17fe:	54 e4       	ldi	r21, 0x44	; 68
    1800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	8b a3       	std	Y+35, r24	; 0x23
    180a:	9c a3       	std	Y+36, r25	; 0x24
    180c:	ad a3       	std	Y+37, r26	; 0x25
    180e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1810:	6b a1       	ldd	r22, Y+35	; 0x23
    1812:	7c a1       	ldd	r23, Y+36	; 0x24
    1814:	8d a1       	ldd	r24, Y+37	; 0x25
    1816:	9e a1       	ldd	r25, Y+38	; 0x26
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e8       	ldi	r20, 0x80	; 128
    181e:	5f e3       	ldi	r21, 0x3F	; 63
    1820:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1824:	88 23       	and	r24, r24
    1826:	2c f4       	brge	.+10     	; 0x1832 <CLCD_voidInit+0x178>
		__ticks = 1;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	9a a3       	std	Y+34, r25	; 0x22
    182e:	89 a3       	std	Y+33, r24	; 0x21
    1830:	3f c0       	rjmp	.+126    	; 0x18b0 <CLCD_voidInit+0x1f6>
	else if (__tmp > 65535)
    1832:	6b a1       	ldd	r22, Y+35	; 0x23
    1834:	7c a1       	ldd	r23, Y+36	; 0x24
    1836:	8d a1       	ldd	r24, Y+37	; 0x25
    1838:	9e a1       	ldd	r25, Y+38	; 0x26
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	3f ef       	ldi	r19, 0xFF	; 255
    183e:	4f e7       	ldi	r20, 0x7F	; 127
    1840:	57 e4       	ldi	r21, 0x47	; 71
    1842:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1846:	18 16       	cp	r1, r24
    1848:	4c f5       	brge	.+82     	; 0x189c <CLCD_voidInit+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    184a:	6f a1       	ldd	r22, Y+39	; 0x27
    184c:	78 a5       	ldd	r23, Y+40	; 0x28
    184e:	89 a5       	ldd	r24, Y+41	; 0x29
    1850:	9a a5       	ldd	r25, Y+42	; 0x2a
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e2       	ldi	r20, 0x20	; 32
    1858:	51 e4       	ldi	r21, 0x41	; 65
    185a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	bc 01       	movw	r22, r24
    1864:	cd 01       	movw	r24, r26
    1866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	9a a3       	std	Y+34, r25	; 0x22
    1870:	89 a3       	std	Y+33, r24	; 0x21
    1872:	0f c0       	rjmp	.+30     	; 0x1892 <CLCD_voidInit+0x1d8>
    1874:	88 ec       	ldi	r24, 0xC8	; 200
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	98 a3       	std	Y+32, r25	; 0x20
    187a:	8f 8f       	std	Y+31, r24	; 0x1f
    187c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    187e:	98 a1       	ldd	r25, Y+32	; 0x20
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <CLCD_voidInit+0x1c6>
    1884:	98 a3       	std	Y+32, r25	; 0x20
    1886:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1888:	89 a1       	ldd	r24, Y+33	; 0x21
    188a:	9a a1       	ldd	r25, Y+34	; 0x22
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	9a a3       	std	Y+34, r25	; 0x22
    1890:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1892:	89 a1       	ldd	r24, Y+33	; 0x21
    1894:	9a a1       	ldd	r25, Y+34	; 0x22
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	69 f7       	brne	.-38     	; 0x1874 <CLCD_voidInit+0x1ba>
    189a:	14 c0       	rjmp	.+40     	; 0x18c4 <CLCD_voidInit+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189c:	6b a1       	ldd	r22, Y+35	; 0x23
    189e:	7c a1       	ldd	r23, Y+36	; 0x24
    18a0:	8d a1       	ldd	r24, Y+37	; 0x25
    18a2:	9e a1       	ldd	r25, Y+38	; 0x26
    18a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	9a a3       	std	Y+34, r25	; 0x22
    18ae:	89 a3       	std	Y+33, r24	; 0x21
    18b0:	89 a1       	ldd	r24, Y+33	; 0x21
    18b2:	9a a1       	ldd	r25, Y+34	; 0x22
    18b4:	9e 8f       	std	Y+30, r25	; 0x1e
    18b6:	8d 8f       	std	Y+29, r24	; 0x1d
    18b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <CLCD_voidInit+0x202>
    18c0:	9e 8f       	std	Y+30, r25	; 0x1e
    18c2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Display ON/OFF control:Display enable D=1,cursor disable,C=0,NO Blink cursorB=0*/
	CLCD_voidCommand(0x0c);
    18c4:	8c e0       	ldi	r24, 0x0C	; 12
    18c6:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_voidCommand>
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	a0 e0       	ldi	r26, 0x00	; 0
    18d0:	b0 e4       	ldi	r27, 0x40	; 64
    18d2:	89 8f       	std	Y+25, r24	; 0x19
    18d4:	9a 8f       	std	Y+26, r25	; 0x1a
    18d6:	ab 8f       	std	Y+27, r26	; 0x1b
    18d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18da:	69 8d       	ldd	r22, Y+25	; 0x19
    18dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	4a ef       	ldi	r20, 0xFA	; 250
    18e8:	54 e4       	ldi	r21, 0x44	; 68
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	8d 8b       	std	Y+21, r24	; 0x15
    18f4:	9e 8b       	std	Y+22, r25	; 0x16
    18f6:	af 8b       	std	Y+23, r26	; 0x17
    18f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18fa:	6d 89       	ldd	r22, Y+21	; 0x15
    18fc:	7e 89       	ldd	r23, Y+22	; 0x16
    18fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1900:	98 8d       	ldd	r25, Y+24	; 0x18
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e8       	ldi	r20, 0x80	; 128
    1908:	5f e3       	ldi	r21, 0x3F	; 63
    190a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    190e:	88 23       	and	r24, r24
    1910:	2c f4       	brge	.+10     	; 0x191c <CLCD_voidInit+0x262>
		__ticks = 1;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	9c 8b       	std	Y+20, r25	; 0x14
    1918:	8b 8b       	std	Y+19, r24	; 0x13
    191a:	3f c0       	rjmp	.+126    	; 0x199a <CLCD_voidInit+0x2e0>
	else if (__tmp > 65535)
    191c:	6d 89       	ldd	r22, Y+21	; 0x15
    191e:	7e 89       	ldd	r23, Y+22	; 0x16
    1920:	8f 89       	ldd	r24, Y+23	; 0x17
    1922:	98 8d       	ldd	r25, Y+24	; 0x18
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	3f ef       	ldi	r19, 0xFF	; 255
    1928:	4f e7       	ldi	r20, 0x7F	; 127
    192a:	57 e4       	ldi	r21, 0x47	; 71
    192c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1930:	18 16       	cp	r1, r24
    1932:	4c f5       	brge	.+82     	; 0x1986 <CLCD_voidInit+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1934:	69 8d       	ldd	r22, Y+25	; 0x19
    1936:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1938:	8b 8d       	ldd	r24, Y+27	; 0x1b
    193a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e2       	ldi	r20, 0x20	; 32
    1942:	51 e4       	ldi	r21, 0x41	; 65
    1944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	9c 8b       	std	Y+20, r25	; 0x14
    195a:	8b 8b       	std	Y+19, r24	; 0x13
    195c:	0f c0       	rjmp	.+30     	; 0x197c <CLCD_voidInit+0x2c2>
    195e:	88 ec       	ldi	r24, 0xC8	; 200
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	9a 8b       	std	Y+18, r25	; 0x12
    1964:	89 8b       	std	Y+17, r24	; 0x11
    1966:	89 89       	ldd	r24, Y+17	; 0x11
    1968:	9a 89       	ldd	r25, Y+18	; 0x12
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <CLCD_voidInit+0x2b0>
    196e:	9a 8b       	std	Y+18, r25	; 0x12
    1970:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1972:	8b 89       	ldd	r24, Y+19	; 0x13
    1974:	9c 89       	ldd	r25, Y+20	; 0x14
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	9c 8b       	std	Y+20, r25	; 0x14
    197a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197c:	8b 89       	ldd	r24, Y+19	; 0x13
    197e:	9c 89       	ldd	r25, Y+20	; 0x14
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	69 f7       	brne	.-38     	; 0x195e <CLCD_voidInit+0x2a4>
    1984:	14 c0       	rjmp	.+40     	; 0x19ae <CLCD_voidInit+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1986:	6d 89       	ldd	r22, Y+21	; 0x15
    1988:	7e 89       	ldd	r23, Y+22	; 0x16
    198a:	8f 89       	ldd	r24, Y+23	; 0x17
    198c:	98 8d       	ldd	r25, Y+24	; 0x18
    198e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	9c 8b       	std	Y+20, r25	; 0x14
    1998:	8b 8b       	std	Y+19, r24	; 0x13
    199a:	8b 89       	ldd	r24, Y+19	; 0x13
    199c:	9c 89       	ldd	r25, Y+20	; 0x14
    199e:	98 8b       	std	Y+16, r25	; 0x10
    19a0:	8f 87       	std	Y+15, r24	; 0x0f
    19a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a4:	98 89       	ldd	r25, Y+16	; 0x10
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <CLCD_voidInit+0x2ec>
    19aa:	98 8b       	std	Y+16, r25	; 0x10
    19ac:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(2);
	/*RETURN HOME*/
	CLCD_voidCommand(0x02);
    19ae:	82 e0       	ldi	r24, 0x02	; 2
    19b0:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_voidCommand>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	a0 e8       	ldi	r26, 0x80	; 128
    19ba:	bf e3       	ldi	r27, 0x3F	; 63
    19bc:	8b 87       	std	Y+11, r24	; 0x0b
    19be:	9c 87       	std	Y+12, r25	; 0x0c
    19c0:	ad 87       	std	Y+13, r26	; 0x0d
    19c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	4a ef       	ldi	r20, 0xFA	; 250
    19d2:	54 e4       	ldi	r21, 0x44	; 68
    19d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	8f 83       	std	Y+7, r24	; 0x07
    19de:	98 87       	std	Y+8, r25	; 0x08
    19e0:	a9 87       	std	Y+9, r26	; 0x09
    19e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19e4:	6f 81       	ldd	r22, Y+7	; 0x07
    19e6:	78 85       	ldd	r23, Y+8	; 0x08
    19e8:	89 85       	ldd	r24, Y+9	; 0x09
    19ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e8       	ldi	r20, 0x80	; 128
    19f2:	5f e3       	ldi	r21, 0x3F	; 63
    19f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f8:	88 23       	and	r24, r24
    19fa:	2c f4       	brge	.+10     	; 0x1a06 <CLCD_voidInit+0x34c>
		__ticks = 1;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9e 83       	std	Y+6, r25	; 0x06
    1a02:	8d 83       	std	Y+5, r24	; 0x05
    1a04:	3f c0       	rjmp	.+126    	; 0x1a84 <CLCD_voidInit+0x3ca>
	else if (__tmp > 65535)
    1a06:	6f 81       	ldd	r22, Y+7	; 0x07
    1a08:	78 85       	ldd	r23, Y+8	; 0x08
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	3f ef       	ldi	r19, 0xFF	; 255
    1a12:	4f e7       	ldi	r20, 0x7F	; 127
    1a14:	57 e4       	ldi	r21, 0x47	; 71
    1a16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a1a:	18 16       	cp	r1, r24
    1a1c:	4c f5       	brge	.+82     	; 0x1a70 <CLCD_voidInit+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e2       	ldi	r20, 0x20	; 32
    1a2c:	51 e4       	ldi	r21, 0x41	; 65
    1a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	bc 01       	movw	r22, r24
    1a38:	cd 01       	movw	r24, r26
    1a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	8d 83       	std	Y+5, r24	; 0x05
    1a46:	0f c0       	rjmp	.+30     	; 0x1a66 <CLCD_voidInit+0x3ac>
    1a48:	88 ec       	ldi	r24, 0xC8	; 200
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	9c 83       	std	Y+4, r25	; 0x04
    1a4e:	8b 83       	std	Y+3, r24	; 0x03
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	9c 81       	ldd	r25, Y+4	; 0x04
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <CLCD_voidInit+0x39a>
    1a58:	9c 83       	std	Y+4, r25	; 0x04
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	9e 83       	std	Y+6, r25	; 0x06
    1a64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a66:	8d 81       	ldd	r24, Y+5	; 0x05
    1a68:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	69 f7       	brne	.-38     	; 0x1a48 <CLCD_voidInit+0x38e>
    1a6e:	14 c0       	rjmp	.+40     	; 0x1a98 <CLCD_voidInit+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a70:	6f 81       	ldd	r22, Y+7	; 0x07
    1a72:	78 85       	ldd	r23, Y+8	; 0x08
    1a74:	89 85       	ldd	r24, Y+9	; 0x09
    1a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	8d 83       	std	Y+5, r24	; 0x05
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	9a 83       	std	Y+2, r25	; 0x02
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <CLCD_voidInit+0x3d6>
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	/*Clear display*/
	CLCD_voidCommand(0x01);
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_voidCommand>
}
    1a9e:	e8 96       	adiw	r28, 0x38	; 56
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <CLCD_GoTOXY>:
void CLCD_GoTOXY(u8int_t copy_u8Xpos,u8int_t copy_u8Ypos)
{
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	00 d0       	rcall	.+0      	; 0x1ab6 <CLCD_GoTOXY+0x6>
    1ab6:	0f 92       	push	r0
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	8a 83       	std	Y+2, r24	; 0x02
    1abe:	6b 83       	std	Y+3, r22	; 0x03
	u8int_t Local_u8Address;
	/*Location at first line*/
	if(copy_u8Xpos==0)//ifx==0->adress=y
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	88 23       	and	r24, r24
    1ac4:	19 f4       	brne	.+6      	; 0x1acc <CLCD_GoTOXY+0x1c>
	{
		Local_u8Address=(copy_u8Ypos);
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	89 83       	std	Y+1, r24	; 0x01
    1aca:	14 c0       	rjmp	.+40     	; 0x1af4 <CLCD_GoTOXY+0x44>

	}

	/*Location at second line*/
/*x->.row(0,1,2,3), y-> col(0...19*/
	else if(copy_u8Xpos==1)
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	81 30       	cpi	r24, 0x01	; 1
    1ad0:	21 f4       	brne	.+8      	; 0x1ada <CLCD_GoTOXY+0x2a>
	{
		Local_u8Address=(0x40+copy_u8Ypos);
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	80 5c       	subi	r24, 0xC0	; 192
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	0d c0       	rjmp	.+26     	; 0x1af4 <CLCD_GoTOXY+0x44>
	}

	else if(copy_u8Xpos==2)
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	82 30       	cpi	r24, 0x02	; 2
    1ade:	21 f4       	brne	.+8      	; 0x1ae8 <CLCD_GoTOXY+0x38>
	{
		Local_u8Address=(0x14+copy_u8Ypos);
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	8c 5e       	subi	r24, 0xEC	; 236
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	06 c0       	rjmp	.+12     	; 0x1af4 <CLCD_GoTOXY+0x44>
	}

	else if(copy_u8Xpos==3)
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	83 30       	cpi	r24, 0x03	; 3
    1aec:	19 f4       	brne	.+6      	; 0x1af4 <CLCD_GoTOXY+0x44>
	{
		Local_u8Address=(0x54+copy_u8Ypos);
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	8c 5a       	subi	r24, 0xAC	; 172
    1af2:	89 83       	std	Y+1, r24	; 0x01
	}


	/*Set DDRAM address in Address Counter */
	//128->for address counter
	CLCD_voidCommand(Local_u8Address+0x80);
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	80 58       	subi	r24, 0x80	; 128
    1af8:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_voidCommand>
}
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	08 95       	ret

00001b08 <CLCD_voidSendString>:
void CLCD_voidSendString(u8int_t* String)
{
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <CLCD_voidSendString+0x6>
    1b0e:	0f 92       	push	r0
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	9b 83       	std	Y+3, r25	; 0x03
    1b16:	8a 83       	std	Y+2, r24	; 0x02
	u8int_t Counter=0;
    1b18:	19 82       	std	Y+1, r1	; 0x01
    1b1a:	0e c0       	rjmp	.+28     	; 0x1b38 <CLCD_voidSendString+0x30>
	while(String[Counter]!='\0')
	{
		CLCD_voidSendData(String[Counter]);
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	9b 81       	ldd	r25, Y+3	; 0x03
    1b26:	fc 01       	movw	r30, r24
    1b28:	e2 0f       	add	r30, r18
    1b2a:	f3 1f       	adc	r31, r19
    1b2c:	80 81       	ld	r24, Z
    1b2e:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
		Counter++;
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	8f 5f       	subi	r24, 0xFF	; 255
    1b36:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidCommand(Local_u8Address+0x80);
}
void CLCD_voidSendString(u8int_t* String)
{
	u8int_t Counter=0;
	while(String[Counter]!='\0')
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	9b 81       	ldd	r25, Y+3	; 0x03
    1b42:	fc 01       	movw	r30, r24
    1b44:	e2 0f       	add	r30, r18
    1b46:	f3 1f       	adc	r31, r19
    1b48:	80 81       	ld	r24, Z
    1b4a:	88 23       	and	r24, r24
    1b4c:	39 f7       	brne	.-50     	; 0x1b1c <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(String[Counter]);
		Counter++;
	}
}
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <CLCD_voidWriteNumber>:
void CLCD_voidWriteNumber(u32 copy_u32Number)
{
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	27 97       	sbiw	r28, 0x07	; 7
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	6c 83       	std	Y+4, r22	; 0x04
    1b70:	7d 83       	std	Y+5, r23	; 0x05
    1b72:	8e 83       	std	Y+6, r24	; 0x06
    1b74:	9f 83       	std	Y+7, r25	; 0x07
	u8int_t Local_u8Digit;
	u8int_t Local_u8Counter=0;
    1b76:	1a 82       	std	Y+2, r1	; 0x02
	s8 Local_u8Counter2;
	static u8int_t Local_ArrayOfChar[10]={'0','1','2','3','4','5','6','7','8','9'};
	static u8int_t Local_ArrayOfDigits[10];

	if(copy_u32Number==0)
    1b78:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7c:	ae 81       	ldd	r26, Y+6	; 0x06
    1b7e:	bf 81       	ldd	r27, Y+7	; 0x07
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	a1 05       	cpc	r26, r1
    1b84:	b1 05       	cpc	r27, r1
    1b86:	b9 f5       	brne	.+110    	; 0x1bf6 <CLCD_voidWriteNumber+0x9c>
	{
		CLCD_voidSendData(Local_ArrayOfChar[0]);
    1b88:	80 91 78 00 	lds	r24, 0x0078
    1b8c:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
    1b90:	4e c0       	rjmp	.+156    	; 0x1c2e <CLCD_voidWriteNumber+0xd4>
	else
	{

		while(copy_u32Number>0)
		{
			Local_u8Digit=copy_u32Number%10;
    1b92:	8c 81       	ldd	r24, Y+4	; 0x04
    1b94:	9d 81       	ldd	r25, Y+5	; 0x05
    1b96:	ae 81       	ldd	r26, Y+6	; 0x06
    1b98:	bf 81       	ldd	r27, Y+7	; 0x07
    1b9a:	2a e0       	ldi	r18, 0x0A	; 10
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	bc 01       	movw	r22, r24
    1ba4:	cd 01       	movw	r24, r26
    1ba6:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__udivmodsi4>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	8b 83       	std	Y+3, r24	; 0x03
			copy_u32Number=copy_u32Number/10;
    1bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb4:	ae 81       	ldd	r26, Y+6	; 0x06
    1bb6:	bf 81       	ldd	r27, Y+7	; 0x07
    1bb8:	2a e0       	ldi	r18, 0x0A	; 10
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	50 e0       	ldi	r21, 0x00	; 0
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__udivmodsi4>
    1bc8:	da 01       	movw	r26, r20
    1bca:	c9 01       	movw	r24, r18
    1bcc:	8c 83       	std	Y+4, r24	; 0x04
    1bce:	9d 83       	std	Y+5, r25	; 0x05
    1bd0:	ae 83       	std	Y+6, r26	; 0x06
    1bd2:	bf 83       	std	Y+7, r27	; 0x07
			Local_ArrayOfDigits[Local_u8Counter]=Local_ArrayOfChar[Local_u8Digit];
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	88 2f       	mov	r24, r24
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	fc 01       	movw	r30, r24
    1be2:	e8 58       	subi	r30, 0x88	; 136
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	80 81       	ld	r24, Z
    1be8:	f9 01       	movw	r30, r18
    1bea:	e8 57       	subi	r30, 0x78	; 120
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	80 83       	st	Z, r24
			Local_u8Counter++;
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	8f 5f       	subi	r24, 0xFF	; 255
    1bf4:	8a 83       	std	Y+2, r24	; 0x02
		CLCD_voidSendData(Local_ArrayOfChar[0]);
	}
	else
	{

		while(copy_u32Number>0)
    1bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bfa:	ae 81       	ldd	r26, Y+6	; 0x06
    1bfc:	bf 81       	ldd	r27, Y+7	; 0x07
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	a1 05       	cpc	r26, r1
    1c02:	b1 05       	cpc	r27, r1
    1c04:	31 f6       	brne	.-116    	; 0x1b92 <CLCD_voidWriteNumber+0x38>
			copy_u32Number=copy_u32Number/10;
			Local_ArrayOfDigits[Local_u8Counter]=Local_ArrayOfChar[Local_u8Digit];
			Local_u8Counter++;
		}

		for(Local_u8Counter2=Local_u8Counter-1;Local_u8Counter2>=0;Local_u8Counter2--)
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	81 50       	subi	r24, 0x01	; 1
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	0d c0       	rjmp	.+26     	; 0x1c28 <CLCD_voidWriteNumber+0xce>
		{
			CLCD_voidSendData(Local_ArrayOfDigits[Local_u8Counter2]);
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	99 27       	eor	r25, r25
    1c12:	87 fd       	sbrc	r24, 7
    1c14:	90 95       	com	r25
    1c16:	fc 01       	movw	r30, r24
    1c18:	e8 57       	subi	r30, 0x78	; 120
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	80 81       	ld	r24, Z
    1c1e:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
			copy_u32Number=copy_u32Number/10;
			Local_ArrayOfDigits[Local_u8Counter]=Local_ArrayOfChar[Local_u8Digit];
			Local_u8Counter++;
		}

		for(Local_u8Counter2=Local_u8Counter-1;Local_u8Counter2>=0;Local_u8Counter2--)
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	81 50       	subi	r24, 0x01	; 1
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	88 23       	and	r24, r24
    1c2c:	84 f7       	brge	.-32     	; 0x1c0e <CLCD_voidWriteNumber+0xb4>
		{
			CLCD_voidSendData(Local_ArrayOfDigits[Local_u8Counter2]);
		}
	}
}
    1c2e:	27 96       	adiw	r28, 0x07	; 7
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <write_special_character>:
void write_special_character(u8int_t *pattern_ARR, u8int_t position,u8int_t x_pos, u8int_t y_pos )
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	27 97       	sbiw	r28, 0x07	; 7
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	9c 83       	std	Y+4, r25	; 0x04
    1c56:	8b 83       	std	Y+3, r24	; 0x03
    1c58:	6d 83       	std	Y+5, r22	; 0x05
    1c5a:	4e 83       	std	Y+6, r20	; 0x06
    1c5c:	2f 83       	std	Y+7, r18	; 0x07
	/*calculate cgram adress whose block 8 bytes*/
	CLCD_voidCommand(0x40+(position * 8));
    1c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c60:	88 2f       	mov	r24, r24
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	08 96       	adiw	r24, 0x08	; 8
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_voidCommand>
/*write pattern into cgram*/
	for(int i=0;i<8;i++)
    1c76:	1a 82       	std	Y+2, r1	; 0x02
    1c78:	19 82       	std	Y+1, r1	; 0x01
    1c7a:	0f c0       	rjmp	.+30     	; 0x1c9a <write_special_character+0x5a>
	{
		CLCD_voidSendData(pattern_ARR[i]);
    1c7c:	29 81       	ldd	r18, Y+1	; 0x01
    1c7e:	3a 81       	ldd	r19, Y+2	; 0x02
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	9c 81       	ldd	r25, Y+4	; 0x04
    1c84:	fc 01       	movw	r30, r24
    1c86:	e2 0f       	add	r30, r18
    1c88:	f3 1f       	adc	r31, r19
    1c8a:	80 81       	ld	r24, Z
    1c8c:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
void write_special_character(u8int_t *pattern_ARR, u8int_t position,u8int_t x_pos, u8int_t y_pos )
{
	/*calculate cgram adress whose block 8 bytes*/
	CLCD_voidCommand(0x40+(position * 8));
/*write pattern into cgram*/
	for(int i=0;i<8;i++)
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	9a 81       	ldd	r25, Y+2	; 0x02
    1c94:	01 96       	adiw	r24, 0x01	; 1
    1c96:	9a 83       	std	Y+2, r25	; 0x02
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
    1c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9e:	88 30       	cpi	r24, 0x08	; 8
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	64 f3       	brlt	.-40     	; 0x1c7c <write_special_character+0x3c>
	{
		CLCD_voidSendData(pattern_ARR[i]);
	}

	/*go to ddram to display pattern*/
CLCD_GoTOXY(x_pos,y_pos);
    1ca4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca8:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <CLCD_GoTOXY>
CLCD_voidSendData(position);
    1cac:	8d 81       	ldd	r24, Y+5	; 0x05
    1cae:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>

}
    1cb2:	27 96       	adiw	r28, 0x07	; 7
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <CLCD_Void_LCDClear>:
void CLCD_Void_LCDClear(void)
{
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    CLCD_voidCommand(0x01);
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_voidCommand>
}
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	08 95       	ret

00001cd8 <main>:
#include "config.h"

#define  MAX_UNUSED     1000

int main(void)
{
    1cd8:	0f 93       	push	r16
    1cda:	1f 93       	push	r17
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
    1ce4:	c4 56       	subi	r28, 0x64	; 100
    1ce6:	d0 40       	sbci	r29, 0x00	; 0
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
	label : CLCD_voidInit();
    1cf2:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <CLCD_voidInit>
	KYP_Init();
    1cf6:	0e 94 a3 05 	call	0xb46	; 0xb46 <KYP_Init>

	u8int_t arr[6]={KYP_NO_PRESSED,KYP_NO_PRESSED,KYP_NO_PRESSED,KYP_NO_PRESSED,KYP_NO_PRESSED,KYP_NO_PRESSED} ;
    1cfa:	ce 01       	movw	r24, r28
    1cfc:	88 5a       	subi	r24, 0xA8	; 168
    1cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1d00:	a2 96       	adiw	r28, 0x22	; 34
    1d02:	9f af       	std	Y+63, r25	; 0x3f
    1d04:	8e af       	std	Y+62, r24	; 0x3e
    1d06:	a2 97       	sbiw	r28, 0x22	; 34
    1d08:	22 e8       	ldi	r18, 0x82	; 130
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	a4 96       	adiw	r28, 0x24	; 36
    1d0e:	3f af       	std	Y+63, r19	; 0x3f
    1d10:	2e af       	std	Y+62, r18	; 0x3e
    1d12:	a4 97       	sbiw	r28, 0x24	; 36
    1d14:	36 e0       	ldi	r19, 0x06	; 6
    1d16:	a5 96       	adiw	r28, 0x25	; 37
    1d18:	3f af       	std	Y+63, r19	; 0x3f
    1d1a:	a5 97       	sbiw	r28, 0x25	; 37
    1d1c:	a4 96       	adiw	r28, 0x24	; 36
    1d1e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d20:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d22:	a4 97       	sbiw	r28, 0x24	; 36
    1d24:	00 80       	ld	r0, Z
    1d26:	a4 96       	adiw	r28, 0x24	; 36
    1d28:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d2a:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d2c:	a4 97       	sbiw	r28, 0x24	; 36
    1d2e:	2f 5f       	subi	r18, 0xFF	; 255
    1d30:	3f 4f       	sbci	r19, 0xFF	; 255
    1d32:	a4 96       	adiw	r28, 0x24	; 36
    1d34:	3f af       	std	Y+63, r19	; 0x3f
    1d36:	2e af       	std	Y+62, r18	; 0x3e
    1d38:	a4 97       	sbiw	r28, 0x24	; 36
    1d3a:	a2 96       	adiw	r28, 0x22	; 34
    1d3c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d3e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d40:	a2 97       	sbiw	r28, 0x22	; 34
    1d42:	00 82       	st	Z, r0
    1d44:	a2 96       	adiw	r28, 0x22	; 34
    1d46:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d48:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d4a:	a2 97       	sbiw	r28, 0x22	; 34
    1d4c:	2f 5f       	subi	r18, 0xFF	; 255
    1d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d50:	a2 96       	adiw	r28, 0x22	; 34
    1d52:	3f af       	std	Y+63, r19	; 0x3f
    1d54:	2e af       	std	Y+62, r18	; 0x3e
    1d56:	a2 97       	sbiw	r28, 0x22	; 34
    1d58:	a5 96       	adiw	r28, 0x25	; 37
    1d5a:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d5c:	a5 97       	sbiw	r28, 0x25	; 37
    1d5e:	31 50       	subi	r19, 0x01	; 1
    1d60:	a5 96       	adiw	r28, 0x25	; 37
    1d62:	3f af       	std	Y+63, r19	; 0x3f
    1d64:	a5 97       	sbiw	r28, 0x25	; 37
    1d66:	a5 96       	adiw	r28, 0x25	; 37
    1d68:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d6a:	a5 97       	sbiw	r28, 0x25	; 37
    1d6c:	88 23       	and	r24, r24
    1d6e:	b1 f6       	brne	.-84     	; 0x1d1c <main+0x44>
	u16 res ;
	u8int_t counter=0 ;
    1d70:	fe 01       	movw	r30, r28
    1d72:	eb 5a       	subi	r30, 0xAB	; 171
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	10 82       	st	Z, r1
	while(1)
	{
		do
		{
			arr[counter]=KYP_u8GetPressed();
    1d78:	fe 01       	movw	r30, r28
    1d7a:	eb 5a       	subi	r30, 0xAB	; 171
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	80 81       	ld	r24, Z
    1d80:	08 2f       	mov	r16, r24
    1d82:	10 e0       	ldi	r17, 0x00	; 0
    1d84:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <KYP_u8GetPressed>
    1d88:	28 2f       	mov	r18, r24
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	88 5a       	subi	r24, 0xA8	; 168
    1d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d90:	fc 01       	movw	r30, r24
    1d92:	e0 0f       	add	r30, r16
    1d94:	f1 1f       	adc	r31, r17
    1d96:	20 83       	st	Z, r18

		} while(arr[counter]==KYP_NO_PRESSED);
    1d98:	fe 01       	movw	r30, r28
    1d9a:	eb 5a       	subi	r30, 0xAB	; 171
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	80 81       	ld	r24, Z
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	ce 01       	movw	r24, r28
    1da6:	88 5a       	subi	r24, 0xA8	; 168
    1da8:	9f 4f       	sbci	r25, 0xFF	; 255
    1daa:	fc 01       	movw	r30, r24
    1dac:	e2 0f       	add	r30, r18
    1dae:	f3 1f       	adc	r31, r19
    1db0:	80 81       	ld	r24, Z
    1db2:	84 31       	cpi	r24, 0x14	; 20
    1db4:	09 f3       	breq	.-62     	; 0x1d78 <main+0xa0>
		if(arr[counter]=='A'||arr[counter]=='='||arr[counter]=='+'||arr[counter]=='-'||arr[counter]=='*'||arr[counter]=='/')
    1db6:	fe 01       	movw	r30, r28
    1db8:	eb 5a       	subi	r30, 0xAB	; 171
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	80 81       	ld	r24, Z
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	ce 01       	movw	r24, r28
    1dc4:	88 5a       	subi	r24, 0xA8	; 168
    1dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc8:	fc 01       	movw	r30, r24
    1dca:	e2 0f       	add	r30, r18
    1dcc:	f3 1f       	adc	r31, r19
    1dce:	80 81       	ld	r24, Z
    1dd0:	81 34       	cpi	r24, 0x41	; 65
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <main+0xfe>
    1dd4:	4b c0       	rjmp	.+150    	; 0x1e6c <main+0x194>
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	eb 5a       	subi	r30, 0xAB	; 171
    1dda:	ff 4f       	sbci	r31, 0xFF	; 255
    1ddc:	80 81       	ld	r24, Z
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	ce 01       	movw	r24, r28
    1de4:	88 5a       	subi	r24, 0xA8	; 168
    1de6:	9f 4f       	sbci	r25, 0xFF	; 255
    1de8:	fc 01       	movw	r30, r24
    1dea:	e2 0f       	add	r30, r18
    1dec:	f3 1f       	adc	r31, r19
    1dee:	80 81       	ld	r24, Z
    1df0:	8d 33       	cpi	r24, 0x3D	; 61
    1df2:	e1 f1       	breq	.+120    	; 0x1e6c <main+0x194>
    1df4:	fe 01       	movw	r30, r28
    1df6:	eb 5a       	subi	r30, 0xAB	; 171
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	80 81       	ld	r24, Z
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	ce 01       	movw	r24, r28
    1e02:	88 5a       	subi	r24, 0xA8	; 168
    1e04:	9f 4f       	sbci	r25, 0xFF	; 255
    1e06:	fc 01       	movw	r30, r24
    1e08:	e2 0f       	add	r30, r18
    1e0a:	f3 1f       	adc	r31, r19
    1e0c:	80 81       	ld	r24, Z
    1e0e:	8b 32       	cpi	r24, 0x2B	; 43
    1e10:	69 f1       	breq	.+90     	; 0x1e6c <main+0x194>
    1e12:	fe 01       	movw	r30, r28
    1e14:	eb 5a       	subi	r30, 0xAB	; 171
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	80 81       	ld	r24, Z
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	ce 01       	movw	r24, r28
    1e20:	88 5a       	subi	r24, 0xA8	; 168
    1e22:	9f 4f       	sbci	r25, 0xFF	; 255
    1e24:	fc 01       	movw	r30, r24
    1e26:	e2 0f       	add	r30, r18
    1e28:	f3 1f       	adc	r31, r19
    1e2a:	80 81       	ld	r24, Z
    1e2c:	8d 32       	cpi	r24, 0x2D	; 45
    1e2e:	f1 f0       	breq	.+60     	; 0x1e6c <main+0x194>
    1e30:	fe 01       	movw	r30, r28
    1e32:	eb 5a       	subi	r30, 0xAB	; 171
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	80 81       	ld	r24, Z
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	ce 01       	movw	r24, r28
    1e3e:	88 5a       	subi	r24, 0xA8	; 168
    1e40:	9f 4f       	sbci	r25, 0xFF	; 255
    1e42:	fc 01       	movw	r30, r24
    1e44:	e2 0f       	add	r30, r18
    1e46:	f3 1f       	adc	r31, r19
    1e48:	80 81       	ld	r24, Z
    1e4a:	8a 32       	cpi	r24, 0x2A	; 42
    1e4c:	79 f0       	breq	.+30     	; 0x1e6c <main+0x194>
    1e4e:	fe 01       	movw	r30, r28
    1e50:	eb 5a       	subi	r30, 0xAB	; 171
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	80 81       	ld	r24, Z
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	ce 01       	movw	r24, r28
    1e5c:	88 5a       	subi	r24, 0xA8	; 168
    1e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e60:	fc 01       	movw	r30, r24
    1e62:	e2 0f       	add	r30, r18
    1e64:	f3 1f       	adc	r31, r19
    1e66:	80 81       	ld	r24, Z
    1e68:	8f 32       	cpi	r24, 0x2F	; 47
    1e6a:	19 f4       	brne	.+6      	; 0x1e72 <main+0x19a>
		{
			CLCD_Void_LCDClear();
    1e6c:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <CLCD_Void_LCDClear>
    1e70:	40 cf       	rjmp	.-384    	; 0x1cf2 <main+0x1a>
			goto label ;
		}
		else
		{
			CLCD_voidSendData(arr[counter]);
    1e72:	fe 01       	movw	r30, r28
    1e74:	eb 5a       	subi	r30, 0xAB	; 171
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	80 81       	ld	r24, Z
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	ce 01       	movw	r24, r28
    1e80:	88 5a       	subi	r24, 0xA8	; 168
    1e82:	9f 4f       	sbci	r25, 0xFF	; 255
    1e84:	fc 01       	movw	r30, r24
    1e86:	e2 0f       	add	r30, r18
    1e88:	f3 1f       	adc	r31, r19
    1e8a:	80 81       	ld	r24, Z
    1e8c:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
		}
		counter++;
    1e90:	de 01       	movw	r26, r28
    1e92:	ab 5a       	subi	r26, 0xAB	; 171
    1e94:	bf 4f       	sbci	r27, 0xFF	; 255
    1e96:	fe 01       	movw	r30, r28
    1e98:	eb 5a       	subi	r30, 0xAB	; 171
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	80 81       	ld	r24, Z
    1e9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ea0:	8c 93       	st	X, r24
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	ef 5a       	subi	r30, 0xAF	; 175
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	a6 e9       	ldi	r26, 0x96	; 150
    1eae:	b3 e4       	ldi	r27, 0x43	; 67
    1eb0:	80 83       	st	Z, r24
    1eb2:	91 83       	std	Z+1, r25	; 0x01
    1eb4:	a2 83       	std	Z+2, r26	; 0x02
    1eb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb8:	8e 01       	movw	r16, r28
    1eba:	03 5b       	subi	r16, 0xB3	; 179
    1ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	ef 5a       	subi	r30, 0xAF	; 175
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	60 81       	ld	r22, Z
    1ec6:	71 81       	ldd	r23, Z+1	; 0x01
    1ec8:	82 81       	ldd	r24, Z+2	; 0x02
    1eca:	93 81       	ldd	r25, Z+3	; 0x03
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	4a ef       	ldi	r20, 0xFA	; 250
    1ed2:	54 e4       	ldi	r21, 0x44	; 68
    1ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	f8 01       	movw	r30, r16
    1ede:	80 83       	st	Z, r24
    1ee0:	91 83       	std	Z+1, r25	; 0x01
    1ee2:	a2 83       	std	Z+2, r26	; 0x02
    1ee4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	e3 5b       	subi	r30, 0xB3	; 179
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	60 81       	ld	r22, Z
    1eee:	71 81       	ldd	r23, Z+1	; 0x01
    1ef0:	82 81       	ldd	r24, Z+2	; 0x02
    1ef2:	93 81       	ldd	r25, Z+3	; 0x03
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e8       	ldi	r20, 0x80	; 128
    1efa:	5f e3       	ldi	r21, 0x3F	; 63
    1efc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f00:	88 23       	and	r24, r24
    1f02:	44 f4       	brge	.+16     	; 0x1f14 <main+0x23c>
		__ticks = 1;
    1f04:	fe 01       	movw	r30, r28
    1f06:	e5 5b       	subi	r30, 0xB5	; 181
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	91 83       	std	Z+1, r25	; 0x01
    1f10:	80 83       	st	Z, r24
    1f12:	64 c0       	rjmp	.+200    	; 0x1fdc <main+0x304>
	else if (__tmp > 65535)
    1f14:	fe 01       	movw	r30, r28
    1f16:	e3 5b       	subi	r30, 0xB3	; 179
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	60 81       	ld	r22, Z
    1f1c:	71 81       	ldd	r23, Z+1	; 0x01
    1f1e:	82 81       	ldd	r24, Z+2	; 0x02
    1f20:	93 81       	ldd	r25, Z+3	; 0x03
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	3f ef       	ldi	r19, 0xFF	; 255
    1f26:	4f e7       	ldi	r20, 0x7F	; 127
    1f28:	57 e4       	ldi	r21, 0x47	; 71
    1f2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f2e:	18 16       	cp	r1, r24
    1f30:	0c f0       	brlt	.+2      	; 0x1f34 <main+0x25c>
    1f32:	43 c0       	rjmp	.+134    	; 0x1fba <main+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f34:	fe 01       	movw	r30, r28
    1f36:	ef 5a       	subi	r30, 0xAF	; 175
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	60 81       	ld	r22, Z
    1f3c:	71 81       	ldd	r23, Z+1	; 0x01
    1f3e:	82 81       	ldd	r24, Z+2	; 0x02
    1f40:	93 81       	ldd	r25, Z+3	; 0x03
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e2       	ldi	r20, 0x20	; 32
    1f48:	51 e4       	ldi	r21, 0x41	; 65
    1f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	8e 01       	movw	r16, r28
    1f54:	05 5b       	subi	r16, 0xB5	; 181
    1f56:	1f 4f       	sbci	r17, 0xFF	; 255
    1f58:	bc 01       	movw	r22, r24
    1f5a:	cd 01       	movw	r24, r26
    1f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	f8 01       	movw	r30, r16
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	80 83       	st	Z, r24
    1f6a:	1f c0       	rjmp	.+62     	; 0x1faa <main+0x2d2>
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e7 5b       	subi	r30, 0xB7	; 183
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	88 ec       	ldi	r24, 0xC8	; 200
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	91 83       	std	Z+1, r25	; 0x01
    1f78:	80 83       	st	Z, r24
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	e7 5b       	subi	r30, 0xB7	; 183
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	80 81       	ld	r24, Z
    1f82:	91 81       	ldd	r25, Z+1	; 0x01
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <main+0x2ac>
    1f88:	fe 01       	movw	r30, r28
    1f8a:	e7 5b       	subi	r30, 0xB7	; 183
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	91 83       	std	Z+1, r25	; 0x01
    1f90:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f92:	de 01       	movw	r26, r28
    1f94:	a5 5b       	subi	r26, 0xB5	; 181
    1f96:	bf 4f       	sbci	r27, 0xFF	; 255
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e5 5b       	subi	r30, 0xB5	; 181
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	80 81       	ld	r24, Z
    1fa0:	91 81       	ldd	r25, Z+1	; 0x01
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	11 96       	adiw	r26, 0x01	; 1
    1fa6:	9c 93       	st	X, r25
    1fa8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1faa:	fe 01       	movw	r30, r28
    1fac:	e5 5b       	subi	r30, 0xB5	; 181
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	80 81       	ld	r24, Z
    1fb2:	91 81       	ldd	r25, Z+1	; 0x01
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	d1 f6       	brne	.-76     	; 0x1f6c <main+0x294>
    1fb8:	27 c0       	rjmp	.+78     	; 0x2008 <main+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fba:	8e 01       	movw	r16, r28
    1fbc:	05 5b       	subi	r16, 0xB5	; 181
    1fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e3 5b       	subi	r30, 0xB3	; 179
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	60 81       	ld	r22, Z
    1fc8:	71 81       	ldd	r23, Z+1	; 0x01
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	93 81       	ldd	r25, Z+3	; 0x03
    1fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	f8 01       	movw	r30, r16
    1fd8:	91 83       	std	Z+1, r25	; 0x01
    1fda:	80 83       	st	Z, r24
    1fdc:	de 01       	movw	r26, r28
    1fde:	a9 5b       	subi	r26, 0xB9	; 185
    1fe0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e5 5b       	subi	r30, 0xB5	; 181
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	80 81       	ld	r24, Z
    1fea:	91 81       	ldd	r25, Z+1	; 0x01
    1fec:	8d 93       	st	X+, r24
    1fee:	9c 93       	st	X, r25
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e9 5b       	subi	r30, 0xB9	; 185
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	80 81       	ld	r24, Z
    1ff8:	91 81       	ldd	r25, Z+1	; 0x01
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <main+0x322>
    1ffe:	fe 01       	movw	r30, r28
    2000:	e9 5b       	subi	r30, 0xB9	; 185
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	80 83       	st	Z, r24
		_delay_ms(300);
		do
		{
			arr[counter]=KYP_u8GetPressed();
    2008:	fe 01       	movw	r30, r28
    200a:	eb 5a       	subi	r30, 0xAB	; 171
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	80 81       	ld	r24, Z
    2010:	08 2f       	mov	r16, r24
    2012:	10 e0       	ldi	r17, 0x00	; 0
    2014:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <KYP_u8GetPressed>
    2018:	28 2f       	mov	r18, r24
    201a:	ce 01       	movw	r24, r28
    201c:	88 5a       	subi	r24, 0xA8	; 168
    201e:	9f 4f       	sbci	r25, 0xFF	; 255
    2020:	fc 01       	movw	r30, r24
    2022:	e0 0f       	add	r30, r16
    2024:	f1 1f       	adc	r31, r17
    2026:	20 83       	st	Z, r18

		}while(arr[counter]==KYP_NO_PRESSED);
    2028:	fe 01       	movw	r30, r28
    202a:	eb 5a       	subi	r30, 0xAB	; 171
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	80 81       	ld	r24, Z
    2030:	28 2f       	mov	r18, r24
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	ce 01       	movw	r24, r28
    2036:	88 5a       	subi	r24, 0xA8	; 168
    2038:	9f 4f       	sbci	r25, 0xFF	; 255
    203a:	fc 01       	movw	r30, r24
    203c:	e2 0f       	add	r30, r18
    203e:	f3 1f       	adc	r31, r19
    2040:	80 81       	ld	r24, Z
    2042:	84 31       	cpi	r24, 0x14	; 20
    2044:	09 f3       	breq	.-62     	; 0x2008 <main+0x330>
		if(arr[counter]=='A'||arr[counter]=='='||arr[counter]=='+'||arr[counter]=='-'||arr[counter]=='*'||arr[counter]=='/')
    2046:	fe 01       	movw	r30, r28
    2048:	eb 5a       	subi	r30, 0xAB	; 171
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	80 81       	ld	r24, Z
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	ce 01       	movw	r24, r28
    2054:	88 5a       	subi	r24, 0xA8	; 168
    2056:	9f 4f       	sbci	r25, 0xFF	; 255
    2058:	fc 01       	movw	r30, r24
    205a:	e2 0f       	add	r30, r18
    205c:	f3 1f       	adc	r31, r19
    205e:	80 81       	ld	r24, Z
    2060:	81 34       	cpi	r24, 0x41	; 65
    2062:	09 f4       	brne	.+2      	; 0x2066 <main+0x38e>
    2064:	4b c0       	rjmp	.+150    	; 0x20fc <main+0x424>
    2066:	fe 01       	movw	r30, r28
    2068:	eb 5a       	subi	r30, 0xAB	; 171
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	80 81       	ld	r24, Z
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	ce 01       	movw	r24, r28
    2074:	88 5a       	subi	r24, 0xA8	; 168
    2076:	9f 4f       	sbci	r25, 0xFF	; 255
    2078:	fc 01       	movw	r30, r24
    207a:	e2 0f       	add	r30, r18
    207c:	f3 1f       	adc	r31, r19
    207e:	80 81       	ld	r24, Z
    2080:	8d 33       	cpi	r24, 0x3D	; 61
    2082:	e1 f1       	breq	.+120    	; 0x20fc <main+0x424>
    2084:	fe 01       	movw	r30, r28
    2086:	eb 5a       	subi	r30, 0xAB	; 171
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	80 81       	ld	r24, Z
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	ce 01       	movw	r24, r28
    2092:	88 5a       	subi	r24, 0xA8	; 168
    2094:	9f 4f       	sbci	r25, 0xFF	; 255
    2096:	fc 01       	movw	r30, r24
    2098:	e2 0f       	add	r30, r18
    209a:	f3 1f       	adc	r31, r19
    209c:	80 81       	ld	r24, Z
    209e:	8b 32       	cpi	r24, 0x2B	; 43
    20a0:	69 f1       	breq	.+90     	; 0x20fc <main+0x424>
    20a2:	fe 01       	movw	r30, r28
    20a4:	eb 5a       	subi	r30, 0xAB	; 171
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	80 81       	ld	r24, Z
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	ce 01       	movw	r24, r28
    20b0:	88 5a       	subi	r24, 0xA8	; 168
    20b2:	9f 4f       	sbci	r25, 0xFF	; 255
    20b4:	fc 01       	movw	r30, r24
    20b6:	e2 0f       	add	r30, r18
    20b8:	f3 1f       	adc	r31, r19
    20ba:	80 81       	ld	r24, Z
    20bc:	8d 32       	cpi	r24, 0x2D	; 45
    20be:	f1 f0       	breq	.+60     	; 0x20fc <main+0x424>
    20c0:	fe 01       	movw	r30, r28
    20c2:	eb 5a       	subi	r30, 0xAB	; 171
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	80 81       	ld	r24, Z
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	ce 01       	movw	r24, r28
    20ce:	88 5a       	subi	r24, 0xA8	; 168
    20d0:	9f 4f       	sbci	r25, 0xFF	; 255
    20d2:	fc 01       	movw	r30, r24
    20d4:	e2 0f       	add	r30, r18
    20d6:	f3 1f       	adc	r31, r19
    20d8:	80 81       	ld	r24, Z
    20da:	8a 32       	cpi	r24, 0x2A	; 42
    20dc:	79 f0       	breq	.+30     	; 0x20fc <main+0x424>
    20de:	fe 01       	movw	r30, r28
    20e0:	eb 5a       	subi	r30, 0xAB	; 171
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	80 81       	ld	r24, Z
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	ce 01       	movw	r24, r28
    20ec:	88 5a       	subi	r24, 0xA8	; 168
    20ee:	9f 4f       	sbci	r25, 0xFF	; 255
    20f0:	fc 01       	movw	r30, r24
    20f2:	e2 0f       	add	r30, r18
    20f4:	f3 1f       	adc	r31, r19
    20f6:	80 81       	ld	r24, Z
    20f8:	8f 32       	cpi	r24, 0x2F	; 47
    20fa:	19 f4       	brne	.+6      	; 0x2102 <main+0x42a>
		{
			CLCD_Void_LCDClear();
    20fc:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <CLCD_Void_LCDClear>
    2100:	f8 cd       	rjmp	.-1040   	; 0x1cf2 <main+0x1a>
			goto label ;
		}
		else
		{
			CLCD_voidSendData(arr[counter]);
    2102:	fe 01       	movw	r30, r28
    2104:	eb 5a       	subi	r30, 0xAB	; 171
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	80 81       	ld	r24, Z
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	ce 01       	movw	r24, r28
    2110:	88 5a       	subi	r24, 0xA8	; 168
    2112:	9f 4f       	sbci	r25, 0xFF	; 255
    2114:	fc 01       	movw	r30, r24
    2116:	e2 0f       	add	r30, r18
    2118:	f3 1f       	adc	r31, r19
    211a:	80 81       	ld	r24, Z
    211c:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
		}
		counter++;
    2120:	de 01       	movw	r26, r28
    2122:	ab 5a       	subi	r26, 0xAB	; 171
    2124:	bf 4f       	sbci	r27, 0xFF	; 255
    2126:	fe 01       	movw	r30, r28
    2128:	eb 5a       	subi	r30, 0xAB	; 171
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	80 81       	ld	r24, Z
    212e:	8f 5f       	subi	r24, 0xFF	; 255
    2130:	8c 93       	st	X, r24
    2132:	fe 01       	movw	r30, r28
    2134:	ed 5b       	subi	r30, 0xBD	; 189
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	a6 e9       	ldi	r26, 0x96	; 150
    213e:	b3 e4       	ldi	r27, 0x43	; 67
    2140:	80 83       	st	Z, r24
    2142:	91 83       	std	Z+1, r25	; 0x01
    2144:	a2 83       	std	Z+2, r26	; 0x02
    2146:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2148:	8e 01       	movw	r16, r28
    214a:	01 5c       	subi	r16, 0xC1	; 193
    214c:	1f 4f       	sbci	r17, 0xFF	; 255
    214e:	fe 01       	movw	r30, r28
    2150:	ed 5b       	subi	r30, 0xBD	; 189
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	60 81       	ld	r22, Z
    2156:	71 81       	ldd	r23, Z+1	; 0x01
    2158:	82 81       	ldd	r24, Z+2	; 0x02
    215a:	93 81       	ldd	r25, Z+3	; 0x03
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	4a ef       	ldi	r20, 0xFA	; 250
    2162:	54 e4       	ldi	r21, 0x44	; 68
    2164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	f8 01       	movw	r30, r16
    216e:	80 83       	st	Z, r24
    2170:	91 83       	std	Z+1, r25	; 0x01
    2172:	a2 83       	std	Z+2, r26	; 0x02
    2174:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2176:	fe 01       	movw	r30, r28
    2178:	ff 96       	adiw	r30, 0x3f	; 63
    217a:	60 81       	ld	r22, Z
    217c:	71 81       	ldd	r23, Z+1	; 0x01
    217e:	82 81       	ldd	r24, Z+2	; 0x02
    2180:	93 81       	ldd	r25, Z+3	; 0x03
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e8       	ldi	r20, 0x80	; 128
    2188:	5f e3       	ldi	r21, 0x3F	; 63
    218a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    218e:	88 23       	and	r24, r24
    2190:	2c f4       	brge	.+10     	; 0x219c <main+0x4c4>
		__ticks = 1;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9e af       	std	Y+62, r25	; 0x3e
    2198:	8d af       	std	Y+61, r24	; 0x3d
    219a:	46 c0       	rjmp	.+140    	; 0x2228 <main+0x550>
	else if (__tmp > 65535)
    219c:	fe 01       	movw	r30, r28
    219e:	ff 96       	adiw	r30, 0x3f	; 63
    21a0:	60 81       	ld	r22, Z
    21a2:	71 81       	ldd	r23, Z+1	; 0x01
    21a4:	82 81       	ldd	r24, Z+2	; 0x02
    21a6:	93 81       	ldd	r25, Z+3	; 0x03
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	3f ef       	ldi	r19, 0xFF	; 255
    21ac:	4f e7       	ldi	r20, 0x7F	; 127
    21ae:	57 e4       	ldi	r21, 0x47	; 71
    21b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21b4:	18 16       	cp	r1, r24
    21b6:	64 f5       	brge	.+88     	; 0x2210 <main+0x538>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b8:	fe 01       	movw	r30, r28
    21ba:	ed 5b       	subi	r30, 0xBD	; 189
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	60 81       	ld	r22, Z
    21c0:	71 81       	ldd	r23, Z+1	; 0x01
    21c2:	82 81       	ldd	r24, Z+2	; 0x02
    21c4:	93 81       	ldd	r25, Z+3	; 0x03
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e2       	ldi	r20, 0x20	; 32
    21cc:	51 e4       	ldi	r21, 0x41	; 65
    21ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	bc 01       	movw	r22, r24
    21d8:	cd 01       	movw	r24, r26
    21da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	9e af       	std	Y+62, r25	; 0x3e
    21e4:	8d af       	std	Y+61, r24	; 0x3d
    21e6:	0f c0       	rjmp	.+30     	; 0x2206 <main+0x52e>
    21e8:	88 ec       	ldi	r24, 0xC8	; 200
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	9c af       	std	Y+60, r25	; 0x3c
    21ee:	8b af       	std	Y+59, r24	; 0x3b
    21f0:	8b ad       	ldd	r24, Y+59	; 0x3b
    21f2:	9c ad       	ldd	r25, Y+60	; 0x3c
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <main+0x51c>
    21f8:	9c af       	std	Y+60, r25	; 0x3c
    21fa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    21fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	9e af       	std	Y+62, r25	; 0x3e
    2204:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2206:	8d ad       	ldd	r24, Y+61	; 0x3d
    2208:	9e ad       	ldd	r25, Y+62	; 0x3e
    220a:	00 97       	sbiw	r24, 0x00	; 0
    220c:	69 f7       	brne	.-38     	; 0x21e8 <main+0x510>
    220e:	16 c0       	rjmp	.+44     	; 0x223c <main+0x564>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2210:	fe 01       	movw	r30, r28
    2212:	ff 96       	adiw	r30, 0x3f	; 63
    2214:	60 81       	ld	r22, Z
    2216:	71 81       	ldd	r23, Z+1	; 0x01
    2218:	82 81       	ldd	r24, Z+2	; 0x02
    221a:	93 81       	ldd	r25, Z+3	; 0x03
    221c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	9e af       	std	Y+62, r25	; 0x3e
    2226:	8d af       	std	Y+61, r24	; 0x3d
    2228:	8d ad       	ldd	r24, Y+61	; 0x3d
    222a:	9e ad       	ldd	r25, Y+62	; 0x3e
    222c:	9a af       	std	Y+58, r25	; 0x3a
    222e:	89 af       	std	Y+57, r24	; 0x39
    2230:	89 ad       	ldd	r24, Y+57	; 0x39
    2232:	9a ad       	ldd	r25, Y+58	; 0x3a
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <main+0x55c>
    2238:	9a af       	std	Y+58, r25	; 0x3a
    223a:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(300);

		do
		{
			arr[counter]=KYP_u8GetPressed();
    223c:	fe 01       	movw	r30, r28
    223e:	eb 5a       	subi	r30, 0xAB	; 171
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	80 81       	ld	r24, Z
    2244:	08 2f       	mov	r16, r24
    2246:	10 e0       	ldi	r17, 0x00	; 0
    2248:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <KYP_u8GetPressed>
    224c:	28 2f       	mov	r18, r24
    224e:	ce 01       	movw	r24, r28
    2250:	88 5a       	subi	r24, 0xA8	; 168
    2252:	9f 4f       	sbci	r25, 0xFF	; 255
    2254:	fc 01       	movw	r30, r24
    2256:	e0 0f       	add	r30, r16
    2258:	f1 1f       	adc	r31, r17
    225a:	20 83       	st	Z, r18

		}while(arr[counter]==KYP_NO_PRESSED);
    225c:	fe 01       	movw	r30, r28
    225e:	eb 5a       	subi	r30, 0xAB	; 171
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	80 81       	ld	r24, Z
    2264:	28 2f       	mov	r18, r24
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	ce 01       	movw	r24, r28
    226a:	88 5a       	subi	r24, 0xA8	; 168
    226c:	9f 4f       	sbci	r25, 0xFF	; 255
    226e:	fc 01       	movw	r30, r24
    2270:	e2 0f       	add	r30, r18
    2272:	f3 1f       	adc	r31, r19
    2274:	80 81       	ld	r24, Z
    2276:	84 31       	cpi	r24, 0x14	; 20
    2278:	09 f3       	breq	.-62     	; 0x223c <main+0x564>

		if(arr[counter]=='A'||arr[counter]=='=')
    227a:	fe 01       	movw	r30, r28
    227c:	eb 5a       	subi	r30, 0xAB	; 171
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	80 81       	ld	r24, Z
    2282:	28 2f       	mov	r18, r24
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	ce 01       	movw	r24, r28
    2288:	88 5a       	subi	r24, 0xA8	; 168
    228a:	9f 4f       	sbci	r25, 0xFF	; 255
    228c:	fc 01       	movw	r30, r24
    228e:	e2 0f       	add	r30, r18
    2290:	f3 1f       	adc	r31, r19
    2292:	80 81       	ld	r24, Z
    2294:	81 34       	cpi	r24, 0x41	; 65
    2296:	79 f0       	breq	.+30     	; 0x22b6 <main+0x5de>
    2298:	fe 01       	movw	r30, r28
    229a:	eb 5a       	subi	r30, 0xAB	; 171
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	80 81       	ld	r24, Z
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	ce 01       	movw	r24, r28
    22a6:	88 5a       	subi	r24, 0xA8	; 168
    22a8:	9f 4f       	sbci	r25, 0xFF	; 255
    22aa:	fc 01       	movw	r30, r24
    22ac:	e2 0f       	add	r30, r18
    22ae:	f3 1f       	adc	r31, r19
    22b0:	80 81       	ld	r24, Z
    22b2:	8d 33       	cpi	r24, 0x3D	; 61
    22b4:	19 f4       	brne	.+6      	; 0x22bc <main+0x5e4>
		{
			CLCD_Void_LCDClear();
    22b6:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <CLCD_Void_LCDClear>
    22ba:	1b cd       	rjmp	.-1482   	; 0x1cf2 <main+0x1a>
			goto label ;
		}
		else
		{
			CLCD_voidSendData(arr[counter]);
    22bc:	fe 01       	movw	r30, r28
    22be:	eb 5a       	subi	r30, 0xAB	; 171
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 81       	ld	r24, Z
    22c4:	28 2f       	mov	r18, r24
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	ce 01       	movw	r24, r28
    22ca:	88 5a       	subi	r24, 0xA8	; 168
    22cc:	9f 4f       	sbci	r25, 0xFF	; 255
    22ce:	fc 01       	movw	r30, r24
    22d0:	e2 0f       	add	r30, r18
    22d2:	f3 1f       	adc	r31, r19
    22d4:	80 81       	ld	r24, Z
    22d6:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
		}
		counter++;
    22da:	de 01       	movw	r26, r28
    22dc:	ab 5a       	subi	r26, 0xAB	; 171
    22de:	bf 4f       	sbci	r27, 0xFF	; 255
    22e0:	fe 01       	movw	r30, r28
    22e2:	eb 5a       	subi	r30, 0xAB	; 171
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	80 81       	ld	r24, Z
    22e8:	8f 5f       	subi	r24, 0xFF	; 255
    22ea:	8c 93       	st	X, r24
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	a6 e9       	ldi	r26, 0x96	; 150
    22f2:	b3 e4       	ldi	r27, 0x43	; 67
    22f4:	8d ab       	std	Y+53, r24	; 0x35
    22f6:	9e ab       	std	Y+54, r25	; 0x36
    22f8:	af ab       	std	Y+55, r26	; 0x37
    22fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fc:	6d a9       	ldd	r22, Y+53	; 0x35
    22fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2300:	8f a9       	ldd	r24, Y+55	; 0x37
    2302:	98 ad       	ldd	r25, Y+56	; 0x38
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	4a ef       	ldi	r20, 0xFA	; 250
    230a:	54 e4       	ldi	r21, 0x44	; 68
    230c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	89 ab       	std	Y+49, r24	; 0x31
    2316:	9a ab       	std	Y+50, r25	; 0x32
    2318:	ab ab       	std	Y+51, r26	; 0x33
    231a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    231c:	69 a9       	ldd	r22, Y+49	; 0x31
    231e:	7a a9       	ldd	r23, Y+50	; 0x32
    2320:	8b a9       	ldd	r24, Y+51	; 0x33
    2322:	9c a9       	ldd	r25, Y+52	; 0x34
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e8       	ldi	r20, 0x80	; 128
    232a:	5f e3       	ldi	r21, 0x3F	; 63
    232c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2330:	88 23       	and	r24, r24
    2332:	2c f4       	brge	.+10     	; 0x233e <main+0x666>
		__ticks = 1;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	98 ab       	std	Y+48, r25	; 0x30
    233a:	8f a7       	std	Y+47, r24	; 0x2f
    233c:	3f c0       	rjmp	.+126    	; 0x23bc <main+0x6e4>
	else if (__tmp > 65535)
    233e:	69 a9       	ldd	r22, Y+49	; 0x31
    2340:	7a a9       	ldd	r23, Y+50	; 0x32
    2342:	8b a9       	ldd	r24, Y+51	; 0x33
    2344:	9c a9       	ldd	r25, Y+52	; 0x34
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	3f ef       	ldi	r19, 0xFF	; 255
    234a:	4f e7       	ldi	r20, 0x7F	; 127
    234c:	57 e4       	ldi	r21, 0x47	; 71
    234e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2352:	18 16       	cp	r1, r24
    2354:	4c f5       	brge	.+82     	; 0x23a8 <main+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2356:	6d a9       	ldd	r22, Y+53	; 0x35
    2358:	7e a9       	ldd	r23, Y+54	; 0x36
    235a:	8f a9       	ldd	r24, Y+55	; 0x37
    235c:	98 ad       	ldd	r25, Y+56	; 0x38
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	40 e2       	ldi	r20, 0x20	; 32
    2364:	51 e4       	ldi	r21, 0x41	; 65
    2366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	bc 01       	movw	r22, r24
    2370:	cd 01       	movw	r24, r26
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	98 ab       	std	Y+48, r25	; 0x30
    237c:	8f a7       	std	Y+47, r24	; 0x2f
    237e:	0f c0       	rjmp	.+30     	; 0x239e <main+0x6c6>
    2380:	88 ec       	ldi	r24, 0xC8	; 200
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9e a7       	std	Y+46, r25	; 0x2e
    2386:	8d a7       	std	Y+45, r24	; 0x2d
    2388:	8d a5       	ldd	r24, Y+45	; 0x2d
    238a:	9e a5       	ldd	r25, Y+46	; 0x2e
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <main+0x6b4>
    2390:	9e a7       	std	Y+46, r25	; 0x2e
    2392:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2394:	8f a5       	ldd	r24, Y+47	; 0x2f
    2396:	98 a9       	ldd	r25, Y+48	; 0x30
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	98 ab       	std	Y+48, r25	; 0x30
    239c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239e:	8f a5       	ldd	r24, Y+47	; 0x2f
    23a0:	98 a9       	ldd	r25, Y+48	; 0x30
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	69 f7       	brne	.-38     	; 0x2380 <main+0x6a8>
    23a6:	14 c0       	rjmp	.+40     	; 0x23d0 <main+0x6f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a8:	69 a9       	ldd	r22, Y+49	; 0x31
    23aa:	7a a9       	ldd	r23, Y+50	; 0x32
    23ac:	8b a9       	ldd	r24, Y+51	; 0x33
    23ae:	9c a9       	ldd	r25, Y+52	; 0x34
    23b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	98 ab       	std	Y+48, r25	; 0x30
    23ba:	8f a7       	std	Y+47, r24	; 0x2f
    23bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    23be:	98 a9       	ldd	r25, Y+48	; 0x30
    23c0:	9c a7       	std	Y+44, r25	; 0x2c
    23c2:	8b a7       	std	Y+43, r24	; 0x2b
    23c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    23c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <main+0x6f0>
    23cc:	9c a7       	std	Y+44, r25	; 0x2c
    23ce:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(300);
		do
		{
			arr[counter]=KYP_u8GetPressed();
    23d0:	fe 01       	movw	r30, r28
    23d2:	eb 5a       	subi	r30, 0xAB	; 171
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	80 81       	ld	r24, Z
    23d8:	08 2f       	mov	r16, r24
    23da:	10 e0       	ldi	r17, 0x00	; 0
    23dc:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <KYP_u8GetPressed>
    23e0:	28 2f       	mov	r18, r24
    23e2:	ce 01       	movw	r24, r28
    23e4:	88 5a       	subi	r24, 0xA8	; 168
    23e6:	9f 4f       	sbci	r25, 0xFF	; 255
    23e8:	fc 01       	movw	r30, r24
    23ea:	e0 0f       	add	r30, r16
    23ec:	f1 1f       	adc	r31, r17
    23ee:	20 83       	st	Z, r18

		}while(arr[counter]==KYP_NO_PRESSED);
    23f0:	fe 01       	movw	r30, r28
    23f2:	eb 5a       	subi	r30, 0xAB	; 171
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	80 81       	ld	r24, Z
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	ce 01       	movw	r24, r28
    23fe:	88 5a       	subi	r24, 0xA8	; 168
    2400:	9f 4f       	sbci	r25, 0xFF	; 255
    2402:	fc 01       	movw	r30, r24
    2404:	e2 0f       	add	r30, r18
    2406:	f3 1f       	adc	r31, r19
    2408:	80 81       	ld	r24, Z
    240a:	84 31       	cpi	r24, 0x14	; 20
    240c:	09 f3       	breq	.-62     	; 0x23d0 <main+0x6f8>

		if(arr[counter]=='A'||arr[counter]=='='||arr[counter]=='+'||arr[counter]=='-'||arr[counter]=='*'||arr[counter]=='/')
    240e:	fe 01       	movw	r30, r28
    2410:	eb 5a       	subi	r30, 0xAB	; 171
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	80 81       	ld	r24, Z
    2416:	28 2f       	mov	r18, r24
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	ce 01       	movw	r24, r28
    241c:	88 5a       	subi	r24, 0xA8	; 168
    241e:	9f 4f       	sbci	r25, 0xFF	; 255
    2420:	fc 01       	movw	r30, r24
    2422:	e2 0f       	add	r30, r18
    2424:	f3 1f       	adc	r31, r19
    2426:	80 81       	ld	r24, Z
    2428:	81 34       	cpi	r24, 0x41	; 65
    242a:	09 f4       	brne	.+2      	; 0x242e <main+0x756>
    242c:	4b c0       	rjmp	.+150    	; 0x24c4 <main+0x7ec>
    242e:	fe 01       	movw	r30, r28
    2430:	eb 5a       	subi	r30, 0xAB	; 171
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 81       	ld	r24, Z
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	ce 01       	movw	r24, r28
    243c:	88 5a       	subi	r24, 0xA8	; 168
    243e:	9f 4f       	sbci	r25, 0xFF	; 255
    2440:	fc 01       	movw	r30, r24
    2442:	e2 0f       	add	r30, r18
    2444:	f3 1f       	adc	r31, r19
    2446:	80 81       	ld	r24, Z
    2448:	8d 33       	cpi	r24, 0x3D	; 61
    244a:	e1 f1       	breq	.+120    	; 0x24c4 <main+0x7ec>
    244c:	fe 01       	movw	r30, r28
    244e:	eb 5a       	subi	r30, 0xAB	; 171
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	80 81       	ld	r24, Z
    2454:	28 2f       	mov	r18, r24
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	ce 01       	movw	r24, r28
    245a:	88 5a       	subi	r24, 0xA8	; 168
    245c:	9f 4f       	sbci	r25, 0xFF	; 255
    245e:	fc 01       	movw	r30, r24
    2460:	e2 0f       	add	r30, r18
    2462:	f3 1f       	adc	r31, r19
    2464:	80 81       	ld	r24, Z
    2466:	8b 32       	cpi	r24, 0x2B	; 43
    2468:	69 f1       	breq	.+90     	; 0x24c4 <main+0x7ec>
    246a:	fe 01       	movw	r30, r28
    246c:	eb 5a       	subi	r30, 0xAB	; 171
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	80 81       	ld	r24, Z
    2472:	28 2f       	mov	r18, r24
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	ce 01       	movw	r24, r28
    2478:	88 5a       	subi	r24, 0xA8	; 168
    247a:	9f 4f       	sbci	r25, 0xFF	; 255
    247c:	fc 01       	movw	r30, r24
    247e:	e2 0f       	add	r30, r18
    2480:	f3 1f       	adc	r31, r19
    2482:	80 81       	ld	r24, Z
    2484:	8d 32       	cpi	r24, 0x2D	; 45
    2486:	f1 f0       	breq	.+60     	; 0x24c4 <main+0x7ec>
    2488:	fe 01       	movw	r30, r28
    248a:	eb 5a       	subi	r30, 0xAB	; 171
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 81       	ld	r24, Z
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	ce 01       	movw	r24, r28
    2496:	88 5a       	subi	r24, 0xA8	; 168
    2498:	9f 4f       	sbci	r25, 0xFF	; 255
    249a:	fc 01       	movw	r30, r24
    249c:	e2 0f       	add	r30, r18
    249e:	f3 1f       	adc	r31, r19
    24a0:	80 81       	ld	r24, Z
    24a2:	8a 32       	cpi	r24, 0x2A	; 42
    24a4:	79 f0       	breq	.+30     	; 0x24c4 <main+0x7ec>
    24a6:	fe 01       	movw	r30, r28
    24a8:	eb 5a       	subi	r30, 0xAB	; 171
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	80 81       	ld	r24, Z
    24ae:	28 2f       	mov	r18, r24
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	ce 01       	movw	r24, r28
    24b4:	88 5a       	subi	r24, 0xA8	; 168
    24b6:	9f 4f       	sbci	r25, 0xFF	; 255
    24b8:	fc 01       	movw	r30, r24
    24ba:	e2 0f       	add	r30, r18
    24bc:	f3 1f       	adc	r31, r19
    24be:	80 81       	ld	r24, Z
    24c0:	8f 32       	cpi	r24, 0x2F	; 47
    24c2:	19 f4       	brne	.+6      	; 0x24ca <main+0x7f2>
		{
			CLCD_Void_LCDClear();
    24c4:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <CLCD_Void_LCDClear>
    24c8:	14 cc       	rjmp	.-2008   	; 0x1cf2 <main+0x1a>
			goto label ;
		}
		else
		{
			CLCD_voidSendData(arr[counter]);
    24ca:	fe 01       	movw	r30, r28
    24cc:	eb 5a       	subi	r30, 0xAB	; 171
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	80 81       	ld	r24, Z
    24d2:	28 2f       	mov	r18, r24
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	ce 01       	movw	r24, r28
    24d8:	88 5a       	subi	r24, 0xA8	; 168
    24da:	9f 4f       	sbci	r25, 0xFF	; 255
    24dc:	fc 01       	movw	r30, r24
    24de:	e2 0f       	add	r30, r18
    24e0:	f3 1f       	adc	r31, r19
    24e2:	80 81       	ld	r24, Z
    24e4:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
		}
		counter++;
    24e8:	de 01       	movw	r26, r28
    24ea:	ab 5a       	subi	r26, 0xAB	; 171
    24ec:	bf 4f       	sbci	r27, 0xFF	; 255
    24ee:	fe 01       	movw	r30, r28
    24f0:	eb 5a       	subi	r30, 0xAB	; 171
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	80 81       	ld	r24, Z
    24f6:	8f 5f       	subi	r24, 0xFF	; 255
    24f8:	8c 93       	st	X, r24
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	a6 e9       	ldi	r26, 0x96	; 150
    2500:	b3 e4       	ldi	r27, 0x43	; 67
    2502:	8f a3       	std	Y+39, r24	; 0x27
    2504:	98 a7       	std	Y+40, r25	; 0x28
    2506:	a9 a7       	std	Y+41, r26	; 0x29
    2508:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250a:	6f a1       	ldd	r22, Y+39	; 0x27
    250c:	78 a5       	ldd	r23, Y+40	; 0x28
    250e:	89 a5       	ldd	r24, Y+41	; 0x29
    2510:	9a a5       	ldd	r25, Y+42	; 0x2a
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	4a ef       	ldi	r20, 0xFA	; 250
    2518:	54 e4       	ldi	r21, 0x44	; 68
    251a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	8b a3       	std	Y+35, r24	; 0x23
    2524:	9c a3       	std	Y+36, r25	; 0x24
    2526:	ad a3       	std	Y+37, r26	; 0x25
    2528:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    252a:	6b a1       	ldd	r22, Y+35	; 0x23
    252c:	7c a1       	ldd	r23, Y+36	; 0x24
    252e:	8d a1       	ldd	r24, Y+37	; 0x25
    2530:	9e a1       	ldd	r25, Y+38	; 0x26
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e8       	ldi	r20, 0x80	; 128
    2538:	5f e3       	ldi	r21, 0x3F	; 63
    253a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    253e:	88 23       	and	r24, r24
    2540:	2c f4       	brge	.+10     	; 0x254c <main+0x874>
		__ticks = 1;
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	9a a3       	std	Y+34, r25	; 0x22
    2548:	89 a3       	std	Y+33, r24	; 0x21
    254a:	3f c0       	rjmp	.+126    	; 0x25ca <main+0x8f2>
	else if (__tmp > 65535)
    254c:	6b a1       	ldd	r22, Y+35	; 0x23
    254e:	7c a1       	ldd	r23, Y+36	; 0x24
    2550:	8d a1       	ldd	r24, Y+37	; 0x25
    2552:	9e a1       	ldd	r25, Y+38	; 0x26
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	3f ef       	ldi	r19, 0xFF	; 255
    2558:	4f e7       	ldi	r20, 0x7F	; 127
    255a:	57 e4       	ldi	r21, 0x47	; 71
    255c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2560:	18 16       	cp	r1, r24
    2562:	4c f5       	brge	.+82     	; 0x25b6 <main+0x8de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2564:	6f a1       	ldd	r22, Y+39	; 0x27
    2566:	78 a5       	ldd	r23, Y+40	; 0x28
    2568:	89 a5       	ldd	r24, Y+41	; 0x29
    256a:	9a a5       	ldd	r25, Y+42	; 0x2a
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	40 e2       	ldi	r20, 0x20	; 32
    2572:	51 e4       	ldi	r21, 0x41	; 65
    2574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	bc 01       	movw	r22, r24
    257e:	cd 01       	movw	r24, r26
    2580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	9a a3       	std	Y+34, r25	; 0x22
    258a:	89 a3       	std	Y+33, r24	; 0x21
    258c:	0f c0       	rjmp	.+30     	; 0x25ac <main+0x8d4>
    258e:	88 ec       	ldi	r24, 0xC8	; 200
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	98 a3       	std	Y+32, r25	; 0x20
    2594:	8f 8f       	std	Y+31, r24	; 0x1f
    2596:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2598:	98 a1       	ldd	r25, Y+32	; 0x20
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <main+0x8c2>
    259e:	98 a3       	std	Y+32, r25	; 0x20
    25a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a2:	89 a1       	ldd	r24, Y+33	; 0x21
    25a4:	9a a1       	ldd	r25, Y+34	; 0x22
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	9a a3       	std	Y+34, r25	; 0x22
    25aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ac:	89 a1       	ldd	r24, Y+33	; 0x21
    25ae:	9a a1       	ldd	r25, Y+34	; 0x22
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	69 f7       	brne	.-38     	; 0x258e <main+0x8b6>
    25b4:	14 c0       	rjmp	.+40     	; 0x25de <main+0x906>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b6:	6b a1       	ldd	r22, Y+35	; 0x23
    25b8:	7c a1       	ldd	r23, Y+36	; 0x24
    25ba:	8d a1       	ldd	r24, Y+37	; 0x25
    25bc:	9e a1       	ldd	r25, Y+38	; 0x26
    25be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	9a a3       	std	Y+34, r25	; 0x22
    25c8:	89 a3       	std	Y+33, r24	; 0x21
    25ca:	89 a1       	ldd	r24, Y+33	; 0x21
    25cc:	9a a1       	ldd	r25, Y+34	; 0x22
    25ce:	9e 8f       	std	Y+30, r25	; 0x1e
    25d0:	8d 8f       	std	Y+29, r24	; 0x1d
    25d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	f1 f7       	brne	.-4      	; 0x25d6 <main+0x8fe>
    25da:	9e 8f       	std	Y+30, r25	; 0x1e
    25dc:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(300);
		do
		{
			arr[counter]=KYP_u8GetPressed();
    25de:	fe 01       	movw	r30, r28
    25e0:	eb 5a       	subi	r30, 0xAB	; 171
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	80 81       	ld	r24, Z
    25e6:	08 2f       	mov	r16, r24
    25e8:	10 e0       	ldi	r17, 0x00	; 0
    25ea:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <KYP_u8GetPressed>
    25ee:	28 2f       	mov	r18, r24
    25f0:	ce 01       	movw	r24, r28
    25f2:	88 5a       	subi	r24, 0xA8	; 168
    25f4:	9f 4f       	sbci	r25, 0xFF	; 255
    25f6:	fc 01       	movw	r30, r24
    25f8:	e0 0f       	add	r30, r16
    25fa:	f1 1f       	adc	r31, r17
    25fc:	20 83       	st	Z, r18

		}while(arr[counter]==KYP_NO_PRESSED);
    25fe:	fe 01       	movw	r30, r28
    2600:	eb 5a       	subi	r30, 0xAB	; 171
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	80 81       	ld	r24, Z
    2606:	28 2f       	mov	r18, r24
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	ce 01       	movw	r24, r28
    260c:	88 5a       	subi	r24, 0xA8	; 168
    260e:	9f 4f       	sbci	r25, 0xFF	; 255
    2610:	fc 01       	movw	r30, r24
    2612:	e2 0f       	add	r30, r18
    2614:	f3 1f       	adc	r31, r19
    2616:	80 81       	ld	r24, Z
    2618:	84 31       	cpi	r24, 0x14	; 20
    261a:	09 f3       	breq	.-62     	; 0x25de <main+0x906>

		if(arr[counter]=='A'||arr[counter]=='='||arr[counter]=='+'||arr[counter]=='-'||arr[counter]=='*'||arr[counter]=='/')
    261c:	fe 01       	movw	r30, r28
    261e:	eb 5a       	subi	r30, 0xAB	; 171
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	80 81       	ld	r24, Z
    2624:	28 2f       	mov	r18, r24
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	ce 01       	movw	r24, r28
    262a:	88 5a       	subi	r24, 0xA8	; 168
    262c:	9f 4f       	sbci	r25, 0xFF	; 255
    262e:	fc 01       	movw	r30, r24
    2630:	e2 0f       	add	r30, r18
    2632:	f3 1f       	adc	r31, r19
    2634:	80 81       	ld	r24, Z
    2636:	81 34       	cpi	r24, 0x41	; 65
    2638:	09 f4       	brne	.+2      	; 0x263c <main+0x964>
    263a:	4b c0       	rjmp	.+150    	; 0x26d2 <main+0x9fa>
    263c:	fe 01       	movw	r30, r28
    263e:	eb 5a       	subi	r30, 0xAB	; 171
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	80 81       	ld	r24, Z
    2644:	28 2f       	mov	r18, r24
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	ce 01       	movw	r24, r28
    264a:	88 5a       	subi	r24, 0xA8	; 168
    264c:	9f 4f       	sbci	r25, 0xFF	; 255
    264e:	fc 01       	movw	r30, r24
    2650:	e2 0f       	add	r30, r18
    2652:	f3 1f       	adc	r31, r19
    2654:	80 81       	ld	r24, Z
    2656:	8d 33       	cpi	r24, 0x3D	; 61
    2658:	e1 f1       	breq	.+120    	; 0x26d2 <main+0x9fa>
    265a:	fe 01       	movw	r30, r28
    265c:	eb 5a       	subi	r30, 0xAB	; 171
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	80 81       	ld	r24, Z
    2662:	28 2f       	mov	r18, r24
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	ce 01       	movw	r24, r28
    2668:	88 5a       	subi	r24, 0xA8	; 168
    266a:	9f 4f       	sbci	r25, 0xFF	; 255
    266c:	fc 01       	movw	r30, r24
    266e:	e2 0f       	add	r30, r18
    2670:	f3 1f       	adc	r31, r19
    2672:	80 81       	ld	r24, Z
    2674:	8b 32       	cpi	r24, 0x2B	; 43
    2676:	69 f1       	breq	.+90     	; 0x26d2 <main+0x9fa>
    2678:	fe 01       	movw	r30, r28
    267a:	eb 5a       	subi	r30, 0xAB	; 171
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	80 81       	ld	r24, Z
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	ce 01       	movw	r24, r28
    2686:	88 5a       	subi	r24, 0xA8	; 168
    2688:	9f 4f       	sbci	r25, 0xFF	; 255
    268a:	fc 01       	movw	r30, r24
    268c:	e2 0f       	add	r30, r18
    268e:	f3 1f       	adc	r31, r19
    2690:	80 81       	ld	r24, Z
    2692:	8d 32       	cpi	r24, 0x2D	; 45
    2694:	f1 f0       	breq	.+60     	; 0x26d2 <main+0x9fa>
    2696:	fe 01       	movw	r30, r28
    2698:	eb 5a       	subi	r30, 0xAB	; 171
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	80 81       	ld	r24, Z
    269e:	28 2f       	mov	r18, r24
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	ce 01       	movw	r24, r28
    26a4:	88 5a       	subi	r24, 0xA8	; 168
    26a6:	9f 4f       	sbci	r25, 0xFF	; 255
    26a8:	fc 01       	movw	r30, r24
    26aa:	e2 0f       	add	r30, r18
    26ac:	f3 1f       	adc	r31, r19
    26ae:	80 81       	ld	r24, Z
    26b0:	8a 32       	cpi	r24, 0x2A	; 42
    26b2:	79 f0       	breq	.+30     	; 0x26d2 <main+0x9fa>
    26b4:	fe 01       	movw	r30, r28
    26b6:	eb 5a       	subi	r30, 0xAB	; 171
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 81       	ld	r24, Z
    26bc:	28 2f       	mov	r18, r24
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	ce 01       	movw	r24, r28
    26c2:	88 5a       	subi	r24, 0xA8	; 168
    26c4:	9f 4f       	sbci	r25, 0xFF	; 255
    26c6:	fc 01       	movw	r30, r24
    26c8:	e2 0f       	add	r30, r18
    26ca:	f3 1f       	adc	r31, r19
    26cc:	80 81       	ld	r24, Z
    26ce:	8f 32       	cpi	r24, 0x2F	; 47
    26d0:	19 f4       	brne	.+6      	; 0x26d8 <main+0xa00>
		{
			CLCD_Void_LCDClear();
    26d2:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <CLCD_Void_LCDClear>
    26d6:	0d cb       	rjmp	.-2534   	; 0x1cf2 <main+0x1a>
			goto label ;
		}
		else
		{
			CLCD_voidSendData(arr[counter]);
    26d8:	fe 01       	movw	r30, r28
    26da:	eb 5a       	subi	r30, 0xAB	; 171
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	80 81       	ld	r24, Z
    26e0:	28 2f       	mov	r18, r24
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	ce 01       	movw	r24, r28
    26e6:	88 5a       	subi	r24, 0xA8	; 168
    26e8:	9f 4f       	sbci	r25, 0xFF	; 255
    26ea:	fc 01       	movw	r30, r24
    26ec:	e2 0f       	add	r30, r18
    26ee:	f3 1f       	adc	r31, r19
    26f0:	80 81       	ld	r24, Z
    26f2:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
		}
		counter++;
    26f6:	de 01       	movw	r26, r28
    26f8:	ab 5a       	subi	r26, 0xAB	; 171
    26fa:	bf 4f       	sbci	r27, 0xFF	; 255
    26fc:	fe 01       	movw	r30, r28
    26fe:	eb 5a       	subi	r30, 0xAB	; 171
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	80 81       	ld	r24, Z
    2704:	8f 5f       	subi	r24, 0xFF	; 255
    2706:	8c 93       	st	X, r24
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	a6 e9       	ldi	r26, 0x96	; 150
    270e:	b3 e4       	ldi	r27, 0x43	; 67
    2710:	89 8f       	std	Y+25, r24	; 0x19
    2712:	9a 8f       	std	Y+26, r25	; 0x1a
    2714:	ab 8f       	std	Y+27, r26	; 0x1b
    2716:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2718:	69 8d       	ldd	r22, Y+25	; 0x19
    271a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    271c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    271e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	4a ef       	ldi	r20, 0xFA	; 250
    2726:	54 e4       	ldi	r21, 0x44	; 68
    2728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	8d 8b       	std	Y+21, r24	; 0x15
    2732:	9e 8b       	std	Y+22, r25	; 0x16
    2734:	af 8b       	std	Y+23, r26	; 0x17
    2736:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2738:	6d 89       	ldd	r22, Y+21	; 0x15
    273a:	7e 89       	ldd	r23, Y+22	; 0x16
    273c:	8f 89       	ldd	r24, Y+23	; 0x17
    273e:	98 8d       	ldd	r25, Y+24	; 0x18
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	40 e8       	ldi	r20, 0x80	; 128
    2746:	5f e3       	ldi	r21, 0x3F	; 63
    2748:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    274c:	88 23       	and	r24, r24
    274e:	2c f4       	brge	.+10     	; 0x275a <main+0xa82>
		__ticks = 1;
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	9c 8b       	std	Y+20, r25	; 0x14
    2756:	8b 8b       	std	Y+19, r24	; 0x13
    2758:	3f c0       	rjmp	.+126    	; 0x27d8 <main+0xb00>
	else if (__tmp > 65535)
    275a:	6d 89       	ldd	r22, Y+21	; 0x15
    275c:	7e 89       	ldd	r23, Y+22	; 0x16
    275e:	8f 89       	ldd	r24, Y+23	; 0x17
    2760:	98 8d       	ldd	r25, Y+24	; 0x18
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	3f ef       	ldi	r19, 0xFF	; 255
    2766:	4f e7       	ldi	r20, 0x7F	; 127
    2768:	57 e4       	ldi	r21, 0x47	; 71
    276a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    276e:	18 16       	cp	r1, r24
    2770:	4c f5       	brge	.+82     	; 0x27c4 <main+0xaec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2772:	69 8d       	ldd	r22, Y+25	; 0x19
    2774:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2776:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2778:	9c 8d       	ldd	r25, Y+28	; 0x1c
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e2       	ldi	r20, 0x20	; 32
    2780:	51 e4       	ldi	r21, 0x41	; 65
    2782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	bc 01       	movw	r22, r24
    278c:	cd 01       	movw	r24, r26
    278e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	9c 8b       	std	Y+20, r25	; 0x14
    2798:	8b 8b       	std	Y+19, r24	; 0x13
    279a:	0f c0       	rjmp	.+30     	; 0x27ba <main+0xae2>
    279c:	88 ec       	ldi	r24, 0xC8	; 200
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	9a 8b       	std	Y+18, r25	; 0x12
    27a2:	89 8b       	std	Y+17, r24	; 0x11
    27a4:	89 89       	ldd	r24, Y+17	; 0x11
    27a6:	9a 89       	ldd	r25, Y+18	; 0x12
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <main+0xad0>
    27ac:	9a 8b       	std	Y+18, r25	; 0x12
    27ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b0:	8b 89       	ldd	r24, Y+19	; 0x13
    27b2:	9c 89       	ldd	r25, Y+20	; 0x14
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	9c 8b       	std	Y+20, r25	; 0x14
    27b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ba:	8b 89       	ldd	r24, Y+19	; 0x13
    27bc:	9c 89       	ldd	r25, Y+20	; 0x14
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	69 f7       	brne	.-38     	; 0x279c <main+0xac4>
    27c2:	14 c0       	rjmp	.+40     	; 0x27ec <main+0xb14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c4:	6d 89       	ldd	r22, Y+21	; 0x15
    27c6:	7e 89       	ldd	r23, Y+22	; 0x16
    27c8:	8f 89       	ldd	r24, Y+23	; 0x17
    27ca:	98 8d       	ldd	r25, Y+24	; 0x18
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9c 8b       	std	Y+20, r25	; 0x14
    27d6:	8b 8b       	std	Y+19, r24	; 0x13
    27d8:	8b 89       	ldd	r24, Y+19	; 0x13
    27da:	9c 89       	ldd	r25, Y+20	; 0x14
    27dc:	98 8b       	std	Y+16, r25	; 0x10
    27de:	8f 87       	std	Y+15, r24	; 0x0f
    27e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27e2:	98 89       	ldd	r25, Y+16	; 0x10
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	f1 f7       	brne	.-4      	; 0x27e4 <main+0xb0c>
    27e8:	98 8b       	std	Y+16, r25	; 0x10
    27ea:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);


		do
		{
			arr[counter]=KYP_u8GetPressed();
    27ec:	fe 01       	movw	r30, r28
    27ee:	eb 5a       	subi	r30, 0xAB	; 171
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	80 81       	ld	r24, Z
    27f4:	08 2f       	mov	r16, r24
    27f6:	10 e0       	ldi	r17, 0x00	; 0
    27f8:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <KYP_u8GetPressed>
    27fc:	28 2f       	mov	r18, r24
    27fe:	ce 01       	movw	r24, r28
    2800:	88 5a       	subi	r24, 0xA8	; 168
    2802:	9f 4f       	sbci	r25, 0xFF	; 255
    2804:	fc 01       	movw	r30, r24
    2806:	e0 0f       	add	r30, r16
    2808:	f1 1f       	adc	r31, r17
    280a:	20 83       	st	Z, r18

		}while(arr[counter]==KYP_NO_PRESSED);
    280c:	fe 01       	movw	r30, r28
    280e:	eb 5a       	subi	r30, 0xAB	; 171
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	80 81       	ld	r24, Z
    2814:	28 2f       	mov	r18, r24
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	ce 01       	movw	r24, r28
    281a:	88 5a       	subi	r24, 0xA8	; 168
    281c:	9f 4f       	sbci	r25, 0xFF	; 255
    281e:	fc 01       	movw	r30, r24
    2820:	e2 0f       	add	r30, r18
    2822:	f3 1f       	adc	r31, r19
    2824:	80 81       	ld	r24, Z
    2826:	84 31       	cpi	r24, 0x14	; 20
    2828:	09 f3       	breq	.-62     	; 0x27ec <main+0xb14>

		if(arr[counter]=='=')
    282a:	fe 01       	movw	r30, r28
    282c:	eb 5a       	subi	r30, 0xAB	; 171
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	80 81       	ld	r24, Z
    2832:	28 2f       	mov	r18, r24
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	ce 01       	movw	r24, r28
    2838:	88 5a       	subi	r24, 0xA8	; 168
    283a:	9f 4f       	sbci	r25, 0xFF	; 255
    283c:	fc 01       	movw	r30, r24
    283e:	e2 0f       	add	r30, r18
    2840:	f3 1f       	adc	r31, r19
    2842:	80 81       	ld	r24, Z
    2844:	8d 33       	cpi	r24, 0x3D	; 61
    2846:	09 f0       	breq	.+2      	; 0x284a <main+0xb72>
    2848:	dc c4       	rjmp	.+2488   	; 0x3202 <main+0x152a>
		{
			CLCD_voidSendData(arr[counter]);
    284a:	fe 01       	movw	r30, r28
    284c:	eb 5a       	subi	r30, 0xAB	; 171
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	80 81       	ld	r24, Z
    2852:	28 2f       	mov	r18, r24
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	ce 01       	movw	r24, r28
    2858:	88 5a       	subi	r24, 0xA8	; 168
    285a:	9f 4f       	sbci	r25, 0xFF	; 255
    285c:	fc 01       	movw	r30, r24
    285e:	e2 0f       	add	r30, r18
    2860:	f3 1f       	adc	r31, r19
    2862:	80 81       	ld	r24, Z
    2864:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>


			switch(arr[counter-3])
    2868:	fe 01       	movw	r30, r28
    286a:	eb 5a       	subi	r30, 0xAB	; 171
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 81       	ld	r24, Z
    2870:	88 2f       	mov	r24, r24
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	9c 01       	movw	r18, r24
    2876:	23 50       	subi	r18, 0x03	; 3
    2878:	30 40       	sbci	r19, 0x00	; 0
    287a:	ce 01       	movw	r24, r28
    287c:	88 5a       	subi	r24, 0xA8	; 168
    287e:	9f 4f       	sbci	r25, 0xFF	; 255
    2880:	fc 01       	movw	r30, r24
    2882:	e2 0f       	add	r30, r18
    2884:	f3 1f       	adc	r31, r19
    2886:	80 81       	ld	r24, Z
    2888:	28 2f       	mov	r18, r24
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	a0 96       	adiw	r28, 0x20	; 32
    288e:	3f af       	std	Y+63, r19	; 0x3f
    2890:	2e af       	std	Y+62, r18	; 0x3e
    2892:	a0 97       	sbiw	r28, 0x20	; 32
    2894:	a0 96       	adiw	r28, 0x20	; 32
    2896:	8e ad       	ldd	r24, Y+62	; 0x3e
    2898:	9f ad       	ldd	r25, Y+63	; 0x3f
    289a:	a0 97       	sbiw	r28, 0x20	; 32
    289c:	8b 32       	cpi	r24, 0x2B	; 43
    289e:	91 05       	cpc	r25, r1
    28a0:	09 f1       	breq	.+66     	; 0x28e4 <main+0xc0c>
    28a2:	a0 96       	adiw	r28, 0x20	; 32
    28a4:	ee ad       	ldd	r30, Y+62	; 0x3e
    28a6:	ff ad       	ldd	r31, Y+63	; 0x3f
    28a8:	a0 97       	sbiw	r28, 0x20	; 32
    28aa:	ec 32       	cpi	r30, 0x2C	; 44
    28ac:	f1 05       	cpc	r31, r1
    28ae:	4c f4       	brge	.+18     	; 0x28c2 <main+0xbea>
    28b0:	a0 96       	adiw	r28, 0x20	; 32
    28b2:	2e ad       	ldd	r18, Y+62	; 0x3e
    28b4:	3f ad       	ldd	r19, Y+63	; 0x3f
    28b6:	a0 97       	sbiw	r28, 0x20	; 32
    28b8:	2a 32       	cpi	r18, 0x2A	; 42
    28ba:	31 05       	cpc	r19, r1
    28bc:	09 f4       	brne	.+2      	; 0x28c0 <main+0xbe8>
    28be:	f2 c1       	rjmp	.+996    	; 0x2ca4 <main+0xfcc>
    28c0:	2b c4       	rjmp	.+2134   	; 0x3118 <main+0x1440>
    28c2:	a0 96       	adiw	r28, 0x20	; 32
    28c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    28c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    28c8:	a0 97       	sbiw	r28, 0x20	; 32
    28ca:	8d 32       	cpi	r24, 0x2D	; 45
    28cc:	91 05       	cpc	r25, r1
    28ce:	09 f4       	brne	.+2      	; 0x28d2 <main+0xbfa>
    28d0:	f5 c0       	rjmp	.+490    	; 0x2abc <main+0xde4>
    28d2:	a0 96       	adiw	r28, 0x20	; 32
    28d4:	ee ad       	ldd	r30, Y+62	; 0x3e
    28d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    28d8:	a0 97       	sbiw	r28, 0x20	; 32
    28da:	ef 32       	cpi	r30, 0x2F	; 47
    28dc:	f1 05       	cpc	r31, r1
    28de:	09 f4       	brne	.+2      	; 0x28e2 <main+0xc0a>
    28e0:	2b c3       	rjmp	.+1622   	; 0x2f38 <main+0x1260>
    28e2:	1a c4       	rjmp	.+2100   	; 0x3118 <main+0x1440>
			{
			case '+':
				res=(arr[counter-4]-48)+((arr[counter-5]-48)*10)+((arr[counter-2]-48)*10)+(arr[counter-1]-48);
    28e4:	fe 01       	movw	r30, r28
    28e6:	eb 5a       	subi	r30, 0xAB	; 171
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	80 81       	ld	r24, Z
    28ec:	88 2f       	mov	r24, r24
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	9c 01       	movw	r18, r24
    28f2:	24 50       	subi	r18, 0x04	; 4
    28f4:	30 40       	sbci	r19, 0x00	; 0
    28f6:	ce 01       	movw	r24, r28
    28f8:	88 5a       	subi	r24, 0xA8	; 168
    28fa:	9f 4f       	sbci	r25, 0xFF	; 255
    28fc:	fc 01       	movw	r30, r24
    28fe:	e2 0f       	add	r30, r18
    2900:	f3 1f       	adc	r31, r19
    2902:	80 81       	ld	r24, Z
    2904:	88 2f       	mov	r24, r24
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	ac 01       	movw	r20, r24
    290a:	40 53       	subi	r20, 0x30	; 48
    290c:	50 40       	sbci	r21, 0x00	; 0
    290e:	fe 01       	movw	r30, r28
    2910:	eb 5a       	subi	r30, 0xAB	; 171
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	80 81       	ld	r24, Z
    2916:	88 2f       	mov	r24, r24
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	9c 01       	movw	r18, r24
    291c:	25 50       	subi	r18, 0x05	; 5
    291e:	30 40       	sbci	r19, 0x00	; 0
    2920:	ce 01       	movw	r24, r28
    2922:	88 5a       	subi	r24, 0xA8	; 168
    2924:	9f 4f       	sbci	r25, 0xFF	; 255
    2926:	fc 01       	movw	r30, r24
    2928:	e2 0f       	add	r30, r18
    292a:	f3 1f       	adc	r31, r19
    292c:	80 81       	ld	r24, Z
    292e:	88 2f       	mov	r24, r24
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	9c 01       	movw	r18, r24
    2934:	22 0f       	add	r18, r18
    2936:	33 1f       	adc	r19, r19
    2938:	c9 01       	movw	r24, r18
    293a:	88 0f       	add	r24, r24
    293c:	99 1f       	adc	r25, r25
    293e:	88 0f       	add	r24, r24
    2940:	99 1f       	adc	r25, r25
    2942:	82 0f       	add	r24, r18
    2944:	93 1f       	adc	r25, r19
    2946:	80 5e       	subi	r24, 0xE0	; 224
    2948:	91 40       	sbci	r25, 0x01	; 1
    294a:	48 0f       	add	r20, r24
    294c:	59 1f       	adc	r21, r25
    294e:	fe 01       	movw	r30, r28
    2950:	eb 5a       	subi	r30, 0xAB	; 171
    2952:	ff 4f       	sbci	r31, 0xFF	; 255
    2954:	80 81       	ld	r24, Z
    2956:	88 2f       	mov	r24, r24
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	9c 01       	movw	r18, r24
    295c:	22 50       	subi	r18, 0x02	; 2
    295e:	30 40       	sbci	r19, 0x00	; 0
    2960:	ce 01       	movw	r24, r28
    2962:	88 5a       	subi	r24, 0xA8	; 168
    2964:	9f 4f       	sbci	r25, 0xFF	; 255
    2966:	fc 01       	movw	r30, r24
    2968:	e2 0f       	add	r30, r18
    296a:	f3 1f       	adc	r31, r19
    296c:	80 81       	ld	r24, Z
    296e:	88 2f       	mov	r24, r24
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	9c 01       	movw	r18, r24
    2974:	22 0f       	add	r18, r18
    2976:	33 1f       	adc	r19, r19
    2978:	c9 01       	movw	r24, r18
    297a:	88 0f       	add	r24, r24
    297c:	99 1f       	adc	r25, r25
    297e:	88 0f       	add	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	82 0f       	add	r24, r18
    2984:	93 1f       	adc	r25, r19
    2986:	80 5e       	subi	r24, 0xE0	; 224
    2988:	91 40       	sbci	r25, 0x01	; 1
    298a:	48 0f       	add	r20, r24
    298c:	59 1f       	adc	r21, r25
    298e:	fe 01       	movw	r30, r28
    2990:	eb 5a       	subi	r30, 0xAB	; 171
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	80 81       	ld	r24, Z
    2996:	88 2f       	mov	r24, r24
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	9c 01       	movw	r18, r24
    299c:	21 50       	subi	r18, 0x01	; 1
    299e:	30 40       	sbci	r19, 0x00	; 0
    29a0:	ce 01       	movw	r24, r28
    29a2:	88 5a       	subi	r24, 0xA8	; 168
    29a4:	9f 4f       	sbci	r25, 0xFF	; 255
    29a6:	fc 01       	movw	r30, r24
    29a8:	e2 0f       	add	r30, r18
    29aa:	f3 1f       	adc	r31, r19
    29ac:	80 81       	ld	r24, Z
    29ae:	88 2f       	mov	r24, r24
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	c0 97       	sbiw	r24, 0x30	; 48
    29b4:	84 0f       	add	r24, r20
    29b6:	95 1f       	adc	r25, r21
    29b8:	fe 01       	movw	r30, r28
    29ba:	ea 5a       	subi	r30, 0xAA	; 170
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	91 83       	std	Z+1, r25	; 0x01
    29c0:	80 83       	st	Z, r24
				if(res>=100&&res<1000)
    29c2:	fe 01       	movw	r30, r28
    29c4:	ea 5a       	subi	r30, 0xAA	; 170
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	80 81       	ld	r24, Z
    29ca:	91 81       	ldd	r25, Z+1	; 0x01
    29cc:	84 36       	cpi	r24, 0x64	; 100
    29ce:	91 05       	cpc	r25, r1
    29d0:	c0 f1       	brcs	.+112    	; 0x2a42 <main+0xd6a>
    29d2:	fe 01       	movw	r30, r28
    29d4:	ea 5a       	subi	r30, 0xAA	; 170
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	80 81       	ld	r24, Z
    29da:	91 81       	ldd	r25, Z+1	; 0x01
    29dc:	f3 e0       	ldi	r31, 0x03	; 3
    29de:	88 3e       	cpi	r24, 0xE8	; 232
    29e0:	9f 07       	cpc	r25, r31
    29e2:	78 f5       	brcc	.+94     	; 0x2a42 <main+0xd6a>
				{
					CLCD_voidSendData((res/100)+48);
    29e4:	fe 01       	movw	r30, r28
    29e6:	ea 5a       	subi	r30, 0xAA	; 170
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	80 81       	ld	r24, Z
    29ec:	91 81       	ldd	r25, Z+1	; 0x01
    29ee:	24 e6       	ldi	r18, 0x64	; 100
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	b9 01       	movw	r22, r18
    29f4:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    29f8:	cb 01       	movw	r24, r22
    29fa:	80 5d       	subi	r24, 0xD0	; 208
    29fc:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
					CLCD_voidSendData(((res/10)%10)+48);
    2a00:	fe 01       	movw	r30, r28
    2a02:	ea 5a       	subi	r30, 0xAA	; 170
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	80 81       	ld	r24, Z
    2a08:	91 81       	ldd	r25, Z+1	; 0x01
    2a0a:	2a e0       	ldi	r18, 0x0A	; 10
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	b9 01       	movw	r22, r18
    2a10:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2a14:	cb 01       	movw	r24, r22
    2a16:	2a e0       	ldi	r18, 0x0A	; 10
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	b9 01       	movw	r22, r18
    2a1c:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2a20:	80 5d       	subi	r24, 0xD0	; 208
    2a22:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
					CLCD_voidSendData((res%10)+48);
    2a26:	fe 01       	movw	r30, r28
    2a28:	ea 5a       	subi	r30, 0xAA	; 170
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 81       	ld	r24, Z
    2a2e:	91 81       	ldd	r25, Z+1	; 0x01
    2a30:	2a e0       	ldi	r18, 0x0A	; 10
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	b9 01       	movw	r22, r18
    2a36:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2a3a:	80 5d       	subi	r24, 0xD0	; 208
    2a3c:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
    2a40:	6b c3       	rjmp	.+1750   	; 0x3118 <main+0x1440>
				}
				else if (res>=10&&res<100)
    2a42:	fe 01       	movw	r30, r28
    2a44:	ea 5a       	subi	r30, 0xAA	; 170
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	80 81       	ld	r24, Z
    2a4a:	91 81       	ldd	r25, Z+1	; 0x01
    2a4c:	8a 30       	cpi	r24, 0x0A	; 10
    2a4e:	91 05       	cpc	r25, r1
    2a50:	20 f1       	brcs	.+72     	; 0x2a9a <main+0xdc2>
    2a52:	fe 01       	movw	r30, r28
    2a54:	ea 5a       	subi	r30, 0xAA	; 170
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	80 81       	ld	r24, Z
    2a5a:	91 81       	ldd	r25, Z+1	; 0x01
    2a5c:	84 36       	cpi	r24, 0x64	; 100
    2a5e:	91 05       	cpc	r25, r1
    2a60:	e0 f4       	brcc	.+56     	; 0x2a9a <main+0xdc2>
				{
					CLCD_voidSendData((res/10)+48);
    2a62:	fe 01       	movw	r30, r28
    2a64:	ea 5a       	subi	r30, 0xAA	; 170
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	80 81       	ld	r24, Z
    2a6a:	91 81       	ldd	r25, Z+1	; 0x01
    2a6c:	2a e0       	ldi	r18, 0x0A	; 10
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	b9 01       	movw	r22, r18
    2a72:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2a76:	cb 01       	movw	r24, r22
    2a78:	80 5d       	subi	r24, 0xD0	; 208
    2a7a:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
					CLCD_voidSendData((res%10)+48);
    2a7e:	fe 01       	movw	r30, r28
    2a80:	ea 5a       	subi	r30, 0xAA	; 170
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	80 81       	ld	r24, Z
    2a86:	91 81       	ldd	r25, Z+1	; 0x01
    2a88:	2a e0       	ldi	r18, 0x0A	; 10
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	b9 01       	movw	r22, r18
    2a8e:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2a92:	80 5d       	subi	r24, 0xD0	; 208
    2a94:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
    2a98:	3f c3       	rjmp	.+1662   	; 0x3118 <main+0x1440>


				}
				else if(res<10)
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	ea 5a       	subi	r30, 0xAA	; 170
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	80 81       	ld	r24, Z
    2aa2:	91 81       	ldd	r25, Z+1	; 0x01
    2aa4:	8a 30       	cpi	r24, 0x0A	; 10
    2aa6:	91 05       	cpc	r25, r1
    2aa8:	08 f0       	brcs	.+2      	; 0x2aac <main+0xdd4>
    2aaa:	36 c3       	rjmp	.+1644   	; 0x3118 <main+0x1440>
				{
					CLCD_voidSendData(res+48);
    2aac:	fe 01       	movw	r30, r28
    2aae:	ea 5a       	subi	r30, 0xAA	; 170
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	80 81       	ld	r24, Z
    2ab4:	80 5d       	subi	r24, 0xD0	; 208
    2ab6:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
    2aba:	2e c3       	rjmp	.+1628   	; 0x3118 <main+0x1440>

				}
				break;
			case '-' :
				res=((arr[counter-4]-48)+((arr[counter-5]-48)*10))-(((arr[counter-2]-48)*10)+(arr[counter-1]-48));
    2abc:	fe 01       	movw	r30, r28
    2abe:	eb 5a       	subi	r30, 0xAB	; 171
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	80 81       	ld	r24, Z
    2ac4:	88 2f       	mov	r24, r24
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	9c 01       	movw	r18, r24
    2aca:	24 50       	subi	r18, 0x04	; 4
    2acc:	30 40       	sbci	r19, 0x00	; 0
    2ace:	ce 01       	movw	r24, r28
    2ad0:	88 5a       	subi	r24, 0xA8	; 168
    2ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	e2 0f       	add	r30, r18
    2ad8:	f3 1f       	adc	r31, r19
    2ada:	80 81       	ld	r24, Z
    2adc:	88 2f       	mov	r24, r24
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	ac 01       	movw	r20, r24
    2ae2:	40 53       	subi	r20, 0x30	; 48
    2ae4:	50 40       	sbci	r21, 0x00	; 0
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	eb 5a       	subi	r30, 0xAB	; 171
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	80 81       	ld	r24, Z
    2aee:	88 2f       	mov	r24, r24
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	9c 01       	movw	r18, r24
    2af4:	25 50       	subi	r18, 0x05	; 5
    2af6:	30 40       	sbci	r19, 0x00	; 0
    2af8:	ce 01       	movw	r24, r28
    2afa:	88 5a       	subi	r24, 0xA8	; 168
    2afc:	9f 4f       	sbci	r25, 0xFF	; 255
    2afe:	fc 01       	movw	r30, r24
    2b00:	e2 0f       	add	r30, r18
    2b02:	f3 1f       	adc	r31, r19
    2b04:	80 81       	ld	r24, Z
    2b06:	88 2f       	mov	r24, r24
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	9c 01       	movw	r18, r24
    2b0c:	22 0f       	add	r18, r18
    2b0e:	33 1f       	adc	r19, r19
    2b10:	c9 01       	movw	r24, r18
    2b12:	88 0f       	add	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	88 0f       	add	r24, r24
    2b18:	99 1f       	adc	r25, r25
    2b1a:	82 0f       	add	r24, r18
    2b1c:	93 1f       	adc	r25, r19
    2b1e:	80 5e       	subi	r24, 0xE0	; 224
    2b20:	91 40       	sbci	r25, 0x01	; 1
    2b22:	ba 01       	movw	r22, r20
    2b24:	68 0f       	add	r22, r24
    2b26:	79 1f       	adc	r23, r25
    2b28:	fe 01       	movw	r30, r28
    2b2a:	eb 5a       	subi	r30, 0xAB	; 171
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	80 81       	ld	r24, Z
    2b30:	88 2f       	mov	r24, r24
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	9c 01       	movw	r18, r24
    2b36:	21 50       	subi	r18, 0x01	; 1
    2b38:	30 40       	sbci	r19, 0x00	; 0
    2b3a:	ce 01       	movw	r24, r28
    2b3c:	88 5a       	subi	r24, 0xA8	; 168
    2b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b40:	fc 01       	movw	r30, r24
    2b42:	e2 0f       	add	r30, r18
    2b44:	f3 1f       	adc	r31, r19
    2b46:	80 81       	ld	r24, Z
    2b48:	28 2f       	mov	r18, r24
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	80 e3       	ldi	r24, 0x30	; 48
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	ac 01       	movw	r20, r24
    2b52:	42 1b       	sub	r20, r18
    2b54:	53 0b       	sbc	r21, r19
    2b56:	fe 01       	movw	r30, r28
    2b58:	eb 5a       	subi	r30, 0xAB	; 171
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	80 81       	ld	r24, Z
    2b5e:	88 2f       	mov	r24, r24
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	9c 01       	movw	r18, r24
    2b64:	22 50       	subi	r18, 0x02	; 2
    2b66:	30 40       	sbci	r19, 0x00	; 0
    2b68:	ce 01       	movw	r24, r28
    2b6a:	88 5a       	subi	r24, 0xA8	; 168
    2b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b6e:	fc 01       	movw	r30, r24
    2b70:	e2 0f       	add	r30, r18
    2b72:	f3 1f       	adc	r31, r19
    2b74:	80 81       	ld	r24, Z
    2b76:	88 2f       	mov	r24, r24
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	9c 01       	movw	r18, r24
    2b7c:	22 0f       	add	r18, r18
    2b7e:	33 1f       	adc	r19, r19
    2b80:	c9 01       	movw	r24, r18
    2b82:	88 0f       	add	r24, r24
    2b84:	99 1f       	adc	r25, r25
    2b86:	88 0f       	add	r24, r24
    2b88:	99 1f       	adc	r25, r25
    2b8a:	82 0f       	add	r24, r18
    2b8c:	93 1f       	adc	r25, r19
    2b8e:	90 95       	com	r25
    2b90:	81 95       	neg	r24
    2b92:	9f 4f       	sbci	r25, 0xFF	; 255
    2b94:	80 52       	subi	r24, 0x20	; 32
    2b96:	9e 4f       	sbci	r25, 0xFE	; 254
    2b98:	84 0f       	add	r24, r20
    2b9a:	95 1f       	adc	r25, r21
    2b9c:	86 0f       	add	r24, r22
    2b9e:	97 1f       	adc	r25, r23
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	ea 5a       	subi	r30, 0xAA	; 170
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	91 83       	std	Z+1, r25	; 0x01
    2ba8:	80 83       	st	Z, r24
				if(res>=100&&res<1000)
    2baa:	fe 01       	movw	r30, r28
    2bac:	ea 5a       	subi	r30, 0xAA	; 170
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	80 81       	ld	r24, Z
    2bb2:	91 81       	ldd	r25, Z+1	; 0x01
    2bb4:	84 36       	cpi	r24, 0x64	; 100
    2bb6:	91 05       	cpc	r25, r1
    2bb8:	c0 f1       	brcs	.+112    	; 0x2c2a <main+0xf52>
    2bba:	fe 01       	movw	r30, r28
    2bbc:	ea 5a       	subi	r30, 0xAA	; 170
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	80 81       	ld	r24, Z
    2bc2:	91 81       	ldd	r25, Z+1	; 0x01
    2bc4:	23 e0       	ldi	r18, 0x03	; 3
    2bc6:	88 3e       	cpi	r24, 0xE8	; 232
    2bc8:	92 07       	cpc	r25, r18
    2bca:	78 f5       	brcc	.+94     	; 0x2c2a <main+0xf52>
				{

					CLCD_voidSendData((res/100)+48);
    2bcc:	fe 01       	movw	r30, r28
    2bce:	ea 5a       	subi	r30, 0xAA	; 170
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	80 81       	ld	r24, Z
    2bd4:	91 81       	ldd	r25, Z+1	; 0x01
    2bd6:	24 e6       	ldi	r18, 0x64	; 100
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	b9 01       	movw	r22, r18
    2bdc:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2be0:	cb 01       	movw	r24, r22
    2be2:	80 5d       	subi	r24, 0xD0	; 208
    2be4:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
					CLCD_voidSendData(((res/10)%10)+48);
    2be8:	fe 01       	movw	r30, r28
    2bea:	ea 5a       	subi	r30, 0xAA	; 170
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	80 81       	ld	r24, Z
    2bf0:	91 81       	ldd	r25, Z+1	; 0x01
    2bf2:	2a e0       	ldi	r18, 0x0A	; 10
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	b9 01       	movw	r22, r18
    2bf8:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	2a e0       	ldi	r18, 0x0A	; 10
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	b9 01       	movw	r22, r18
    2c04:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2c08:	80 5d       	subi	r24, 0xD0	; 208
    2c0a:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
					CLCD_voidSendData((res%10)+48);
    2c0e:	fe 01       	movw	r30, r28
    2c10:	ea 5a       	subi	r30, 0xAA	; 170
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	80 81       	ld	r24, Z
    2c16:	91 81       	ldd	r25, Z+1	; 0x01
    2c18:	2a e0       	ldi	r18, 0x0A	; 10
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	b9 01       	movw	r22, r18
    2c1e:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2c22:	80 5d       	subi	r24, 0xD0	; 208
    2c24:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
    2c28:	77 c2       	rjmp	.+1262   	; 0x3118 <main+0x1440>

				}
				else if (res>=10&&res<100)
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	ea 5a       	subi	r30, 0xAA	; 170
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	80 81       	ld	r24, Z
    2c32:	91 81       	ldd	r25, Z+1	; 0x01
    2c34:	8a 30       	cpi	r24, 0x0A	; 10
    2c36:	91 05       	cpc	r25, r1
    2c38:	20 f1       	brcs	.+72     	; 0x2c82 <main+0xfaa>
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	ea 5a       	subi	r30, 0xAA	; 170
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	80 81       	ld	r24, Z
    2c42:	91 81       	ldd	r25, Z+1	; 0x01
    2c44:	84 36       	cpi	r24, 0x64	; 100
    2c46:	91 05       	cpc	r25, r1
    2c48:	e0 f4       	brcc	.+56     	; 0x2c82 <main+0xfaa>
				{
					CLCD_voidSendData((res/10)+48);
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	ea 5a       	subi	r30, 0xAA	; 170
    2c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c50:	80 81       	ld	r24, Z
    2c52:	91 81       	ldd	r25, Z+1	; 0x01
    2c54:	2a e0       	ldi	r18, 0x0A	; 10
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	b9 01       	movw	r22, r18
    2c5a:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2c5e:	cb 01       	movw	r24, r22
    2c60:	80 5d       	subi	r24, 0xD0	; 208
    2c62:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
					CLCD_voidSendData((res%10)+48);
    2c66:	fe 01       	movw	r30, r28
    2c68:	ea 5a       	subi	r30, 0xAA	; 170
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	80 81       	ld	r24, Z
    2c6e:	91 81       	ldd	r25, Z+1	; 0x01
    2c70:	2a e0       	ldi	r18, 0x0A	; 10
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	b9 01       	movw	r22, r18
    2c76:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2c7a:	80 5d       	subi	r24, 0xD0	; 208
    2c7c:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
    2c80:	4b c2       	rjmp	.+1174   	; 0x3118 <main+0x1440>
				}
				else if(res<10)
    2c82:	fe 01       	movw	r30, r28
    2c84:	ea 5a       	subi	r30, 0xAA	; 170
    2c86:	ff 4f       	sbci	r31, 0xFF	; 255
    2c88:	80 81       	ld	r24, Z
    2c8a:	91 81       	ldd	r25, Z+1	; 0x01
    2c8c:	8a 30       	cpi	r24, 0x0A	; 10
    2c8e:	91 05       	cpc	r25, r1
    2c90:	08 f0       	brcs	.+2      	; 0x2c94 <main+0xfbc>
    2c92:	42 c2       	rjmp	.+1156   	; 0x3118 <main+0x1440>
				{
					CLCD_voidSendData(res+48);
    2c94:	fe 01       	movw	r30, r28
    2c96:	ea 5a       	subi	r30, 0xAA	; 170
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	80 81       	ld	r24, Z
    2c9c:	80 5d       	subi	r24, 0xD0	; 208
    2c9e:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
    2ca2:	3a c2       	rjmp	.+1140   	; 0x3118 <main+0x1440>
				}
				break;
			case '*':
				res=((arr[counter-4]-48)+((arr[counter-5]-48)*10))*(((arr[counter-2]-48)*10)+(arr[counter-1]-48));
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	eb 5a       	subi	r30, 0xAB	; 171
    2ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    2caa:	80 81       	ld	r24, Z
    2cac:	88 2f       	mov	r24, r24
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	9c 01       	movw	r18, r24
    2cb2:	24 50       	subi	r18, 0x04	; 4
    2cb4:	30 40       	sbci	r19, 0x00	; 0
    2cb6:	ce 01       	movw	r24, r28
    2cb8:	88 5a       	subi	r24, 0xA8	; 168
    2cba:	9f 4f       	sbci	r25, 0xFF	; 255
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	e2 0f       	add	r30, r18
    2cc0:	f3 1f       	adc	r31, r19
    2cc2:	80 81       	ld	r24, Z
    2cc4:	88 2f       	mov	r24, r24
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	ac 01       	movw	r20, r24
    2cca:	40 53       	subi	r20, 0x30	; 48
    2ccc:	50 40       	sbci	r21, 0x00	; 0
    2cce:	fe 01       	movw	r30, r28
    2cd0:	eb 5a       	subi	r30, 0xAB	; 171
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	80 81       	ld	r24, Z
    2cd6:	88 2f       	mov	r24, r24
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	9c 01       	movw	r18, r24
    2cdc:	25 50       	subi	r18, 0x05	; 5
    2cde:	30 40       	sbci	r19, 0x00	; 0
    2ce0:	ce 01       	movw	r24, r28
    2ce2:	88 5a       	subi	r24, 0xA8	; 168
    2ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	e2 0f       	add	r30, r18
    2cea:	f3 1f       	adc	r31, r19
    2cec:	80 81       	ld	r24, Z
    2cee:	88 2f       	mov	r24, r24
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	9c 01       	movw	r18, r24
    2cf4:	22 0f       	add	r18, r18
    2cf6:	33 1f       	adc	r19, r19
    2cf8:	c9 01       	movw	r24, r18
    2cfa:	88 0f       	add	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	88 0f       	add	r24, r24
    2d00:	99 1f       	adc	r25, r25
    2d02:	82 0f       	add	r24, r18
    2d04:	93 1f       	adc	r25, r19
    2d06:	80 5e       	subi	r24, 0xE0	; 224
    2d08:	91 40       	sbci	r25, 0x01	; 1
    2d0a:	ba 01       	movw	r22, r20
    2d0c:	68 0f       	add	r22, r24
    2d0e:	79 1f       	adc	r23, r25
    2d10:	fe 01       	movw	r30, r28
    2d12:	eb 5a       	subi	r30, 0xAB	; 171
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	80 81       	ld	r24, Z
    2d18:	88 2f       	mov	r24, r24
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	9c 01       	movw	r18, r24
    2d1e:	22 50       	subi	r18, 0x02	; 2
    2d20:	30 40       	sbci	r19, 0x00	; 0
    2d22:	ce 01       	movw	r24, r28
    2d24:	88 5a       	subi	r24, 0xA8	; 168
    2d26:	9f 4f       	sbci	r25, 0xFF	; 255
    2d28:	fc 01       	movw	r30, r24
    2d2a:	e2 0f       	add	r30, r18
    2d2c:	f3 1f       	adc	r31, r19
    2d2e:	80 81       	ld	r24, Z
    2d30:	88 2f       	mov	r24, r24
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	9c 01       	movw	r18, r24
    2d36:	22 0f       	add	r18, r18
    2d38:	33 1f       	adc	r19, r19
    2d3a:	c9 01       	movw	r24, r18
    2d3c:	88 0f       	add	r24, r24
    2d3e:	99 1f       	adc	r25, r25
    2d40:	88 0f       	add	r24, r24
    2d42:	99 1f       	adc	r25, r25
    2d44:	82 0f       	add	r24, r18
    2d46:	93 1f       	adc	r25, r19
    2d48:	ac 01       	movw	r20, r24
    2d4a:	40 5e       	subi	r20, 0xE0	; 224
    2d4c:	51 40       	sbci	r21, 0x01	; 1
    2d4e:	fe 01       	movw	r30, r28
    2d50:	eb 5a       	subi	r30, 0xAB	; 171
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	80 81       	ld	r24, Z
    2d56:	88 2f       	mov	r24, r24
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	9c 01       	movw	r18, r24
    2d5c:	21 50       	subi	r18, 0x01	; 1
    2d5e:	30 40       	sbci	r19, 0x00	; 0
    2d60:	ce 01       	movw	r24, r28
    2d62:	88 5a       	subi	r24, 0xA8	; 168
    2d64:	9f 4f       	sbci	r25, 0xFF	; 255
    2d66:	fc 01       	movw	r30, r24
    2d68:	e2 0f       	add	r30, r18
    2d6a:	f3 1f       	adc	r31, r19
    2d6c:	80 81       	ld	r24, Z
    2d6e:	88 2f       	mov	r24, r24
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	c0 97       	sbiw	r24, 0x30	; 48
    2d74:	84 0f       	add	r24, r20
    2d76:	95 1f       	adc	r25, r21
    2d78:	fc 01       	movw	r30, r24
    2d7a:	6e 9f       	mul	r22, r30
    2d7c:	c0 01       	movw	r24, r0
    2d7e:	6f 9f       	mul	r22, r31
    2d80:	90 0d       	add	r25, r0
    2d82:	7e 9f       	mul	r23, r30
    2d84:	90 0d       	add	r25, r0
    2d86:	11 24       	eor	r1, r1
    2d88:	fe 01       	movw	r30, r28
    2d8a:	ea 5a       	subi	r30, 0xAA	; 170
    2d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8e:	91 83       	std	Z+1, r25	; 0x01
    2d90:	80 83       	st	Z, r24
				if(res>=1000&&res<10000)
    2d92:	fe 01       	movw	r30, r28
    2d94:	ea 5a       	subi	r30, 0xAA	; 170
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	80 81       	ld	r24, Z
    2d9a:	91 81       	ldd	r25, Z+1	; 0x01
    2d9c:	f3 e0       	ldi	r31, 0x03	; 3
    2d9e:	88 3e       	cpi	r24, 0xE8	; 232
    2da0:	9f 07       	cpc	r25, r31
    2da2:	08 f4       	brcc	.+2      	; 0x2da6 <main+0x10ce>
    2da4:	4c c0       	rjmp	.+152    	; 0x2e3e <main+0x1166>
    2da6:	fe 01       	movw	r30, r28
    2da8:	ea 5a       	subi	r30, 0xAA	; 170
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	80 81       	ld	r24, Z
    2dae:	91 81       	ldd	r25, Z+1	; 0x01
    2db0:	27 e2       	ldi	r18, 0x27	; 39
    2db2:	80 31       	cpi	r24, 0x10	; 16
    2db4:	92 07       	cpc	r25, r18
    2db6:	08 f0       	brcs	.+2      	; 0x2dba <main+0x10e2>
    2db8:	42 c0       	rjmp	.+132    	; 0x2e3e <main+0x1166>
				{


					CLCD_voidSendData((res/100)+48);
    2dba:	fe 01       	movw	r30, r28
    2dbc:	ea 5a       	subi	r30, 0xAA	; 170
    2dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc0:	80 81       	ld	r24, Z
    2dc2:	91 81       	ldd	r25, Z+1	; 0x01
    2dc4:	24 e6       	ldi	r18, 0x64	; 100
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	b9 01       	movw	r22, r18
    2dca:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2dce:	cb 01       	movw	r24, r22
    2dd0:	80 5d       	subi	r24, 0xD0	; 208
    2dd2:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
					CLCD_voidSendData(((res/10)%10)+48);
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	ea 5a       	subi	r30, 0xAA	; 170
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	80 81       	ld	r24, Z
    2dde:	91 81       	ldd	r25, Z+1	; 0x01
    2de0:	2a e0       	ldi	r18, 0x0A	; 10
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	b9 01       	movw	r22, r18
    2de6:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2dea:	cb 01       	movw	r24, r22
    2dec:	2a e0       	ldi	r18, 0x0A	; 10
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	b9 01       	movw	r22, r18
    2df2:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2df6:	80 5d       	subi	r24, 0xD0	; 208
    2df8:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
					CLCD_voidSendData(((res/10)%10)+48);
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	ea 5a       	subi	r30, 0xAA	; 170
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	80 81       	ld	r24, Z
    2e04:	91 81       	ldd	r25, Z+1	; 0x01
    2e06:	2a e0       	ldi	r18, 0x0A	; 10
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	b9 01       	movw	r22, r18
    2e0c:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2e10:	cb 01       	movw	r24, r22
    2e12:	2a e0       	ldi	r18, 0x0A	; 10
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	b9 01       	movw	r22, r18
    2e18:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2e1c:	80 5d       	subi	r24, 0xD0	; 208
    2e1e:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>

					CLCD_voidSendData((res%10)+48);
    2e22:	fe 01       	movw	r30, r28
    2e24:	ea 5a       	subi	r30, 0xAA	; 170
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	80 81       	ld	r24, Z
    2e2a:	91 81       	ldd	r25, Z+1	; 0x01
    2e2c:	2a e0       	ldi	r18, 0x0A	; 10
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	b9 01       	movw	r22, r18
    2e32:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2e36:	80 5d       	subi	r24, 0xD0	; 208
    2e38:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
    2e3c:	6d c1       	rjmp	.+730    	; 0x3118 <main+0x1440>

				}
				else if(res>=100&&res<1000)
    2e3e:	fe 01       	movw	r30, r28
    2e40:	ea 5a       	subi	r30, 0xAA	; 170
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	80 81       	ld	r24, Z
    2e46:	91 81       	ldd	r25, Z+1	; 0x01
    2e48:	84 36       	cpi	r24, 0x64	; 100
    2e4a:	91 05       	cpc	r25, r1
    2e4c:	c0 f1       	brcs	.+112    	; 0x2ebe <main+0x11e6>
    2e4e:	fe 01       	movw	r30, r28
    2e50:	ea 5a       	subi	r30, 0xAA	; 170
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	80 81       	ld	r24, Z
    2e56:	91 81       	ldd	r25, Z+1	; 0x01
    2e58:	33 e0       	ldi	r19, 0x03	; 3
    2e5a:	88 3e       	cpi	r24, 0xE8	; 232
    2e5c:	93 07       	cpc	r25, r19
    2e5e:	78 f5       	brcc	.+94     	; 0x2ebe <main+0x11e6>
				{

					CLCD_voidSendData((res/100)+48);
    2e60:	fe 01       	movw	r30, r28
    2e62:	ea 5a       	subi	r30, 0xAA	; 170
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	80 81       	ld	r24, Z
    2e68:	91 81       	ldd	r25, Z+1	; 0x01
    2e6a:	24 e6       	ldi	r18, 0x64	; 100
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	b9 01       	movw	r22, r18
    2e70:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2e74:	cb 01       	movw	r24, r22
    2e76:	80 5d       	subi	r24, 0xD0	; 208
    2e78:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
					CLCD_voidSendData(((res/10)%10)+48);
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	ea 5a       	subi	r30, 0xAA	; 170
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	80 81       	ld	r24, Z
    2e84:	91 81       	ldd	r25, Z+1	; 0x01
    2e86:	2a e0       	ldi	r18, 0x0A	; 10
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	b9 01       	movw	r22, r18
    2e8c:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2e90:	cb 01       	movw	r24, r22
    2e92:	2a e0       	ldi	r18, 0x0A	; 10
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	b9 01       	movw	r22, r18
    2e98:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2e9c:	80 5d       	subi	r24, 0xD0	; 208
    2e9e:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
					CLCD_voidSendData((res%10)+48);
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	ea 5a       	subi	r30, 0xAA	; 170
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	80 81       	ld	r24, Z
    2eaa:	91 81       	ldd	r25, Z+1	; 0x01
    2eac:	2a e0       	ldi	r18, 0x0A	; 10
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	b9 01       	movw	r22, r18
    2eb2:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2eb6:	80 5d       	subi	r24, 0xD0	; 208
    2eb8:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
    2ebc:	2d c1       	rjmp	.+602    	; 0x3118 <main+0x1440>


				}
				else if (res>=10&&res<100)
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	ea 5a       	subi	r30, 0xAA	; 170
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	80 81       	ld	r24, Z
    2ec6:	91 81       	ldd	r25, Z+1	; 0x01
    2ec8:	8a 30       	cpi	r24, 0x0A	; 10
    2eca:	91 05       	cpc	r25, r1
    2ecc:	20 f1       	brcs	.+72     	; 0x2f16 <main+0x123e>
    2ece:	fe 01       	movw	r30, r28
    2ed0:	ea 5a       	subi	r30, 0xAA	; 170
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	80 81       	ld	r24, Z
    2ed6:	91 81       	ldd	r25, Z+1	; 0x01
    2ed8:	84 36       	cpi	r24, 0x64	; 100
    2eda:	91 05       	cpc	r25, r1
    2edc:	e0 f4       	brcc	.+56     	; 0x2f16 <main+0x123e>
				{


					CLCD_voidSendData((res/10)+48);
    2ede:	fe 01       	movw	r30, r28
    2ee0:	ea 5a       	subi	r30, 0xAA	; 170
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	80 81       	ld	r24, Z
    2ee6:	91 81       	ldd	r25, Z+1	; 0x01
    2ee8:	2a e0       	ldi	r18, 0x0A	; 10
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	b9 01       	movw	r22, r18
    2eee:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	80 5d       	subi	r24, 0xD0	; 208
    2ef6:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
					CLCD_voidSendData((res%10)+48);
    2efa:	fe 01       	movw	r30, r28
    2efc:	ea 5a       	subi	r30, 0xAA	; 170
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	80 81       	ld	r24, Z
    2f02:	91 81       	ldd	r25, Z+1	; 0x01
    2f04:	2a e0       	ldi	r18, 0x0A	; 10
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	b9 01       	movw	r22, r18
    2f0a:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    2f0e:	80 5d       	subi	r24, 0xD0	; 208
    2f10:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
    2f14:	01 c1       	rjmp	.+514    	; 0x3118 <main+0x1440>


				}
				else if(res<10)
    2f16:	fe 01       	movw	r30, r28
    2f18:	ea 5a       	subi	r30, 0xAA	; 170
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	80 81       	ld	r24, Z
    2f1e:	91 81       	ldd	r25, Z+1	; 0x01
    2f20:	8a 30       	cpi	r24, 0x0A	; 10
    2f22:	91 05       	cpc	r25, r1
    2f24:	08 f0       	brcs	.+2      	; 0x2f28 <main+0x1250>
    2f26:	f8 c0       	rjmp	.+496    	; 0x3118 <main+0x1440>
				{
					CLCD_voidSendData(res+48);
    2f28:	fe 01       	movw	r30, r28
    2f2a:	ea 5a       	subi	r30, 0xAA	; 170
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	80 81       	ld	r24, Z
    2f30:	80 5d       	subi	r24, 0xD0	; 208
    2f32:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
    2f36:	f0 c0       	rjmp	.+480    	; 0x3118 <main+0x1440>
				}
				break;
			case '/':
				res=((arr[counter-4]-48)+((arr[counter-5]-48)*10))/(((arr[counter-2]-48)*10)+(arr[counter-1]-48));
    2f38:	fe 01       	movw	r30, r28
    2f3a:	eb 5a       	subi	r30, 0xAB	; 171
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	80 81       	ld	r24, Z
    2f40:	88 2f       	mov	r24, r24
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	9c 01       	movw	r18, r24
    2f46:	24 50       	subi	r18, 0x04	; 4
    2f48:	30 40       	sbci	r19, 0x00	; 0
    2f4a:	ce 01       	movw	r24, r28
    2f4c:	88 5a       	subi	r24, 0xA8	; 168
    2f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f50:	fc 01       	movw	r30, r24
    2f52:	e2 0f       	add	r30, r18
    2f54:	f3 1f       	adc	r31, r19
    2f56:	80 81       	ld	r24, Z
    2f58:	88 2f       	mov	r24, r24
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	ac 01       	movw	r20, r24
    2f5e:	40 53       	subi	r20, 0x30	; 48
    2f60:	50 40       	sbci	r21, 0x00	; 0
    2f62:	fe 01       	movw	r30, r28
    2f64:	eb 5a       	subi	r30, 0xAB	; 171
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	80 81       	ld	r24, Z
    2f6a:	88 2f       	mov	r24, r24
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	9c 01       	movw	r18, r24
    2f70:	25 50       	subi	r18, 0x05	; 5
    2f72:	30 40       	sbci	r19, 0x00	; 0
    2f74:	ce 01       	movw	r24, r28
    2f76:	88 5a       	subi	r24, 0xA8	; 168
    2f78:	9f 4f       	sbci	r25, 0xFF	; 255
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	e2 0f       	add	r30, r18
    2f7e:	f3 1f       	adc	r31, r19
    2f80:	80 81       	ld	r24, Z
    2f82:	88 2f       	mov	r24, r24
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	9c 01       	movw	r18, r24
    2f88:	22 0f       	add	r18, r18
    2f8a:	33 1f       	adc	r19, r19
    2f8c:	c9 01       	movw	r24, r18
    2f8e:	88 0f       	add	r24, r24
    2f90:	99 1f       	adc	r25, r25
    2f92:	88 0f       	add	r24, r24
    2f94:	99 1f       	adc	r25, r25
    2f96:	82 0f       	add	r24, r18
    2f98:	93 1f       	adc	r25, r19
    2f9a:	80 5e       	subi	r24, 0xE0	; 224
    2f9c:	91 40       	sbci	r25, 0x01	; 1
    2f9e:	ba 01       	movw	r22, r20
    2fa0:	68 0f       	add	r22, r24
    2fa2:	79 1f       	adc	r23, r25
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	eb 5a       	subi	r30, 0xAB	; 171
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	80 81       	ld	r24, Z
    2fac:	88 2f       	mov	r24, r24
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	9c 01       	movw	r18, r24
    2fb2:	22 50       	subi	r18, 0x02	; 2
    2fb4:	30 40       	sbci	r19, 0x00	; 0
    2fb6:	ce 01       	movw	r24, r28
    2fb8:	88 5a       	subi	r24, 0xA8	; 168
    2fba:	9f 4f       	sbci	r25, 0xFF	; 255
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	e2 0f       	add	r30, r18
    2fc0:	f3 1f       	adc	r31, r19
    2fc2:	80 81       	ld	r24, Z
    2fc4:	88 2f       	mov	r24, r24
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	9c 01       	movw	r18, r24
    2fca:	22 0f       	add	r18, r18
    2fcc:	33 1f       	adc	r19, r19
    2fce:	c9 01       	movw	r24, r18
    2fd0:	88 0f       	add	r24, r24
    2fd2:	99 1f       	adc	r25, r25
    2fd4:	88 0f       	add	r24, r24
    2fd6:	99 1f       	adc	r25, r25
    2fd8:	82 0f       	add	r24, r18
    2fda:	93 1f       	adc	r25, r19
    2fdc:	ac 01       	movw	r20, r24
    2fde:	40 5e       	subi	r20, 0xE0	; 224
    2fe0:	51 40       	sbci	r21, 0x01	; 1
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	eb 5a       	subi	r30, 0xAB	; 171
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	80 81       	ld	r24, Z
    2fea:	88 2f       	mov	r24, r24
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	9c 01       	movw	r18, r24
    2ff0:	21 50       	subi	r18, 0x01	; 1
    2ff2:	30 40       	sbci	r19, 0x00	; 0
    2ff4:	ce 01       	movw	r24, r28
    2ff6:	88 5a       	subi	r24, 0xA8	; 168
    2ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    2ffa:	fc 01       	movw	r30, r24
    2ffc:	e2 0f       	add	r30, r18
    2ffe:	f3 1f       	adc	r31, r19
    3000:	80 81       	ld	r24, Z
    3002:	88 2f       	mov	r24, r24
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	c0 97       	sbiw	r24, 0x30	; 48
    3008:	9a 01       	movw	r18, r20
    300a:	28 0f       	add	r18, r24
    300c:	39 1f       	adc	r19, r25
    300e:	cb 01       	movw	r24, r22
    3010:	b9 01       	movw	r22, r18
    3012:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <__divmodhi4>
    3016:	cb 01       	movw	r24, r22
    3018:	fe 01       	movw	r30, r28
    301a:	ea 5a       	subi	r30, 0xAA	; 170
    301c:	ff 4f       	sbci	r31, 0xFF	; 255
    301e:	91 83       	std	Z+1, r25	; 0x01
    3020:	80 83       	st	Z, r24
				if(res>=100&&res<1000)
    3022:	fe 01       	movw	r30, r28
    3024:	ea 5a       	subi	r30, 0xAA	; 170
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	80 81       	ld	r24, Z
    302a:	91 81       	ldd	r25, Z+1	; 0x01
    302c:	84 36       	cpi	r24, 0x64	; 100
    302e:	91 05       	cpc	r25, r1
    3030:	c0 f1       	brcs	.+112    	; 0x30a2 <main+0x13ca>
    3032:	fe 01       	movw	r30, r28
    3034:	ea 5a       	subi	r30, 0xAA	; 170
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	80 81       	ld	r24, Z
    303a:	91 81       	ldd	r25, Z+1	; 0x01
    303c:	e3 e0       	ldi	r30, 0x03	; 3
    303e:	88 3e       	cpi	r24, 0xE8	; 232
    3040:	9e 07       	cpc	r25, r30
    3042:	78 f5       	brcc	.+94     	; 0x30a2 <main+0x13ca>
				{


					CLCD_voidSendData((res/100)+48);
    3044:	fe 01       	movw	r30, r28
    3046:	ea 5a       	subi	r30, 0xAA	; 170
    3048:	ff 4f       	sbci	r31, 0xFF	; 255
    304a:	80 81       	ld	r24, Z
    304c:	91 81       	ldd	r25, Z+1	; 0x01
    304e:	24 e6       	ldi	r18, 0x64	; 100
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	b9 01       	movw	r22, r18
    3054:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    3058:	cb 01       	movw	r24, r22
    305a:	80 5d       	subi	r24, 0xD0	; 208
    305c:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
					CLCD_voidSendData(((res/10)%10)+48);
    3060:	fe 01       	movw	r30, r28
    3062:	ea 5a       	subi	r30, 0xAA	; 170
    3064:	ff 4f       	sbci	r31, 0xFF	; 255
    3066:	80 81       	ld	r24, Z
    3068:	91 81       	ldd	r25, Z+1	; 0x01
    306a:	2a e0       	ldi	r18, 0x0A	; 10
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	b9 01       	movw	r22, r18
    3070:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    3074:	cb 01       	movw	r24, r22
    3076:	2a e0       	ldi	r18, 0x0A	; 10
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	b9 01       	movw	r22, r18
    307c:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    3080:	80 5d       	subi	r24, 0xD0	; 208
    3082:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
					CLCD_voidSendData((res%10)+48);
    3086:	fe 01       	movw	r30, r28
    3088:	ea 5a       	subi	r30, 0xAA	; 170
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	80 81       	ld	r24, Z
    308e:	91 81       	ldd	r25, Z+1	; 0x01
    3090:	2a e0       	ldi	r18, 0x0A	; 10
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	b9 01       	movw	r22, r18
    3096:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    309a:	80 5d       	subi	r24, 0xD0	; 208
    309c:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
    30a0:	3b c0       	rjmp	.+118    	; 0x3118 <main+0x1440>
				}
				else if (res>=10&&res<100)
    30a2:	fe 01       	movw	r30, r28
    30a4:	ea 5a       	subi	r30, 0xAA	; 170
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	80 81       	ld	r24, Z
    30aa:	91 81       	ldd	r25, Z+1	; 0x01
    30ac:	8a 30       	cpi	r24, 0x0A	; 10
    30ae:	91 05       	cpc	r25, r1
    30b0:	20 f1       	brcs	.+72     	; 0x30fa <main+0x1422>
    30b2:	fe 01       	movw	r30, r28
    30b4:	ea 5a       	subi	r30, 0xAA	; 170
    30b6:	ff 4f       	sbci	r31, 0xFF	; 255
    30b8:	80 81       	ld	r24, Z
    30ba:	91 81       	ldd	r25, Z+1	; 0x01
    30bc:	84 36       	cpi	r24, 0x64	; 100
    30be:	91 05       	cpc	r25, r1
    30c0:	e0 f4       	brcc	.+56     	; 0x30fa <main+0x1422>
				{
					CLCD_voidSendData((res/10)+48);
    30c2:	fe 01       	movw	r30, r28
    30c4:	ea 5a       	subi	r30, 0xAA	; 170
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	80 81       	ld	r24, Z
    30ca:	91 81       	ldd	r25, Z+1	; 0x01
    30cc:	2a e0       	ldi	r18, 0x0A	; 10
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	b9 01       	movw	r22, r18
    30d2:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    30d6:	cb 01       	movw	r24, r22
    30d8:	80 5d       	subi	r24, 0xD0	; 208
    30da:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
					CLCD_voidSendData((res%10)+48);
    30de:	fe 01       	movw	r30, r28
    30e0:	ea 5a       	subi	r30, 0xAA	; 170
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	80 81       	ld	r24, Z
    30e6:	91 81       	ldd	r25, Z+1	; 0x01
    30e8:	2a e0       	ldi	r18, 0x0A	; 10
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	b9 01       	movw	r22, r18
    30ee:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__udivmodhi4>
    30f2:	80 5d       	subi	r24, 0xD0	; 208
    30f4:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
    30f8:	0f c0       	rjmp	.+30     	; 0x3118 <main+0x1440>
				}
				else if(res<10)
    30fa:	fe 01       	movw	r30, r28
    30fc:	ea 5a       	subi	r30, 0xAA	; 170
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	80 81       	ld	r24, Z
    3102:	91 81       	ldd	r25, Z+1	; 0x01
    3104:	8a 30       	cpi	r24, 0x0A	; 10
    3106:	91 05       	cpc	r25, r1
    3108:	38 f4       	brcc	.+14     	; 0x3118 <main+0x1440>
				{
					CLCD_voidSendData(res+48);
    310a:	fe 01       	movw	r30, r28
    310c:	ea 5a       	subi	r30, 0xAA	; 170
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	80 81       	ld	r24, Z
    3112:	80 5d       	subi	r24, 0xD0	; 208
    3114:	0e 94 17 09 	call	0x122e	; 0x122e <CLCD_voidSendData>
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	a8 e4       	ldi	r26, 0x48	; 72
    311e:	b3 e4       	ldi	r27, 0x43	; 67
    3120:	8b 87       	std	Y+11, r24	; 0x0b
    3122:	9c 87       	std	Y+12, r25	; 0x0c
    3124:	ad 87       	std	Y+13, r26	; 0x0d
    3126:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3128:	6b 85       	ldd	r22, Y+11	; 0x0b
    312a:	7c 85       	ldd	r23, Y+12	; 0x0c
    312c:	8d 85       	ldd	r24, Y+13	; 0x0d
    312e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	4a ef       	ldi	r20, 0xFA	; 250
    3136:	54 e4       	ldi	r21, 0x44	; 68
    3138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	8f 83       	std	Y+7, r24	; 0x07
    3142:	98 87       	std	Y+8, r25	; 0x08
    3144:	a9 87       	std	Y+9, r26	; 0x09
    3146:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3148:	6f 81       	ldd	r22, Y+7	; 0x07
    314a:	78 85       	ldd	r23, Y+8	; 0x08
    314c:	89 85       	ldd	r24, Y+9	; 0x09
    314e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	40 e8       	ldi	r20, 0x80	; 128
    3156:	5f e3       	ldi	r21, 0x3F	; 63
    3158:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    315c:	88 23       	and	r24, r24
    315e:	2c f4       	brge	.+10     	; 0x316a <main+0x1492>
		__ticks = 1;
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	9e 83       	std	Y+6, r25	; 0x06
    3166:	8d 83       	std	Y+5, r24	; 0x05
    3168:	40 c0       	rjmp	.+128    	; 0x31ea <main+0x1512>
	else if (__tmp > 65535)
    316a:	6f 81       	ldd	r22, Y+7	; 0x07
    316c:	78 85       	ldd	r23, Y+8	; 0x08
    316e:	89 85       	ldd	r24, Y+9	; 0x09
    3170:	9a 85       	ldd	r25, Y+10	; 0x0a
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	3f ef       	ldi	r19, 0xFF	; 255
    3176:	4f e7       	ldi	r20, 0x7F	; 127
    3178:	57 e4       	ldi	r21, 0x47	; 71
    317a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    317e:	18 16       	cp	r1, r24
    3180:	54 f5       	brge	.+84     	; 0x31d6 <main+0x14fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3182:	6b 85       	ldd	r22, Y+11	; 0x0b
    3184:	7c 85       	ldd	r23, Y+12	; 0x0c
    3186:	8d 85       	ldd	r24, Y+13	; 0x0d
    3188:	9e 85       	ldd	r25, Y+14	; 0x0e
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	40 e2       	ldi	r20, 0x20	; 32
    3190:	51 e4       	ldi	r21, 0x41	; 65
    3192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	bc 01       	movw	r22, r24
    319c:	cd 01       	movw	r24, r26
    319e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	9e 83       	std	Y+6, r25	; 0x06
    31a8:	8d 83       	std	Y+5, r24	; 0x05
    31aa:	0f c0       	rjmp	.+30     	; 0x31ca <main+0x14f2>
    31ac:	88 ec       	ldi	r24, 0xC8	; 200
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	9c 83       	std	Y+4, r25	; 0x04
    31b2:	8b 83       	std	Y+3, r24	; 0x03
    31b4:	8b 81       	ldd	r24, Y+3	; 0x03
    31b6:	9c 81       	ldd	r25, Y+4	; 0x04
    31b8:	01 97       	sbiw	r24, 0x01	; 1
    31ba:	f1 f7       	brne	.-4      	; 0x31b8 <main+0x14e0>
    31bc:	9c 83       	std	Y+4, r25	; 0x04
    31be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c0:	8d 81       	ldd	r24, Y+5	; 0x05
    31c2:	9e 81       	ldd	r25, Y+6	; 0x06
    31c4:	01 97       	sbiw	r24, 0x01	; 1
    31c6:	9e 83       	std	Y+6, r25	; 0x06
    31c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ca:	8d 81       	ldd	r24, Y+5	; 0x05
    31cc:	9e 81       	ldd	r25, Y+6	; 0x06
    31ce:	00 97       	sbiw	r24, 0x00	; 0
    31d0:	69 f7       	brne	.-38     	; 0x31ac <main+0x14d4>
    31d2:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <main+0xa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d6:	6f 81       	ldd	r22, Y+7	; 0x07
    31d8:	78 85       	ldd	r23, Y+8	; 0x08
    31da:	89 85       	ldd	r24, Y+9	; 0x09
    31dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	9e 83       	std	Y+6, r25	; 0x06
    31e8:	8d 83       	std	Y+5, r24	; 0x05
    31ea:	8d 81       	ldd	r24, Y+5	; 0x05
    31ec:	9e 81       	ldd	r25, Y+6	; 0x06
    31ee:	9a 83       	std	Y+2, r25	; 0x02
    31f0:	89 83       	std	Y+1, r24	; 0x01
    31f2:	89 81       	ldd	r24, Y+1	; 0x01
    31f4:	9a 81       	ldd	r25, Y+2	; 0x02
    31f6:	01 97       	sbiw	r24, 0x01	; 1
    31f8:	f1 f7       	brne	.-4      	; 0x31f6 <main+0x151e>
    31fa:	9a 83       	std	Y+2, r25	; 0x02
    31fc:	89 83       	std	Y+1, r24	; 0x01
    31fe:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <main+0xa0>

			}
		}
		else
		{
			CLCD_Void_LCDClear();
    3202:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <CLCD_Void_LCDClear>
    3206:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <main+0x1a>

0000320a <DIO_INIT>:
#include "init.h"
#include "config.h"


u8int_t  DIO_INIT  (u8int_t PortName, u8int_t PinNum,u8int_t Direction)
{
    320a:	df 93       	push	r29
    320c:	cf 93       	push	r28
    320e:	cd b7       	in	r28, 0x3d	; 61
    3210:	de b7       	in	r29, 0x3e	; 62
    3212:	28 97       	sbiw	r28, 0x08	; 8
    3214:	0f b6       	in	r0, 0x3f	; 63
    3216:	f8 94       	cli
    3218:	de bf       	out	0x3e, r29	; 62
    321a:	0f be       	out	0x3f, r0	; 63
    321c:	cd bf       	out	0x3d, r28	; 61
    321e:	8a 83       	std	Y+2, r24	; 0x02
    3220:	6b 83       	std	Y+3, r22	; 0x03
    3222:	4c 83       	std	Y+4, r20	; 0x04
	u8int_t Local_u8ERRStatus=OK;
    3224:	19 82       	std	Y+1, r1	; 0x01

	if(PinNum>=0 && PinNum<=7)
    3226:	8b 81       	ldd	r24, Y+3	; 0x03
    3228:	88 30       	cpi	r24, 0x08	; 8
    322a:	08 f0       	brcs	.+2      	; 0x322e <DIO_INIT+0x24>
    322c:	f4 c0       	rjmp	.+488    	; 0x3416 <DIO_INIT+0x20c>
	{
		if(Direction == PIN_INPUT)
    322e:	8c 81       	ldd	r24, Y+4	; 0x04
    3230:	88 23       	and	r24, r24
    3232:	09 f0       	breq	.+2      	; 0x3236 <DIO_INIT+0x2c>
    3234:	77 c0       	rjmp	.+238    	; 0x3324 <DIO_INIT+0x11a>
		{

			switch(PortName)
    3236:	8a 81       	ldd	r24, Y+2	; 0x02
    3238:	28 2f       	mov	r18, r24
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	38 87       	std	Y+8, r19	; 0x08
    323e:	2f 83       	std	Y+7, r18	; 0x07
    3240:	8f 81       	ldd	r24, Y+7	; 0x07
    3242:	98 85       	ldd	r25, Y+8	; 0x08
    3244:	81 30       	cpi	r24, 0x01	; 1
    3246:	91 05       	cpc	r25, r1
    3248:	59 f1       	breq	.+86     	; 0x32a0 <DIO_INIT+0x96>
    324a:	2f 81       	ldd	r18, Y+7	; 0x07
    324c:	38 85       	ldd	r19, Y+8	; 0x08
    324e:	22 30       	cpi	r18, 0x02	; 2
    3250:	31 05       	cpc	r19, r1
    3252:	2c f4       	brge	.+10     	; 0x325e <DIO_INIT+0x54>
    3254:	8f 81       	ldd	r24, Y+7	; 0x07
    3256:	98 85       	ldd	r25, Y+8	; 0x08
    3258:	00 97       	sbiw	r24, 0x00	; 0
    325a:	69 f0       	breq	.+26     	; 0x3276 <DIO_INIT+0x6c>
    325c:	60 c0       	rjmp	.+192    	; 0x331e <DIO_INIT+0x114>
    325e:	2f 81       	ldd	r18, Y+7	; 0x07
    3260:	38 85       	ldd	r19, Y+8	; 0x08
    3262:	22 30       	cpi	r18, 0x02	; 2
    3264:	31 05       	cpc	r19, r1
    3266:	89 f1       	breq	.+98     	; 0x32ca <DIO_INIT+0xc0>
    3268:	8f 81       	ldd	r24, Y+7	; 0x07
    326a:	98 85       	ldd	r25, Y+8	; 0x08
    326c:	83 30       	cpi	r24, 0x03	; 3
    326e:	91 05       	cpc	r25, r1
    3270:	09 f4       	brne	.+2      	; 0x3274 <DIO_INIT+0x6a>
    3272:	40 c0       	rjmp	.+128    	; 0x32f4 <DIO_INIT+0xea>
    3274:	54 c0       	rjmp	.+168    	; 0x331e <DIO_INIT+0x114>
			{


			case(PORT_A):  CLR_BIT(DDRA_REG,PinNum);break;
    3276:	aa e3       	ldi	r26, 0x3A	; 58
    3278:	b0 e0       	ldi	r27, 0x00	; 0
    327a:	ea e3       	ldi	r30, 0x3A	; 58
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	80 81       	ld	r24, Z
    3280:	48 2f       	mov	r20, r24
    3282:	8b 81       	ldd	r24, Y+3	; 0x03
    3284:	28 2f       	mov	r18, r24
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	02 2e       	mov	r0, r18
    328e:	02 c0       	rjmp	.+4      	; 0x3294 <DIO_INIT+0x8a>
    3290:	88 0f       	add	r24, r24
    3292:	99 1f       	adc	r25, r25
    3294:	0a 94       	dec	r0
    3296:	e2 f7       	brpl	.-8      	; 0x3290 <DIO_INIT+0x86>
    3298:	80 95       	com	r24
    329a:	84 23       	and	r24, r20
    329c:	8c 93       	st	X, r24
    329e:	bd c0       	rjmp	.+378    	; 0x341a <DIO_INIT+0x210>
			case(PORT_B): CLR_BIT(DDRB_REG,PinNum);break;
    32a0:	a7 e3       	ldi	r26, 0x37	; 55
    32a2:	b0 e0       	ldi	r27, 0x00	; 0
    32a4:	e7 e3       	ldi	r30, 0x37	; 55
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	80 81       	ld	r24, Z
    32aa:	48 2f       	mov	r20, r24
    32ac:	8b 81       	ldd	r24, Y+3	; 0x03
    32ae:	28 2f       	mov	r18, r24
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	02 2e       	mov	r0, r18
    32b8:	02 c0       	rjmp	.+4      	; 0x32be <DIO_INIT+0xb4>
    32ba:	88 0f       	add	r24, r24
    32bc:	99 1f       	adc	r25, r25
    32be:	0a 94       	dec	r0
    32c0:	e2 f7       	brpl	.-8      	; 0x32ba <DIO_INIT+0xb0>
    32c2:	80 95       	com	r24
    32c4:	84 23       	and	r24, r20
    32c6:	8c 93       	st	X, r24
    32c8:	a8 c0       	rjmp	.+336    	; 0x341a <DIO_INIT+0x210>
			case(PORT_C): CLR_BIT(DDRC_REG,PinNum);break;
    32ca:	a4 e3       	ldi	r26, 0x34	; 52
    32cc:	b0 e0       	ldi	r27, 0x00	; 0
    32ce:	e4 e3       	ldi	r30, 0x34	; 52
    32d0:	f0 e0       	ldi	r31, 0x00	; 0
    32d2:	80 81       	ld	r24, Z
    32d4:	48 2f       	mov	r20, r24
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	28 2f       	mov	r18, r24
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	02 2e       	mov	r0, r18
    32e2:	02 c0       	rjmp	.+4      	; 0x32e8 <DIO_INIT+0xde>
    32e4:	88 0f       	add	r24, r24
    32e6:	99 1f       	adc	r25, r25
    32e8:	0a 94       	dec	r0
    32ea:	e2 f7       	brpl	.-8      	; 0x32e4 <DIO_INIT+0xda>
    32ec:	80 95       	com	r24
    32ee:	84 23       	and	r24, r20
    32f0:	8c 93       	st	X, r24
    32f2:	93 c0       	rjmp	.+294    	; 0x341a <DIO_INIT+0x210>
			case(PORT_D):CLR_BIT(DDRD_REG,PinNum);break;
    32f4:	a1 e3       	ldi	r26, 0x31	; 49
    32f6:	b0 e0       	ldi	r27, 0x00	; 0
    32f8:	e1 e3       	ldi	r30, 0x31	; 49
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	80 81       	ld	r24, Z
    32fe:	48 2f       	mov	r20, r24
    3300:	8b 81       	ldd	r24, Y+3	; 0x03
    3302:	28 2f       	mov	r18, r24
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	02 2e       	mov	r0, r18
    330c:	02 c0       	rjmp	.+4      	; 0x3312 <DIO_INIT+0x108>
    330e:	88 0f       	add	r24, r24
    3310:	99 1f       	adc	r25, r25
    3312:	0a 94       	dec	r0
    3314:	e2 f7       	brpl	.-8      	; 0x330e <DIO_INIT+0x104>
    3316:	80 95       	com	r24
    3318:	84 23       	and	r24, r20
    331a:	8c 93       	st	X, r24
    331c:	7e c0       	rjmp	.+252    	; 0x341a <DIO_INIT+0x210>

			default: Local_u8ERRStatus=NOK;
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	89 83       	std	Y+1, r24	; 0x01
    3322:	7b c0       	rjmp	.+246    	; 0x341a <DIO_INIT+0x210>
			break;
			}

		}

		else if(Direction == PIN_OUTPUT)
    3324:	8c 81       	ldd	r24, Y+4	; 0x04
    3326:	81 30       	cpi	r24, 0x01	; 1
    3328:	09 f0       	breq	.+2      	; 0x332c <DIO_INIT+0x122>
    332a:	72 c0       	rjmp	.+228    	; 0x3410 <DIO_INIT+0x206>
		{
			switch(PortName)
    332c:	8a 81       	ldd	r24, Y+2	; 0x02
    332e:	28 2f       	mov	r18, r24
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	3e 83       	std	Y+6, r19	; 0x06
    3334:	2d 83       	std	Y+5, r18	; 0x05
    3336:	8d 81       	ldd	r24, Y+5	; 0x05
    3338:	9e 81       	ldd	r25, Y+6	; 0x06
    333a:	81 30       	cpi	r24, 0x01	; 1
    333c:	91 05       	cpc	r25, r1
    333e:	49 f1       	breq	.+82     	; 0x3392 <DIO_INIT+0x188>
    3340:	2d 81       	ldd	r18, Y+5	; 0x05
    3342:	3e 81       	ldd	r19, Y+6	; 0x06
    3344:	22 30       	cpi	r18, 0x02	; 2
    3346:	31 05       	cpc	r19, r1
    3348:	2c f4       	brge	.+10     	; 0x3354 <DIO_INIT+0x14a>
    334a:	8d 81       	ldd	r24, Y+5	; 0x05
    334c:	9e 81       	ldd	r25, Y+6	; 0x06
    334e:	00 97       	sbiw	r24, 0x00	; 0
    3350:	61 f0       	breq	.+24     	; 0x336a <DIO_INIT+0x160>
    3352:	5b c0       	rjmp	.+182    	; 0x340a <DIO_INIT+0x200>
    3354:	2d 81       	ldd	r18, Y+5	; 0x05
    3356:	3e 81       	ldd	r19, Y+6	; 0x06
    3358:	22 30       	cpi	r18, 0x02	; 2
    335a:	31 05       	cpc	r19, r1
    335c:	71 f1       	breq	.+92     	; 0x33ba <DIO_INIT+0x1b0>
    335e:	8d 81       	ldd	r24, Y+5	; 0x05
    3360:	9e 81       	ldd	r25, Y+6	; 0x06
    3362:	83 30       	cpi	r24, 0x03	; 3
    3364:	91 05       	cpc	r25, r1
    3366:	e9 f1       	breq	.+122    	; 0x33e2 <DIO_INIT+0x1d8>
    3368:	50 c0       	rjmp	.+160    	; 0x340a <DIO_INIT+0x200>
			{


			case(PORT_A): SET_BIT(DDRA_REG,PinNum);break;
    336a:	aa e3       	ldi	r26, 0x3A	; 58
    336c:	b0 e0       	ldi	r27, 0x00	; 0
    336e:	ea e3       	ldi	r30, 0x3A	; 58
    3370:	f0 e0       	ldi	r31, 0x00	; 0
    3372:	80 81       	ld	r24, Z
    3374:	48 2f       	mov	r20, r24
    3376:	8b 81       	ldd	r24, Y+3	; 0x03
    3378:	28 2f       	mov	r18, r24
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	02 2e       	mov	r0, r18
    3382:	02 c0       	rjmp	.+4      	; 0x3388 <DIO_INIT+0x17e>
    3384:	88 0f       	add	r24, r24
    3386:	99 1f       	adc	r25, r25
    3388:	0a 94       	dec	r0
    338a:	e2 f7       	brpl	.-8      	; 0x3384 <DIO_INIT+0x17a>
    338c:	84 2b       	or	r24, r20
    338e:	8c 93       	st	X, r24
    3390:	44 c0       	rjmp	.+136    	; 0x341a <DIO_INIT+0x210>
			case(PORT_B): SET_BIT(DDRB_REG,PinNum);break;
    3392:	a7 e3       	ldi	r26, 0x37	; 55
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	e7 e3       	ldi	r30, 0x37	; 55
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	80 81       	ld	r24, Z
    339c:	48 2f       	mov	r20, r24
    339e:	8b 81       	ldd	r24, Y+3	; 0x03
    33a0:	28 2f       	mov	r18, r24
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	02 2e       	mov	r0, r18
    33aa:	02 c0       	rjmp	.+4      	; 0x33b0 <DIO_INIT+0x1a6>
    33ac:	88 0f       	add	r24, r24
    33ae:	99 1f       	adc	r25, r25
    33b0:	0a 94       	dec	r0
    33b2:	e2 f7       	brpl	.-8      	; 0x33ac <DIO_INIT+0x1a2>
    33b4:	84 2b       	or	r24, r20
    33b6:	8c 93       	st	X, r24
    33b8:	30 c0       	rjmp	.+96     	; 0x341a <DIO_INIT+0x210>
			case(PORT_C): SET_BIT(DDRC_REG,PinNum);break;
    33ba:	a4 e3       	ldi	r26, 0x34	; 52
    33bc:	b0 e0       	ldi	r27, 0x00	; 0
    33be:	e4 e3       	ldi	r30, 0x34	; 52
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	80 81       	ld	r24, Z
    33c4:	48 2f       	mov	r20, r24
    33c6:	8b 81       	ldd	r24, Y+3	; 0x03
    33c8:	28 2f       	mov	r18, r24
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	02 2e       	mov	r0, r18
    33d2:	02 c0       	rjmp	.+4      	; 0x33d8 <DIO_INIT+0x1ce>
    33d4:	88 0f       	add	r24, r24
    33d6:	99 1f       	adc	r25, r25
    33d8:	0a 94       	dec	r0
    33da:	e2 f7       	brpl	.-8      	; 0x33d4 <DIO_INIT+0x1ca>
    33dc:	84 2b       	or	r24, r20
    33de:	8c 93       	st	X, r24
    33e0:	1c c0       	rjmp	.+56     	; 0x341a <DIO_INIT+0x210>
			case(PORT_D):SET_BIT(DDRD_REG,PinNum);break;
    33e2:	a1 e3       	ldi	r26, 0x31	; 49
    33e4:	b0 e0       	ldi	r27, 0x00	; 0
    33e6:	e1 e3       	ldi	r30, 0x31	; 49
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	80 81       	ld	r24, Z
    33ec:	48 2f       	mov	r20, r24
    33ee:	8b 81       	ldd	r24, Y+3	; 0x03
    33f0:	28 2f       	mov	r18, r24
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	02 2e       	mov	r0, r18
    33fa:	02 c0       	rjmp	.+4      	; 0x3400 <DIO_INIT+0x1f6>
    33fc:	88 0f       	add	r24, r24
    33fe:	99 1f       	adc	r25, r25
    3400:	0a 94       	dec	r0
    3402:	e2 f7       	brpl	.-8      	; 0x33fc <DIO_INIT+0x1f2>
    3404:	84 2b       	or	r24, r20
    3406:	8c 93       	st	X, r24
    3408:	08 c0       	rjmp	.+16     	; 0x341a <DIO_INIT+0x210>
			default: Local_u8ERRStatus=NOK;
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	89 83       	std	Y+1, r24	; 0x01
    340e:	05 c0       	rjmp	.+10     	; 0x341a <DIO_INIT+0x210>
			}
		}

		else
		{
			Local_u8ERRStatus=NOK;
    3410:	81 e0       	ldi	r24, 0x01	; 1
    3412:	89 83       	std	Y+1, r24	; 0x01
    3414:	02 c0       	rjmp	.+4      	; 0x341a <DIO_INIT+0x210>
		}
	}
	else
	{
		Local_u8ERRStatus=NOK;
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_u8ERRStatus;
    341a:	89 81       	ldd	r24, Y+1	; 0x01

}
    341c:	28 96       	adiw	r28, 0x08	; 8
    341e:	0f b6       	in	r0, 0x3f	; 63
    3420:	f8 94       	cli
    3422:	de bf       	out	0x3e, r29	; 62
    3424:	0f be       	out	0x3f, r0	; 63
    3426:	cd bf       	out	0x3d, r28	; 61
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	08 95       	ret

0000342e <DIO_SetPinValue>:
u8int_t  DIO_SetPinValue (u8int_t PortName, u8int_t PinNum,u8int_t Value)
{
    342e:	df 93       	push	r29
    3430:	cf 93       	push	r28
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	28 97       	sbiw	r28, 0x08	; 8
    3438:	0f b6       	in	r0, 0x3f	; 63
    343a:	f8 94       	cli
    343c:	de bf       	out	0x3e, r29	; 62
    343e:	0f be       	out	0x3f, r0	; 63
    3440:	cd bf       	out	0x3d, r28	; 61
    3442:	8a 83       	std	Y+2, r24	; 0x02
    3444:	6b 83       	std	Y+3, r22	; 0x03
    3446:	4c 83       	std	Y+4, r20	; 0x04
	u8int_t ErrorState=OK ;
    3448:	19 82       	std	Y+1, r1	; 0x01

	if(PinNum>=0 && PinNum<=7 )
    344a:	8b 81       	ldd	r24, Y+3	; 0x03
    344c:	88 30       	cpi	r24, 0x08	; 8
    344e:	08 f0       	brcs	.+2      	; 0x3452 <DIO_SetPinValue+0x24>
    3450:	f0 c0       	rjmp	.+480    	; 0x3632 <DIO_SetPinValue+0x204>
	{
		if(Value== PIN_HIGH)
    3452:	8c 81       	ldd	r24, Y+4	; 0x04
    3454:	81 30       	cpi	r24, 0x01	; 1
    3456:	09 f0       	breq	.+2      	; 0x345a <DIO_SetPinValue+0x2c>
    3458:	6e c0       	rjmp	.+220    	; 0x3536 <DIO_SetPinValue+0x108>
		{

			switch(PortName){
    345a:	8a 81       	ldd	r24, Y+2	; 0x02
    345c:	28 2f       	mov	r18, r24
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	38 87       	std	Y+8, r19	; 0x08
    3462:	2f 83       	std	Y+7, r18	; 0x07
    3464:	8f 81       	ldd	r24, Y+7	; 0x07
    3466:	98 85       	ldd	r25, Y+8	; 0x08
    3468:	81 30       	cpi	r24, 0x01	; 1
    346a:	91 05       	cpc	r25, r1
    346c:	49 f1       	breq	.+82     	; 0x34c0 <DIO_SetPinValue+0x92>
    346e:	2f 81       	ldd	r18, Y+7	; 0x07
    3470:	38 85       	ldd	r19, Y+8	; 0x08
    3472:	22 30       	cpi	r18, 0x02	; 2
    3474:	31 05       	cpc	r19, r1
    3476:	2c f4       	brge	.+10     	; 0x3482 <DIO_SetPinValue+0x54>
    3478:	8f 81       	ldd	r24, Y+7	; 0x07
    347a:	98 85       	ldd	r25, Y+8	; 0x08
    347c:	00 97       	sbiw	r24, 0x00	; 0
    347e:	61 f0       	breq	.+24     	; 0x3498 <DIO_SetPinValue+0x6a>
    3480:	5a c0       	rjmp	.+180    	; 0x3536 <DIO_SetPinValue+0x108>
    3482:	2f 81       	ldd	r18, Y+7	; 0x07
    3484:	38 85       	ldd	r19, Y+8	; 0x08
    3486:	22 30       	cpi	r18, 0x02	; 2
    3488:	31 05       	cpc	r19, r1
    348a:	71 f1       	breq	.+92     	; 0x34e8 <DIO_SetPinValue+0xba>
    348c:	8f 81       	ldd	r24, Y+7	; 0x07
    348e:	98 85       	ldd	r25, Y+8	; 0x08
    3490:	83 30       	cpi	r24, 0x03	; 3
    3492:	91 05       	cpc	r25, r1
    3494:	e9 f1       	breq	.+122    	; 0x3510 <DIO_SetPinValue+0xe2>
    3496:	4f c0       	rjmp	.+158    	; 0x3536 <DIO_SetPinValue+0x108>

			case (PORT_A): SET_BIT(PORTA_REG,PinNum);break;
    3498:	ab e3       	ldi	r26, 0x3B	; 59
    349a:	b0 e0       	ldi	r27, 0x00	; 0
    349c:	eb e3       	ldi	r30, 0x3B	; 59
    349e:	f0 e0       	ldi	r31, 0x00	; 0
    34a0:	80 81       	ld	r24, Z
    34a2:	48 2f       	mov	r20, r24
    34a4:	8b 81       	ldd	r24, Y+3	; 0x03
    34a6:	28 2f       	mov	r18, r24
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	02 2e       	mov	r0, r18
    34b0:	02 c0       	rjmp	.+4      	; 0x34b6 <DIO_SetPinValue+0x88>
    34b2:	88 0f       	add	r24, r24
    34b4:	99 1f       	adc	r25, r25
    34b6:	0a 94       	dec	r0
    34b8:	e2 f7       	brpl	.-8      	; 0x34b2 <DIO_SetPinValue+0x84>
    34ba:	84 2b       	or	r24, r20
    34bc:	8c 93       	st	X, r24
    34be:	3b c0       	rjmp	.+118    	; 0x3536 <DIO_SetPinValue+0x108>
			case (PORT_B): SET_BIT(PORTB_REG,PinNum);;break;
    34c0:	a8 e3       	ldi	r26, 0x38	; 56
    34c2:	b0 e0       	ldi	r27, 0x00	; 0
    34c4:	e8 e3       	ldi	r30, 0x38	; 56
    34c6:	f0 e0       	ldi	r31, 0x00	; 0
    34c8:	80 81       	ld	r24, Z
    34ca:	48 2f       	mov	r20, r24
    34cc:	8b 81       	ldd	r24, Y+3	; 0x03
    34ce:	28 2f       	mov	r18, r24
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	02 2e       	mov	r0, r18
    34d8:	02 c0       	rjmp	.+4      	; 0x34de <DIO_SetPinValue+0xb0>
    34da:	88 0f       	add	r24, r24
    34dc:	99 1f       	adc	r25, r25
    34de:	0a 94       	dec	r0
    34e0:	e2 f7       	brpl	.-8      	; 0x34da <DIO_SetPinValue+0xac>
    34e2:	84 2b       	or	r24, r20
    34e4:	8c 93       	st	X, r24
    34e6:	27 c0       	rjmp	.+78     	; 0x3536 <DIO_SetPinValue+0x108>
			case (PORT_C): SET_BIT(PORTC_REG,PinNum);break;
    34e8:	a5 e3       	ldi	r26, 0x35	; 53
    34ea:	b0 e0       	ldi	r27, 0x00	; 0
    34ec:	e5 e3       	ldi	r30, 0x35	; 53
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	80 81       	ld	r24, Z
    34f2:	48 2f       	mov	r20, r24
    34f4:	8b 81       	ldd	r24, Y+3	; 0x03
    34f6:	28 2f       	mov	r18, r24
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	02 2e       	mov	r0, r18
    3500:	02 c0       	rjmp	.+4      	; 0x3506 <DIO_SetPinValue+0xd8>
    3502:	88 0f       	add	r24, r24
    3504:	99 1f       	adc	r25, r25
    3506:	0a 94       	dec	r0
    3508:	e2 f7       	brpl	.-8      	; 0x3502 <DIO_SetPinValue+0xd4>
    350a:	84 2b       	or	r24, r20
    350c:	8c 93       	st	X, r24
    350e:	13 c0       	rjmp	.+38     	; 0x3536 <DIO_SetPinValue+0x108>
			case (PORT_D): SET_BIT(PORTD_REG,PinNum);break;
    3510:	a2 e3       	ldi	r26, 0x32	; 50
    3512:	b0 e0       	ldi	r27, 0x00	; 0
    3514:	e2 e3       	ldi	r30, 0x32	; 50
    3516:	f0 e0       	ldi	r31, 0x00	; 0
    3518:	80 81       	ld	r24, Z
    351a:	48 2f       	mov	r20, r24
    351c:	8b 81       	ldd	r24, Y+3	; 0x03
    351e:	28 2f       	mov	r18, r24
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	02 2e       	mov	r0, r18
    3528:	02 c0       	rjmp	.+4      	; 0x352e <DIO_SetPinValue+0x100>
    352a:	88 0f       	add	r24, r24
    352c:	99 1f       	adc	r25, r25
    352e:	0a 94       	dec	r0
    3530:	e2 f7       	brpl	.-8      	; 0x352a <DIO_SetPinValue+0xfc>
    3532:	84 2b       	or	r24, r20
    3534:	8c 93       	st	X, r24
			default:break;

			}
		}
		if(Value== PIN_LOW)
    3536:	8c 81       	ldd	r24, Y+4	; 0x04
    3538:	88 23       	and	r24, r24
    353a:	09 f0       	breq	.+2      	; 0x353e <DIO_SetPinValue+0x110>
    353c:	77 c0       	rjmp	.+238    	; 0x362c <DIO_SetPinValue+0x1fe>
		{

			switch(PortName){
    353e:	8a 81       	ldd	r24, Y+2	; 0x02
    3540:	28 2f       	mov	r18, r24
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	3e 83       	std	Y+6, r19	; 0x06
    3546:	2d 83       	std	Y+5, r18	; 0x05
    3548:	8d 81       	ldd	r24, Y+5	; 0x05
    354a:	9e 81       	ldd	r25, Y+6	; 0x06
    354c:	81 30       	cpi	r24, 0x01	; 1
    354e:	91 05       	cpc	r25, r1
    3550:	59 f1       	breq	.+86     	; 0x35a8 <DIO_SetPinValue+0x17a>
    3552:	2d 81       	ldd	r18, Y+5	; 0x05
    3554:	3e 81       	ldd	r19, Y+6	; 0x06
    3556:	22 30       	cpi	r18, 0x02	; 2
    3558:	31 05       	cpc	r19, r1
    355a:	2c f4       	brge	.+10     	; 0x3566 <DIO_SetPinValue+0x138>
    355c:	8d 81       	ldd	r24, Y+5	; 0x05
    355e:	9e 81       	ldd	r25, Y+6	; 0x06
    3560:	00 97       	sbiw	r24, 0x00	; 0
    3562:	69 f0       	breq	.+26     	; 0x357e <DIO_SetPinValue+0x150>
    3564:	60 c0       	rjmp	.+192    	; 0x3626 <DIO_SetPinValue+0x1f8>
    3566:	2d 81       	ldd	r18, Y+5	; 0x05
    3568:	3e 81       	ldd	r19, Y+6	; 0x06
    356a:	22 30       	cpi	r18, 0x02	; 2
    356c:	31 05       	cpc	r19, r1
    356e:	89 f1       	breq	.+98     	; 0x35d2 <DIO_SetPinValue+0x1a4>
    3570:	8d 81       	ldd	r24, Y+5	; 0x05
    3572:	9e 81       	ldd	r25, Y+6	; 0x06
    3574:	83 30       	cpi	r24, 0x03	; 3
    3576:	91 05       	cpc	r25, r1
    3578:	09 f4       	brne	.+2      	; 0x357c <DIO_SetPinValue+0x14e>
    357a:	40 c0       	rjmp	.+128    	; 0x35fc <DIO_SetPinValue+0x1ce>
    357c:	54 c0       	rjmp	.+168    	; 0x3626 <DIO_SetPinValue+0x1f8>

			case (PORT_A): CLR_BIT(PORTA_REG,PinNum);break;
    357e:	ab e3       	ldi	r26, 0x3B	; 59
    3580:	b0 e0       	ldi	r27, 0x00	; 0
    3582:	eb e3       	ldi	r30, 0x3B	; 59
    3584:	f0 e0       	ldi	r31, 0x00	; 0
    3586:	80 81       	ld	r24, Z
    3588:	48 2f       	mov	r20, r24
    358a:	8b 81       	ldd	r24, Y+3	; 0x03
    358c:	28 2f       	mov	r18, r24
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	02 2e       	mov	r0, r18
    3596:	02 c0       	rjmp	.+4      	; 0x359c <DIO_SetPinValue+0x16e>
    3598:	88 0f       	add	r24, r24
    359a:	99 1f       	adc	r25, r25
    359c:	0a 94       	dec	r0
    359e:	e2 f7       	brpl	.-8      	; 0x3598 <DIO_SetPinValue+0x16a>
    35a0:	80 95       	com	r24
    35a2:	84 23       	and	r24, r20
    35a4:	8c 93       	st	X, r24
    35a6:	47 c0       	rjmp	.+142    	; 0x3636 <DIO_SetPinValue+0x208>
			case (PORT_B): CLR_BIT(PORTB_REG,PinNum);;break;
    35a8:	a8 e3       	ldi	r26, 0x38	; 56
    35aa:	b0 e0       	ldi	r27, 0x00	; 0
    35ac:	e8 e3       	ldi	r30, 0x38	; 56
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	80 81       	ld	r24, Z
    35b2:	48 2f       	mov	r20, r24
    35b4:	8b 81       	ldd	r24, Y+3	; 0x03
    35b6:	28 2f       	mov	r18, r24
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	02 2e       	mov	r0, r18
    35c0:	02 c0       	rjmp	.+4      	; 0x35c6 <DIO_SetPinValue+0x198>
    35c2:	88 0f       	add	r24, r24
    35c4:	99 1f       	adc	r25, r25
    35c6:	0a 94       	dec	r0
    35c8:	e2 f7       	brpl	.-8      	; 0x35c2 <DIO_SetPinValue+0x194>
    35ca:	80 95       	com	r24
    35cc:	84 23       	and	r24, r20
    35ce:	8c 93       	st	X, r24
    35d0:	32 c0       	rjmp	.+100    	; 0x3636 <DIO_SetPinValue+0x208>
			case (PORT_C): CLR_BIT(PORTC_REG,PinNum);break;
    35d2:	a5 e3       	ldi	r26, 0x35	; 53
    35d4:	b0 e0       	ldi	r27, 0x00	; 0
    35d6:	e5 e3       	ldi	r30, 0x35	; 53
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	80 81       	ld	r24, Z
    35dc:	48 2f       	mov	r20, r24
    35de:	8b 81       	ldd	r24, Y+3	; 0x03
    35e0:	28 2f       	mov	r18, r24
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	81 e0       	ldi	r24, 0x01	; 1
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	02 2e       	mov	r0, r18
    35ea:	02 c0       	rjmp	.+4      	; 0x35f0 <DIO_SetPinValue+0x1c2>
    35ec:	88 0f       	add	r24, r24
    35ee:	99 1f       	adc	r25, r25
    35f0:	0a 94       	dec	r0
    35f2:	e2 f7       	brpl	.-8      	; 0x35ec <DIO_SetPinValue+0x1be>
    35f4:	80 95       	com	r24
    35f6:	84 23       	and	r24, r20
    35f8:	8c 93       	st	X, r24
    35fa:	1d c0       	rjmp	.+58     	; 0x3636 <DIO_SetPinValue+0x208>
			case (PORT_D): CLR_BIT(PORTD_REG,PinNum);break;
    35fc:	a2 e3       	ldi	r26, 0x32	; 50
    35fe:	b0 e0       	ldi	r27, 0x00	; 0
    3600:	e2 e3       	ldi	r30, 0x32	; 50
    3602:	f0 e0       	ldi	r31, 0x00	; 0
    3604:	80 81       	ld	r24, Z
    3606:	48 2f       	mov	r20, r24
    3608:	8b 81       	ldd	r24, Y+3	; 0x03
    360a:	28 2f       	mov	r18, r24
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	02 2e       	mov	r0, r18
    3614:	02 c0       	rjmp	.+4      	; 0x361a <DIO_SetPinValue+0x1ec>
    3616:	88 0f       	add	r24, r24
    3618:	99 1f       	adc	r25, r25
    361a:	0a 94       	dec	r0
    361c:	e2 f7       	brpl	.-8      	; 0x3616 <DIO_SetPinValue+0x1e8>
    361e:	80 95       	com	r24
    3620:	84 23       	and	r24, r20
    3622:	8c 93       	st	X, r24
    3624:	08 c0       	rjmp	.+16     	; 0x3636 <DIO_SetPinValue+0x208>
			default:ErrorState=NOK;break;
    3626:	81 e0       	ldi	r24, 0x01	; 1
    3628:	89 83       	std	Y+1, r24	; 0x01
    362a:	05 c0       	rjmp	.+10     	; 0x3636 <DIO_SetPinValue+0x208>

			}
		}
		else
		{
			ErrorState =NOK;
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	89 83       	std	Y+1, r24	; 0x01
    3630:	02 c0       	rjmp	.+4      	; 0x3636 <DIO_SetPinValue+0x208>
		}

	}
	else
	{
		ErrorState=NOK;
    3632:	81 e0       	ldi	r24, 0x01	; 1
    3634:	89 83       	std	Y+1, r24	; 0x01
	}



	return ErrorState;
    3636:	89 81       	ldd	r24, Y+1	; 0x01
}
    3638:	28 96       	adiw	r28, 0x08	; 8
    363a:	0f b6       	in	r0, 0x3f	; 63
    363c:	f8 94       	cli
    363e:	de bf       	out	0x3e, r29	; 62
    3640:	0f be       	out	0x3f, r0	; 63
    3642:	cd bf       	out	0x3d, r28	; 61
    3644:	cf 91       	pop	r28
    3646:	df 91       	pop	r29
    3648:	08 95       	ret

0000364a <DIO_ReadPin>:
u8int_t DIO_ReadPin (u8int_t PortName, u8int_t PinNum, u8int_t *Value)
{
    364a:	df 93       	push	r29
    364c:	cf 93       	push	r28
    364e:	cd b7       	in	r28, 0x3d	; 61
    3650:	de b7       	in	r29, 0x3e	; 62
    3652:	27 97       	sbiw	r28, 0x07	; 7
    3654:	0f b6       	in	r0, 0x3f	; 63
    3656:	f8 94       	cli
    3658:	de bf       	out	0x3e, r29	; 62
    365a:	0f be       	out	0x3f, r0	; 63
    365c:	cd bf       	out	0x3d, r28	; 61
    365e:	8a 83       	std	Y+2, r24	; 0x02
    3660:	6b 83       	std	Y+3, r22	; 0x03
    3662:	5d 83       	std	Y+5, r21	; 0x05
    3664:	4c 83       	std	Y+4, r20	; 0x04
	u8int_t ErrorState=OK;
    3666:	19 82       	std	Y+1, r1	; 0x01

	if(PinNum>=0 && PinNum<=7)
    3668:	8b 81       	ldd	r24, Y+3	; 0x03
    366a:	88 30       	cpi	r24, 0x08	; 8
    366c:	08 f0       	brcs	.+2      	; 0x3670 <DIO_ReadPin+0x26>
    366e:	74 c0       	rjmp	.+232    	; 0x3758 <DIO_ReadPin+0x10e>
	{
		switch(PortName){
    3670:	8a 81       	ldd	r24, Y+2	; 0x02
    3672:	28 2f       	mov	r18, r24
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	3f 83       	std	Y+7, r19	; 0x07
    3678:	2e 83       	std	Y+6, r18	; 0x06
    367a:	4e 81       	ldd	r20, Y+6	; 0x06
    367c:	5f 81       	ldd	r21, Y+7	; 0x07
    367e:	41 30       	cpi	r20, 0x01	; 1
    3680:	51 05       	cpc	r21, r1
    3682:	59 f1       	breq	.+86     	; 0x36da <DIO_ReadPin+0x90>
    3684:	8e 81       	ldd	r24, Y+6	; 0x06
    3686:	9f 81       	ldd	r25, Y+7	; 0x07
    3688:	82 30       	cpi	r24, 0x02	; 2
    368a:	91 05       	cpc	r25, r1
    368c:	34 f4       	brge	.+12     	; 0x369a <DIO_ReadPin+0x50>
    368e:	2e 81       	ldd	r18, Y+6	; 0x06
    3690:	3f 81       	ldd	r19, Y+7	; 0x07
    3692:	21 15       	cp	r18, r1
    3694:	31 05       	cpc	r19, r1
    3696:	69 f0       	breq	.+26     	; 0x36b2 <DIO_ReadPin+0x68>
    3698:	5c c0       	rjmp	.+184    	; 0x3752 <DIO_ReadPin+0x108>
    369a:	4e 81       	ldd	r20, Y+6	; 0x06
    369c:	5f 81       	ldd	r21, Y+7	; 0x07
    369e:	42 30       	cpi	r20, 0x02	; 2
    36a0:	51 05       	cpc	r21, r1
    36a2:	79 f1       	breq	.+94     	; 0x3702 <DIO_ReadPin+0xb8>
    36a4:	8e 81       	ldd	r24, Y+6	; 0x06
    36a6:	9f 81       	ldd	r25, Y+7	; 0x07
    36a8:	83 30       	cpi	r24, 0x03	; 3
    36aa:	91 05       	cpc	r25, r1
    36ac:	09 f4       	brne	.+2      	; 0x36b0 <DIO_ReadPin+0x66>
    36ae:	3d c0       	rjmp	.+122    	; 0x372a <DIO_ReadPin+0xe0>
    36b0:	50 c0       	rjmp	.+160    	; 0x3752 <DIO_ReadPin+0x108>

		case PORT_A:    *Value=GET_BIT(PINA_REG,PinNum);break;
    36b2:	e9 e3       	ldi	r30, 0x39	; 57
    36b4:	f0 e0       	ldi	r31, 0x00	; 0
    36b6:	80 81       	ld	r24, Z
    36b8:	28 2f       	mov	r18, r24
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	8b 81       	ldd	r24, Y+3	; 0x03
    36be:	88 2f       	mov	r24, r24
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	a9 01       	movw	r20, r18
    36c4:	02 c0       	rjmp	.+4      	; 0x36ca <DIO_ReadPin+0x80>
    36c6:	55 95       	asr	r21
    36c8:	47 95       	ror	r20
    36ca:	8a 95       	dec	r24
    36cc:	e2 f7       	brpl	.-8      	; 0x36c6 <DIO_ReadPin+0x7c>
    36ce:	ca 01       	movw	r24, r20
    36d0:	81 70       	andi	r24, 0x01	; 1
    36d2:	ec 81       	ldd	r30, Y+4	; 0x04
    36d4:	fd 81       	ldd	r31, Y+5	; 0x05
    36d6:	80 83       	st	Z, r24
    36d8:	41 c0       	rjmp	.+130    	; 0x375c <DIO_ReadPin+0x112>
		case PORT_B:    *Value=GET_BIT(PINB_REG,PinNum);break;
    36da:	e6 e3       	ldi	r30, 0x36	; 54
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	80 81       	ld	r24, Z
    36e0:	28 2f       	mov	r18, r24
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	8b 81       	ldd	r24, Y+3	; 0x03
    36e6:	88 2f       	mov	r24, r24
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	a9 01       	movw	r20, r18
    36ec:	02 c0       	rjmp	.+4      	; 0x36f2 <DIO_ReadPin+0xa8>
    36ee:	55 95       	asr	r21
    36f0:	47 95       	ror	r20
    36f2:	8a 95       	dec	r24
    36f4:	e2 f7       	brpl	.-8      	; 0x36ee <DIO_ReadPin+0xa4>
    36f6:	ca 01       	movw	r24, r20
    36f8:	81 70       	andi	r24, 0x01	; 1
    36fa:	ec 81       	ldd	r30, Y+4	; 0x04
    36fc:	fd 81       	ldd	r31, Y+5	; 0x05
    36fe:	80 83       	st	Z, r24
    3700:	2d c0       	rjmp	.+90     	; 0x375c <DIO_ReadPin+0x112>
		case PORT_C:    *Value=GET_BIT(PINC_REG,PinNum);break;
    3702:	e3 e3       	ldi	r30, 0x33	; 51
    3704:	f0 e0       	ldi	r31, 0x00	; 0
    3706:	80 81       	ld	r24, Z
    3708:	28 2f       	mov	r18, r24
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	8b 81       	ldd	r24, Y+3	; 0x03
    370e:	88 2f       	mov	r24, r24
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	a9 01       	movw	r20, r18
    3714:	02 c0       	rjmp	.+4      	; 0x371a <DIO_ReadPin+0xd0>
    3716:	55 95       	asr	r21
    3718:	47 95       	ror	r20
    371a:	8a 95       	dec	r24
    371c:	e2 f7       	brpl	.-8      	; 0x3716 <DIO_ReadPin+0xcc>
    371e:	ca 01       	movw	r24, r20
    3720:	81 70       	andi	r24, 0x01	; 1
    3722:	ec 81       	ldd	r30, Y+4	; 0x04
    3724:	fd 81       	ldd	r31, Y+5	; 0x05
    3726:	80 83       	st	Z, r24
    3728:	19 c0       	rjmp	.+50     	; 0x375c <DIO_ReadPin+0x112>
		case PORT_D:    *Value=GET_BIT(PIND_REG,PinNum);break;
    372a:	e0 e3       	ldi	r30, 0x30	; 48
    372c:	f0 e0       	ldi	r31, 0x00	; 0
    372e:	80 81       	ld	r24, Z
    3730:	28 2f       	mov	r18, r24
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	8b 81       	ldd	r24, Y+3	; 0x03
    3736:	88 2f       	mov	r24, r24
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	a9 01       	movw	r20, r18
    373c:	02 c0       	rjmp	.+4      	; 0x3742 <DIO_ReadPin+0xf8>
    373e:	55 95       	asr	r21
    3740:	47 95       	ror	r20
    3742:	8a 95       	dec	r24
    3744:	e2 f7       	brpl	.-8      	; 0x373e <DIO_ReadPin+0xf4>
    3746:	ca 01       	movw	r24, r20
    3748:	81 70       	andi	r24, 0x01	; 1
    374a:	ec 81       	ldd	r30, Y+4	; 0x04
    374c:	fd 81       	ldd	r31, Y+5	; 0x05
    374e:	80 83       	st	Z, r24
    3750:	05 c0       	rjmp	.+10     	; 0x375c <DIO_ReadPin+0x112>
		default:ErrorState=NOK;break;
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	89 83       	std	Y+1, r24	; 0x01
    3756:	02 c0       	rjmp	.+4      	; 0x375c <DIO_ReadPin+0x112>

		}
	}
	else
	{
		ErrorState=NOK;
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    375c:	89 81       	ldd	r24, Y+1	; 0x01
}
    375e:	27 96       	adiw	r28, 0x07	; 7
    3760:	0f b6       	in	r0, 0x3f	; 63
    3762:	f8 94       	cli
    3764:	de bf       	out	0x3e, r29	; 62
    3766:	0f be       	out	0x3f, r0	; 63
    3768:	cd bf       	out	0x3d, r28	; 61
    376a:	cf 91       	pop	r28
    376c:	df 91       	pop	r29
    376e:	08 95       	ret

00003770 <TogglePin>:

u8int_t TogglePin(u8int_t PortId,u8int_t PinId)
{
    3770:	df 93       	push	r29
    3772:	cf 93       	push	r28
    3774:	00 d0       	rcall	.+0      	; 0x3776 <TogglePin+0x6>
    3776:	00 d0       	rcall	.+0      	; 0x3778 <TogglePin+0x8>
    3778:	0f 92       	push	r0
    377a:	cd b7       	in	r28, 0x3d	; 61
    377c:	de b7       	in	r29, 0x3e	; 62
    377e:	8a 83       	std	Y+2, r24	; 0x02
    3780:	6b 83       	std	Y+3, r22	; 0x03
	u8int_t ErrorState=OK;
    3782:	19 82       	std	Y+1, r1	; 0x01
	switch(PortId){
    3784:	8a 81       	ldd	r24, Y+2	; 0x02
    3786:	28 2f       	mov	r18, r24
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	3d 83       	std	Y+5, r19	; 0x05
    378c:	2c 83       	std	Y+4, r18	; 0x04
    378e:	8c 81       	ldd	r24, Y+4	; 0x04
    3790:	9d 81       	ldd	r25, Y+5	; 0x05
    3792:	81 30       	cpi	r24, 0x01	; 1
    3794:	91 05       	cpc	r25, r1
    3796:	09 f4       	brne	.+2      	; 0x379a <TogglePin+0x2a>
    3798:	3d c0       	rjmp	.+122    	; 0x3814 <TogglePin+0xa4>
    379a:	2c 81       	ldd	r18, Y+4	; 0x04
    379c:	3d 81       	ldd	r19, Y+5	; 0x05
    379e:	22 30       	cpi	r18, 0x02	; 2
    37a0:	31 05       	cpc	r19, r1
    37a2:	2c f4       	brge	.+10     	; 0x37ae <TogglePin+0x3e>
    37a4:	8c 81       	ldd	r24, Y+4	; 0x04
    37a6:	9d 81       	ldd	r25, Y+5	; 0x05
    37a8:	00 97       	sbiw	r24, 0x00	; 0
    37aa:	71 f0       	breq	.+28     	; 0x37c8 <TogglePin+0x58>
    37ac:	a5 c0       	rjmp	.+330    	; 0x38f8 <TogglePin+0x188>
    37ae:	2c 81       	ldd	r18, Y+4	; 0x04
    37b0:	3d 81       	ldd	r19, Y+5	; 0x05
    37b2:	22 30       	cpi	r18, 0x02	; 2
    37b4:	31 05       	cpc	r19, r1
    37b6:	09 f4       	brne	.+2      	; 0x37ba <TogglePin+0x4a>
    37b8:	53 c0       	rjmp	.+166    	; 0x3860 <TogglePin+0xf0>
    37ba:	8c 81       	ldd	r24, Y+4	; 0x04
    37bc:	9d 81       	ldd	r25, Y+5	; 0x05
    37be:	83 30       	cpi	r24, 0x03	; 3
    37c0:	91 05       	cpc	r25, r1
    37c2:	09 f4       	brne	.+2      	; 0x37c6 <TogglePin+0x56>
    37c4:	73 c0       	rjmp	.+230    	; 0x38ac <TogglePin+0x13c>
    37c6:	98 c0       	rjmp	.+304    	; 0x38f8 <TogglePin+0x188>
	case PORT_A: SET_BIT(DDRA_REG,PinId);TOG_BIT(PORTA_REG,PinId);break;
    37c8:	aa e3       	ldi	r26, 0x3A	; 58
    37ca:	b0 e0       	ldi	r27, 0x00	; 0
    37cc:	ea e3       	ldi	r30, 0x3A	; 58
    37ce:	f0 e0       	ldi	r31, 0x00	; 0
    37d0:	80 81       	ld	r24, Z
    37d2:	48 2f       	mov	r20, r24
    37d4:	8b 81       	ldd	r24, Y+3	; 0x03
    37d6:	28 2f       	mov	r18, r24
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	02 c0       	rjmp	.+4      	; 0x37e4 <TogglePin+0x74>
    37e0:	88 0f       	add	r24, r24
    37e2:	99 1f       	adc	r25, r25
    37e4:	2a 95       	dec	r18
    37e6:	e2 f7       	brpl	.-8      	; 0x37e0 <TogglePin+0x70>
    37e8:	84 2b       	or	r24, r20
    37ea:	8c 93       	st	X, r24
    37ec:	ab e3       	ldi	r26, 0x3B	; 59
    37ee:	b0 e0       	ldi	r27, 0x00	; 0
    37f0:	eb e3       	ldi	r30, 0x3B	; 59
    37f2:	f0 e0       	ldi	r31, 0x00	; 0
    37f4:	80 81       	ld	r24, Z
    37f6:	48 2f       	mov	r20, r24
    37f8:	8b 81       	ldd	r24, Y+3	; 0x03
    37fa:	28 2f       	mov	r18, r24
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	02 2e       	mov	r0, r18
    3804:	02 c0       	rjmp	.+4      	; 0x380a <TogglePin+0x9a>
    3806:	88 0f       	add	r24, r24
    3808:	99 1f       	adc	r25, r25
    380a:	0a 94       	dec	r0
    380c:	e2 f7       	brpl	.-8      	; 0x3806 <TogglePin+0x96>
    380e:	84 27       	eor	r24, r20
    3810:	8c 93       	st	X, r24
    3812:	74 c0       	rjmp	.+232    	; 0x38fc <TogglePin+0x18c>
	case PORT_B: SET_BIT(DDRB_REG,PinId);TOG_BIT(PORTB_REG,PinId);break;
    3814:	a7 e3       	ldi	r26, 0x37	; 55
    3816:	b0 e0       	ldi	r27, 0x00	; 0
    3818:	e7 e3       	ldi	r30, 0x37	; 55
    381a:	f0 e0       	ldi	r31, 0x00	; 0
    381c:	80 81       	ld	r24, Z
    381e:	48 2f       	mov	r20, r24
    3820:	8b 81       	ldd	r24, Y+3	; 0x03
    3822:	28 2f       	mov	r18, r24
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	81 e0       	ldi	r24, 0x01	; 1
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	02 c0       	rjmp	.+4      	; 0x3830 <TogglePin+0xc0>
    382c:	88 0f       	add	r24, r24
    382e:	99 1f       	adc	r25, r25
    3830:	2a 95       	dec	r18
    3832:	e2 f7       	brpl	.-8      	; 0x382c <TogglePin+0xbc>
    3834:	84 2b       	or	r24, r20
    3836:	8c 93       	st	X, r24
    3838:	a8 e3       	ldi	r26, 0x38	; 56
    383a:	b0 e0       	ldi	r27, 0x00	; 0
    383c:	e8 e3       	ldi	r30, 0x38	; 56
    383e:	f0 e0       	ldi	r31, 0x00	; 0
    3840:	80 81       	ld	r24, Z
    3842:	48 2f       	mov	r20, r24
    3844:	8b 81       	ldd	r24, Y+3	; 0x03
    3846:	28 2f       	mov	r18, r24
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	02 2e       	mov	r0, r18
    3850:	02 c0       	rjmp	.+4      	; 0x3856 <TogglePin+0xe6>
    3852:	88 0f       	add	r24, r24
    3854:	99 1f       	adc	r25, r25
    3856:	0a 94       	dec	r0
    3858:	e2 f7       	brpl	.-8      	; 0x3852 <TogglePin+0xe2>
    385a:	84 27       	eor	r24, r20
    385c:	8c 93       	st	X, r24
    385e:	4e c0       	rjmp	.+156    	; 0x38fc <TogglePin+0x18c>
	case PORT_C: SET_BIT(DDRC_REG,PinId);TOG_BIT(PORTC_REG,PinId);break;
    3860:	a4 e3       	ldi	r26, 0x34	; 52
    3862:	b0 e0       	ldi	r27, 0x00	; 0
    3864:	e4 e3       	ldi	r30, 0x34	; 52
    3866:	f0 e0       	ldi	r31, 0x00	; 0
    3868:	80 81       	ld	r24, Z
    386a:	48 2f       	mov	r20, r24
    386c:	8b 81       	ldd	r24, Y+3	; 0x03
    386e:	28 2f       	mov	r18, r24
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	02 c0       	rjmp	.+4      	; 0x387c <TogglePin+0x10c>
    3878:	88 0f       	add	r24, r24
    387a:	99 1f       	adc	r25, r25
    387c:	2a 95       	dec	r18
    387e:	e2 f7       	brpl	.-8      	; 0x3878 <TogglePin+0x108>
    3880:	84 2b       	or	r24, r20
    3882:	8c 93       	st	X, r24
    3884:	a5 e3       	ldi	r26, 0x35	; 53
    3886:	b0 e0       	ldi	r27, 0x00	; 0
    3888:	e5 e3       	ldi	r30, 0x35	; 53
    388a:	f0 e0       	ldi	r31, 0x00	; 0
    388c:	80 81       	ld	r24, Z
    388e:	48 2f       	mov	r20, r24
    3890:	8b 81       	ldd	r24, Y+3	; 0x03
    3892:	28 2f       	mov	r18, r24
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	81 e0       	ldi	r24, 0x01	; 1
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	02 2e       	mov	r0, r18
    389c:	02 c0       	rjmp	.+4      	; 0x38a2 <TogglePin+0x132>
    389e:	88 0f       	add	r24, r24
    38a0:	99 1f       	adc	r25, r25
    38a2:	0a 94       	dec	r0
    38a4:	e2 f7       	brpl	.-8      	; 0x389e <TogglePin+0x12e>
    38a6:	84 27       	eor	r24, r20
    38a8:	8c 93       	st	X, r24
    38aa:	28 c0       	rjmp	.+80     	; 0x38fc <TogglePin+0x18c>
	case PORT_D: SET_BIT(DDRD_REG,PinId);TOG_BIT(PORTD_REG,PinId);break;
    38ac:	a1 e3       	ldi	r26, 0x31	; 49
    38ae:	b0 e0       	ldi	r27, 0x00	; 0
    38b0:	e1 e3       	ldi	r30, 0x31	; 49
    38b2:	f0 e0       	ldi	r31, 0x00	; 0
    38b4:	80 81       	ld	r24, Z
    38b6:	48 2f       	mov	r20, r24
    38b8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ba:	28 2f       	mov	r18, r24
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	81 e0       	ldi	r24, 0x01	; 1
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	02 c0       	rjmp	.+4      	; 0x38c8 <TogglePin+0x158>
    38c4:	88 0f       	add	r24, r24
    38c6:	99 1f       	adc	r25, r25
    38c8:	2a 95       	dec	r18
    38ca:	e2 f7       	brpl	.-8      	; 0x38c4 <TogglePin+0x154>
    38cc:	84 2b       	or	r24, r20
    38ce:	8c 93       	st	X, r24
    38d0:	a2 e3       	ldi	r26, 0x32	; 50
    38d2:	b0 e0       	ldi	r27, 0x00	; 0
    38d4:	e2 e3       	ldi	r30, 0x32	; 50
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	80 81       	ld	r24, Z
    38da:	48 2f       	mov	r20, r24
    38dc:	8b 81       	ldd	r24, Y+3	; 0x03
    38de:	28 2f       	mov	r18, r24
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	02 2e       	mov	r0, r18
    38e8:	02 c0       	rjmp	.+4      	; 0x38ee <TogglePin+0x17e>
    38ea:	88 0f       	add	r24, r24
    38ec:	99 1f       	adc	r25, r25
    38ee:	0a 94       	dec	r0
    38f0:	e2 f7       	brpl	.-8      	; 0x38ea <TogglePin+0x17a>
    38f2:	84 27       	eor	r24, r20
    38f4:	8c 93       	st	X, r24
    38f6:	02 c0       	rjmp	.+4      	; 0x38fc <TogglePin+0x18c>
	default:ErrorState=NOK;break;
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	89 83       	std	Y+1, r24	; 0x01

	}
	return ErrorState;
    38fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    38fe:	0f 90       	pop	r0
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	cf 91       	pop	r28
    390a:	df 91       	pop	r29
    390c:	08 95       	ret

0000390e <DIO_SetPortDirection>:

u8int_t DIO_SetPortDirection(u8int_t PortId, u8int_t PortDir)
{
    390e:	df 93       	push	r29
    3910:	cf 93       	push	r28
    3912:	cd b7       	in	r28, 0x3d	; 61
    3914:	de b7       	in	r29, 0x3e	; 62
    3916:	27 97       	sbiw	r28, 0x07	; 7
    3918:	0f b6       	in	r0, 0x3f	; 63
    391a:	f8 94       	cli
    391c:	de bf       	out	0x3e, r29	; 62
    391e:	0f be       	out	0x3f, r0	; 63
    3920:	cd bf       	out	0x3d, r28	; 61
    3922:	8a 83       	std	Y+2, r24	; 0x02
    3924:	6b 83       	std	Y+3, r22	; 0x03
	u8int_t ErrState=OK;
    3926:	19 82       	std	Y+1, r1	; 0x01
	if(PortDir == PORT_IN)
    3928:	8b 81       	ldd	r24, Y+3	; 0x03
    392a:	88 23       	and	r24, r24
    392c:	91 f5       	brne	.+100    	; 0x3992 <DIO_SetPortDirection+0x84>
	{
		switch(PortId){
    392e:	8a 81       	ldd	r24, Y+2	; 0x02
    3930:	28 2f       	mov	r18, r24
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	3f 83       	std	Y+7, r19	; 0x07
    3936:	2e 83       	std	Y+6, r18	; 0x06
    3938:	8e 81       	ldd	r24, Y+6	; 0x06
    393a:	9f 81       	ldd	r25, Y+7	; 0x07
    393c:	81 30       	cpi	r24, 0x01	; 1
    393e:	91 05       	cpc	r25, r1
    3940:	c9 f0       	breq	.+50     	; 0x3974 <DIO_SetPortDirection+0x66>
    3942:	2e 81       	ldd	r18, Y+6	; 0x06
    3944:	3f 81       	ldd	r19, Y+7	; 0x07
    3946:	22 30       	cpi	r18, 0x02	; 2
    3948:	31 05       	cpc	r19, r1
    394a:	2c f4       	brge	.+10     	; 0x3956 <DIO_SetPortDirection+0x48>
    394c:	8e 81       	ldd	r24, Y+6	; 0x06
    394e:	9f 81       	ldd	r25, Y+7	; 0x07
    3950:	00 97       	sbiw	r24, 0x00	; 0
    3952:	61 f0       	breq	.+24     	; 0x396c <DIO_SetPortDirection+0x5e>
    3954:	1b c0       	rjmp	.+54     	; 0x398c <DIO_SetPortDirection+0x7e>
    3956:	2e 81       	ldd	r18, Y+6	; 0x06
    3958:	3f 81       	ldd	r19, Y+7	; 0x07
    395a:	22 30       	cpi	r18, 0x02	; 2
    395c:	31 05       	cpc	r19, r1
    395e:	71 f0       	breq	.+28     	; 0x397c <DIO_SetPortDirection+0x6e>
    3960:	8e 81       	ldd	r24, Y+6	; 0x06
    3962:	9f 81       	ldd	r25, Y+7	; 0x07
    3964:	83 30       	cpi	r24, 0x03	; 3
    3966:	91 05       	cpc	r25, r1
    3968:	69 f0       	breq	.+26     	; 0x3984 <DIO_SetPortDirection+0x76>
    396a:	10 c0       	rjmp	.+32     	; 0x398c <DIO_SetPortDirection+0x7e>
		case PORT_A: DDRA_REG=PORT_IN;break;
    396c:	ea e3       	ldi	r30, 0x3A	; 58
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	10 82       	st	Z, r1
    3972:	4a c0       	rjmp	.+148    	; 0x3a08 <DIO_SetPortDirection+0xfa>
		case PORT_B: DDRA_REG=PORT_IN;break;
    3974:	ea e3       	ldi	r30, 0x3A	; 58
    3976:	f0 e0       	ldi	r31, 0x00	; 0
    3978:	10 82       	st	Z, r1
    397a:	46 c0       	rjmp	.+140    	; 0x3a08 <DIO_SetPortDirection+0xfa>
		case PORT_C: DDRA_REG=PORT_IN;break;
    397c:	ea e3       	ldi	r30, 0x3A	; 58
    397e:	f0 e0       	ldi	r31, 0x00	; 0
    3980:	10 82       	st	Z, r1
    3982:	42 c0       	rjmp	.+132    	; 0x3a08 <DIO_SetPortDirection+0xfa>
		case PORT_D: DDRA_REG=PORT_IN;break;
    3984:	ea e3       	ldi	r30, 0x3A	; 58
    3986:	f0 e0       	ldi	r31, 0x00	; 0
    3988:	10 82       	st	Z, r1
    398a:	3e c0       	rjmp	.+124    	; 0x3a08 <DIO_SetPortDirection+0xfa>
		default:ErrState=NOK;break;
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	89 83       	std	Y+1, r24	; 0x01
    3990:	3b c0       	rjmp	.+118    	; 0x3a08 <DIO_SetPortDirection+0xfa>

		}
	}
	else if (PortDir == PORT_OUT)
    3992:	8b 81       	ldd	r24, Y+3	; 0x03
    3994:	8f 3f       	cpi	r24, 0xFF	; 255
    3996:	b1 f5       	brne	.+108    	; 0x3a04 <DIO_SetPortDirection+0xf6>
	{
		switch(PortId){
    3998:	8a 81       	ldd	r24, Y+2	; 0x02
    399a:	28 2f       	mov	r18, r24
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	3d 83       	std	Y+5, r19	; 0x05
    39a0:	2c 83       	std	Y+4, r18	; 0x04
    39a2:	8c 81       	ldd	r24, Y+4	; 0x04
    39a4:	9d 81       	ldd	r25, Y+5	; 0x05
    39a6:	81 30       	cpi	r24, 0x01	; 1
    39a8:	91 05       	cpc	r25, r1
    39aa:	d1 f0       	breq	.+52     	; 0x39e0 <DIO_SetPortDirection+0xd2>
    39ac:	2c 81       	ldd	r18, Y+4	; 0x04
    39ae:	3d 81       	ldd	r19, Y+5	; 0x05
    39b0:	22 30       	cpi	r18, 0x02	; 2
    39b2:	31 05       	cpc	r19, r1
    39b4:	2c f4       	brge	.+10     	; 0x39c0 <DIO_SetPortDirection+0xb2>
    39b6:	8c 81       	ldd	r24, Y+4	; 0x04
    39b8:	9d 81       	ldd	r25, Y+5	; 0x05
    39ba:	00 97       	sbiw	r24, 0x00	; 0
    39bc:	61 f0       	breq	.+24     	; 0x39d6 <DIO_SetPortDirection+0xc8>
    39be:	1f c0       	rjmp	.+62     	; 0x39fe <DIO_SetPortDirection+0xf0>
    39c0:	2c 81       	ldd	r18, Y+4	; 0x04
    39c2:	3d 81       	ldd	r19, Y+5	; 0x05
    39c4:	22 30       	cpi	r18, 0x02	; 2
    39c6:	31 05       	cpc	r19, r1
    39c8:	81 f0       	breq	.+32     	; 0x39ea <DIO_SetPortDirection+0xdc>
    39ca:	8c 81       	ldd	r24, Y+4	; 0x04
    39cc:	9d 81       	ldd	r25, Y+5	; 0x05
    39ce:	83 30       	cpi	r24, 0x03	; 3
    39d0:	91 05       	cpc	r25, r1
    39d2:	81 f0       	breq	.+32     	; 0x39f4 <DIO_SetPortDirection+0xe6>
    39d4:	14 c0       	rjmp	.+40     	; 0x39fe <DIO_SetPortDirection+0xf0>
		case PORT_A: DDRA_REG=PORT_OUT;break;
    39d6:	ea e3       	ldi	r30, 0x3A	; 58
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	8f ef       	ldi	r24, 0xFF	; 255
    39dc:	80 83       	st	Z, r24
    39de:	14 c0       	rjmp	.+40     	; 0x3a08 <DIO_SetPortDirection+0xfa>
		case PORT_B: DDRA_REG=PORT_OUT;break;
    39e0:	ea e3       	ldi	r30, 0x3A	; 58
    39e2:	f0 e0       	ldi	r31, 0x00	; 0
    39e4:	8f ef       	ldi	r24, 0xFF	; 255
    39e6:	80 83       	st	Z, r24
    39e8:	0f c0       	rjmp	.+30     	; 0x3a08 <DIO_SetPortDirection+0xfa>
		case PORT_C: DDRA_REG=PORT_OUT;break;
    39ea:	ea e3       	ldi	r30, 0x3A	; 58
    39ec:	f0 e0       	ldi	r31, 0x00	; 0
    39ee:	8f ef       	ldi	r24, 0xFF	; 255
    39f0:	80 83       	st	Z, r24
    39f2:	0a c0       	rjmp	.+20     	; 0x3a08 <DIO_SetPortDirection+0xfa>
		case PORT_D: DDRA_REG=PORT_OUT;break;
    39f4:	ea e3       	ldi	r30, 0x3A	; 58
    39f6:	f0 e0       	ldi	r31, 0x00	; 0
    39f8:	8f ef       	ldi	r24, 0xFF	; 255
    39fa:	80 83       	st	Z, r24
    39fc:	05 c0       	rjmp	.+10     	; 0x3a08 <DIO_SetPortDirection+0xfa>
		default:ErrState=NOK;break;
    39fe:	81 e0       	ldi	r24, 0x01	; 1
    3a00:	89 83       	std	Y+1, r24	; 0x01
    3a02:	02 c0       	rjmp	.+4      	; 0x3a08 <DIO_SetPortDirection+0xfa>
		}
	}

	else
	{
		ErrState=NOK;
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrState;
    3a08:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a0a:	27 96       	adiw	r28, 0x07	; 7
    3a0c:	0f b6       	in	r0, 0x3f	; 63
    3a0e:	f8 94       	cli
    3a10:	de bf       	out	0x3e, r29	; 62
    3a12:	0f be       	out	0x3f, r0	; 63
    3a14:	cd bf       	out	0x3d, r28	; 61
    3a16:	cf 91       	pop	r28
    3a18:	df 91       	pop	r29
    3a1a:	08 95       	ret

00003a1c <DIO_SetPortValue>:
u8int_t DIO_SetPortValue(u8int_t PortId, u8int_t PortVal)
{
    3a1c:	df 93       	push	r29
    3a1e:	cf 93       	push	r28
    3a20:	cd b7       	in	r28, 0x3d	; 61
    3a22:	de b7       	in	r29, 0x3e	; 62
    3a24:	27 97       	sbiw	r28, 0x07	; 7
    3a26:	0f b6       	in	r0, 0x3f	; 63
    3a28:	f8 94       	cli
    3a2a:	de bf       	out	0x3e, r29	; 62
    3a2c:	0f be       	out	0x3f, r0	; 63
    3a2e:	cd bf       	out	0x3d, r28	; 61
    3a30:	8a 83       	std	Y+2, r24	; 0x02
    3a32:	6b 83       	std	Y+3, r22	; 0x03
	u8int_t ErrorState=OK;
    3a34:	19 82       	std	Y+1, r1	; 0x01
	if(PortVal == PORT_HIGH)
    3a36:	8b 81       	ldd	r24, Y+3	; 0x03
    3a38:	8f 3f       	cpi	r24, 0xFF	; 255
    3a3a:	b1 f5       	brne	.+108    	; 0x3aa8 <DIO_SetPortValue+0x8c>
	{
		switch(PortId){
    3a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a3e:	28 2f       	mov	r18, r24
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	3f 83       	std	Y+7, r19	; 0x07
    3a44:	2e 83       	std	Y+6, r18	; 0x06
    3a46:	8e 81       	ldd	r24, Y+6	; 0x06
    3a48:	9f 81       	ldd	r25, Y+7	; 0x07
    3a4a:	81 30       	cpi	r24, 0x01	; 1
    3a4c:	91 05       	cpc	r25, r1
    3a4e:	d1 f0       	breq	.+52     	; 0x3a84 <DIO_SetPortValue+0x68>
    3a50:	2e 81       	ldd	r18, Y+6	; 0x06
    3a52:	3f 81       	ldd	r19, Y+7	; 0x07
    3a54:	22 30       	cpi	r18, 0x02	; 2
    3a56:	31 05       	cpc	r19, r1
    3a58:	2c f4       	brge	.+10     	; 0x3a64 <DIO_SetPortValue+0x48>
    3a5a:	8e 81       	ldd	r24, Y+6	; 0x06
    3a5c:	9f 81       	ldd	r25, Y+7	; 0x07
    3a5e:	00 97       	sbiw	r24, 0x00	; 0
    3a60:	61 f0       	breq	.+24     	; 0x3a7a <DIO_SetPortValue+0x5e>
    3a62:	1f c0       	rjmp	.+62     	; 0x3aa2 <DIO_SetPortValue+0x86>
    3a64:	2e 81       	ldd	r18, Y+6	; 0x06
    3a66:	3f 81       	ldd	r19, Y+7	; 0x07
    3a68:	22 30       	cpi	r18, 0x02	; 2
    3a6a:	31 05       	cpc	r19, r1
    3a6c:	81 f0       	breq	.+32     	; 0x3a8e <DIO_SetPortValue+0x72>
    3a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    3a70:	9f 81       	ldd	r25, Y+7	; 0x07
    3a72:	83 30       	cpi	r24, 0x03	; 3
    3a74:	91 05       	cpc	r25, r1
    3a76:	81 f0       	breq	.+32     	; 0x3a98 <DIO_SetPortValue+0x7c>
    3a78:	14 c0       	rjmp	.+40     	; 0x3aa2 <DIO_SetPortValue+0x86>
		case PORT_A: PORTA_REG=PORT_HIGH;break;
    3a7a:	eb e3       	ldi	r30, 0x3B	; 59
    3a7c:	f0 e0       	ldi	r31, 0x00	; 0
    3a7e:	8f ef       	ldi	r24, 0xFF	; 255
    3a80:	80 83       	st	Z, r24
    3a82:	49 c0       	rjmp	.+146    	; 0x3b16 <DIO_SetPortValue+0xfa>
		case PORT_B: PORTB_REG=PORT_HIGH;break;
    3a84:	e8 e3       	ldi	r30, 0x38	; 56
    3a86:	f0 e0       	ldi	r31, 0x00	; 0
    3a88:	8f ef       	ldi	r24, 0xFF	; 255
    3a8a:	80 83       	st	Z, r24
    3a8c:	44 c0       	rjmp	.+136    	; 0x3b16 <DIO_SetPortValue+0xfa>
		case PORT_C: PORTC_REG=PORT_HIGH;break;
    3a8e:	e5 e3       	ldi	r30, 0x35	; 53
    3a90:	f0 e0       	ldi	r31, 0x00	; 0
    3a92:	8f ef       	ldi	r24, 0xFF	; 255
    3a94:	80 83       	st	Z, r24
    3a96:	3f c0       	rjmp	.+126    	; 0x3b16 <DIO_SetPortValue+0xfa>
		case PORT_D: PORTD_REG=PORT_HIGH;break;
    3a98:	e2 e3       	ldi	r30, 0x32	; 50
    3a9a:	f0 e0       	ldi	r31, 0x00	; 0
    3a9c:	8f ef       	ldi	r24, 0xFF	; 255
    3a9e:	80 83       	st	Z, r24
    3aa0:	3a c0       	rjmp	.+116    	; 0x3b16 <DIO_SetPortValue+0xfa>
		default:ErrorState=NOK;break;
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	89 83       	std	Y+1, r24	; 0x01
    3aa6:	37 c0       	rjmp	.+110    	; 0x3b16 <DIO_SetPortValue+0xfa>

		}


	}
	else if (PortVal == PORT_LOW)
    3aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    3aaa:	88 23       	and	r24, r24
    3aac:	91 f5       	brne	.+100    	; 0x3b12 <DIO_SetPortValue+0xf6>
	{
		switch(PortId){
    3aae:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab0:	28 2f       	mov	r18, r24
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	3d 83       	std	Y+5, r19	; 0x05
    3ab6:	2c 83       	std	Y+4, r18	; 0x04
    3ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    3aba:	9d 81       	ldd	r25, Y+5	; 0x05
    3abc:	81 30       	cpi	r24, 0x01	; 1
    3abe:	91 05       	cpc	r25, r1
    3ac0:	c9 f0       	breq	.+50     	; 0x3af4 <DIO_SetPortValue+0xd8>
    3ac2:	2c 81       	ldd	r18, Y+4	; 0x04
    3ac4:	3d 81       	ldd	r19, Y+5	; 0x05
    3ac6:	22 30       	cpi	r18, 0x02	; 2
    3ac8:	31 05       	cpc	r19, r1
    3aca:	2c f4       	brge	.+10     	; 0x3ad6 <DIO_SetPortValue+0xba>
    3acc:	8c 81       	ldd	r24, Y+4	; 0x04
    3ace:	9d 81       	ldd	r25, Y+5	; 0x05
    3ad0:	00 97       	sbiw	r24, 0x00	; 0
    3ad2:	61 f0       	breq	.+24     	; 0x3aec <DIO_SetPortValue+0xd0>
    3ad4:	1b c0       	rjmp	.+54     	; 0x3b0c <DIO_SetPortValue+0xf0>
    3ad6:	2c 81       	ldd	r18, Y+4	; 0x04
    3ad8:	3d 81       	ldd	r19, Y+5	; 0x05
    3ada:	22 30       	cpi	r18, 0x02	; 2
    3adc:	31 05       	cpc	r19, r1
    3ade:	71 f0       	breq	.+28     	; 0x3afc <DIO_SetPortValue+0xe0>
    3ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ae2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ae4:	83 30       	cpi	r24, 0x03	; 3
    3ae6:	91 05       	cpc	r25, r1
    3ae8:	69 f0       	breq	.+26     	; 0x3b04 <DIO_SetPortValue+0xe8>
    3aea:	10 c0       	rjmp	.+32     	; 0x3b0c <DIO_SetPortValue+0xf0>
		case PORT_A: PORTA_REG=PORT_LOW;break;
    3aec:	eb e3       	ldi	r30, 0x3B	; 59
    3aee:	f0 e0       	ldi	r31, 0x00	; 0
    3af0:	10 82       	st	Z, r1
    3af2:	11 c0       	rjmp	.+34     	; 0x3b16 <DIO_SetPortValue+0xfa>
		case PORT_B: PORTB_REG=PORT_LOW;break;
    3af4:	e8 e3       	ldi	r30, 0x38	; 56
    3af6:	f0 e0       	ldi	r31, 0x00	; 0
    3af8:	10 82       	st	Z, r1
    3afa:	0d c0       	rjmp	.+26     	; 0x3b16 <DIO_SetPortValue+0xfa>
		case PORT_C: PORTC_REG=PORT_LOW;break;
    3afc:	e5 e3       	ldi	r30, 0x35	; 53
    3afe:	f0 e0       	ldi	r31, 0x00	; 0
    3b00:	10 82       	st	Z, r1
    3b02:	09 c0       	rjmp	.+18     	; 0x3b16 <DIO_SetPortValue+0xfa>
		case PORT_D: PORTD_REG=PORT_LOW;break;
    3b04:	e2 e3       	ldi	r30, 0x32	; 50
    3b06:	f0 e0       	ldi	r31, 0x00	; 0
    3b08:	10 82       	st	Z, r1
    3b0a:	05 c0       	rjmp	.+10     	; 0x3b16 <DIO_SetPortValue+0xfa>
		default:ErrorState=NOK;break;
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
    3b0e:	89 83       	std	Y+1, r24	; 0x01
    3b10:	02 c0       	rjmp	.+4      	; 0x3b16 <DIO_SetPortValue+0xfa>


	}
	else
	{
		ErrorState=NOK;
    3b12:	81 e0       	ldi	r24, 0x01	; 1
    3b14:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    3b16:	89 81       	ldd	r24, Y+1	; 0x01

}
    3b18:	27 96       	adiw	r28, 0x07	; 7
    3b1a:	0f b6       	in	r0, 0x3f	; 63
    3b1c:	f8 94       	cli
    3b1e:	de bf       	out	0x3e, r29	; 62
    3b20:	0f be       	out	0x3f, r0	; 63
    3b22:	cd bf       	out	0x3d, r28	; 61
    3b24:	cf 91       	pop	r28
    3b26:	df 91       	pop	r29
    3b28:	08 95       	ret

00003b2a <__udivmodhi4>:
    3b2a:	aa 1b       	sub	r26, r26
    3b2c:	bb 1b       	sub	r27, r27
    3b2e:	51 e1       	ldi	r21, 0x11	; 17
    3b30:	07 c0       	rjmp	.+14     	; 0x3b40 <__udivmodhi4_ep>

00003b32 <__udivmodhi4_loop>:
    3b32:	aa 1f       	adc	r26, r26
    3b34:	bb 1f       	adc	r27, r27
    3b36:	a6 17       	cp	r26, r22
    3b38:	b7 07       	cpc	r27, r23
    3b3a:	10 f0       	brcs	.+4      	; 0x3b40 <__udivmodhi4_ep>
    3b3c:	a6 1b       	sub	r26, r22
    3b3e:	b7 0b       	sbc	r27, r23

00003b40 <__udivmodhi4_ep>:
    3b40:	88 1f       	adc	r24, r24
    3b42:	99 1f       	adc	r25, r25
    3b44:	5a 95       	dec	r21
    3b46:	a9 f7       	brne	.-22     	; 0x3b32 <__udivmodhi4_loop>
    3b48:	80 95       	com	r24
    3b4a:	90 95       	com	r25
    3b4c:	bc 01       	movw	r22, r24
    3b4e:	cd 01       	movw	r24, r26
    3b50:	08 95       	ret

00003b52 <__divmodhi4>:
    3b52:	97 fb       	bst	r25, 7
    3b54:	09 2e       	mov	r0, r25
    3b56:	07 26       	eor	r0, r23
    3b58:	0a d0       	rcall	.+20     	; 0x3b6e <__divmodhi4_neg1>
    3b5a:	77 fd       	sbrc	r23, 7
    3b5c:	04 d0       	rcall	.+8      	; 0x3b66 <__divmodhi4_neg2>
    3b5e:	e5 df       	rcall	.-54     	; 0x3b2a <__udivmodhi4>
    3b60:	06 d0       	rcall	.+12     	; 0x3b6e <__divmodhi4_neg1>
    3b62:	00 20       	and	r0, r0
    3b64:	1a f4       	brpl	.+6      	; 0x3b6c <__divmodhi4_exit>

00003b66 <__divmodhi4_neg2>:
    3b66:	70 95       	com	r23
    3b68:	61 95       	neg	r22
    3b6a:	7f 4f       	sbci	r23, 0xFF	; 255

00003b6c <__divmodhi4_exit>:
    3b6c:	08 95       	ret

00003b6e <__divmodhi4_neg1>:
    3b6e:	f6 f7       	brtc	.-4      	; 0x3b6c <__divmodhi4_exit>
    3b70:	90 95       	com	r25
    3b72:	81 95       	neg	r24
    3b74:	9f 4f       	sbci	r25, 0xFF	; 255
    3b76:	08 95       	ret

00003b78 <__udivmodsi4>:
    3b78:	a1 e2       	ldi	r26, 0x21	; 33
    3b7a:	1a 2e       	mov	r1, r26
    3b7c:	aa 1b       	sub	r26, r26
    3b7e:	bb 1b       	sub	r27, r27
    3b80:	fd 01       	movw	r30, r26
    3b82:	0d c0       	rjmp	.+26     	; 0x3b9e <__udivmodsi4_ep>

00003b84 <__udivmodsi4_loop>:
    3b84:	aa 1f       	adc	r26, r26
    3b86:	bb 1f       	adc	r27, r27
    3b88:	ee 1f       	adc	r30, r30
    3b8a:	ff 1f       	adc	r31, r31
    3b8c:	a2 17       	cp	r26, r18
    3b8e:	b3 07       	cpc	r27, r19
    3b90:	e4 07       	cpc	r30, r20
    3b92:	f5 07       	cpc	r31, r21
    3b94:	20 f0       	brcs	.+8      	; 0x3b9e <__udivmodsi4_ep>
    3b96:	a2 1b       	sub	r26, r18
    3b98:	b3 0b       	sbc	r27, r19
    3b9a:	e4 0b       	sbc	r30, r20
    3b9c:	f5 0b       	sbc	r31, r21

00003b9e <__udivmodsi4_ep>:
    3b9e:	66 1f       	adc	r22, r22
    3ba0:	77 1f       	adc	r23, r23
    3ba2:	88 1f       	adc	r24, r24
    3ba4:	99 1f       	adc	r25, r25
    3ba6:	1a 94       	dec	r1
    3ba8:	69 f7       	brne	.-38     	; 0x3b84 <__udivmodsi4_loop>
    3baa:	60 95       	com	r22
    3bac:	70 95       	com	r23
    3bae:	80 95       	com	r24
    3bb0:	90 95       	com	r25
    3bb2:	9b 01       	movw	r18, r22
    3bb4:	ac 01       	movw	r20, r24
    3bb6:	bd 01       	movw	r22, r26
    3bb8:	cf 01       	movw	r24, r30
    3bba:	08 95       	ret

00003bbc <__prologue_saves__>:
    3bbc:	2f 92       	push	r2
    3bbe:	3f 92       	push	r3
    3bc0:	4f 92       	push	r4
    3bc2:	5f 92       	push	r5
    3bc4:	6f 92       	push	r6
    3bc6:	7f 92       	push	r7
    3bc8:	8f 92       	push	r8
    3bca:	9f 92       	push	r9
    3bcc:	af 92       	push	r10
    3bce:	bf 92       	push	r11
    3bd0:	cf 92       	push	r12
    3bd2:	df 92       	push	r13
    3bd4:	ef 92       	push	r14
    3bd6:	ff 92       	push	r15
    3bd8:	0f 93       	push	r16
    3bda:	1f 93       	push	r17
    3bdc:	cf 93       	push	r28
    3bde:	df 93       	push	r29
    3be0:	cd b7       	in	r28, 0x3d	; 61
    3be2:	de b7       	in	r29, 0x3e	; 62
    3be4:	ca 1b       	sub	r28, r26
    3be6:	db 0b       	sbc	r29, r27
    3be8:	0f b6       	in	r0, 0x3f	; 63
    3bea:	f8 94       	cli
    3bec:	de bf       	out	0x3e, r29	; 62
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	cd bf       	out	0x3d, r28	; 61
    3bf2:	09 94       	ijmp

00003bf4 <__epilogue_restores__>:
    3bf4:	2a 88       	ldd	r2, Y+18	; 0x12
    3bf6:	39 88       	ldd	r3, Y+17	; 0x11
    3bf8:	48 88       	ldd	r4, Y+16	; 0x10
    3bfa:	5f 84       	ldd	r5, Y+15	; 0x0f
    3bfc:	6e 84       	ldd	r6, Y+14	; 0x0e
    3bfe:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c00:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c02:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c04:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c06:	b9 84       	ldd	r11, Y+9	; 0x09
    3c08:	c8 84       	ldd	r12, Y+8	; 0x08
    3c0a:	df 80       	ldd	r13, Y+7	; 0x07
    3c0c:	ee 80       	ldd	r14, Y+6	; 0x06
    3c0e:	fd 80       	ldd	r15, Y+5	; 0x05
    3c10:	0c 81       	ldd	r16, Y+4	; 0x04
    3c12:	1b 81       	ldd	r17, Y+3	; 0x03
    3c14:	aa 81       	ldd	r26, Y+2	; 0x02
    3c16:	b9 81       	ldd	r27, Y+1	; 0x01
    3c18:	ce 0f       	add	r28, r30
    3c1a:	d1 1d       	adc	r29, r1
    3c1c:	0f b6       	in	r0, 0x3f	; 63
    3c1e:	f8 94       	cli
    3c20:	de bf       	out	0x3e, r29	; 62
    3c22:	0f be       	out	0x3f, r0	; 63
    3c24:	cd bf       	out	0x3d, r28	; 61
    3c26:	ed 01       	movw	r28, r26
    3c28:	08 95       	ret

00003c2a <_exit>:
    3c2a:	f8 94       	cli

00003c2c <__stop_program>:
    3c2c:	ff cf       	rjmp	.-2      	; 0x3c2c <__stop_program>
